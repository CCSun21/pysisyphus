"""
Molecular integrals over Gaussian basis functions generated by sympleints.
See https://github.com/eljost/sympleints for more information.

sympleints version: 0.1.dev3+g666ae1b.d20221114
symppy version: 1.10.1

sympleints was executed with the following arguments:
	lmax = 4
	lauxmax = 5
	write = False
	out_dir = kinfixnorm
	keys = ['kin']
	sph = False
	norm_pgto = True
"""


import numpy


def kinetic3d_00(ax, da, A, bx, db, B):
    """Cartesian 3D (ss) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = 0.5 / (ax + bx)
    x3 = 2.0 * ax**2
    x4 = ax * bx * x1
    x5 = (
        5.56832799683171
        * x1**1.5
        * numpy.exp(-x4 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2))
    )

    # 1 item(s)
    result[0, 0] = numpy.sum(
        -0.507949087473928
        * da
        * db
        * x5
        * (
            3.0 * x0
            + x3 * (x2 + (-x1 * (ax * A[0] + bx * B[0]) + A[0]) ** 2)
            + x3 * (x2 + (-x1 * (ax * A[1] + bx * B[1]) + A[1]) ** 2)
            + x3 * (x2 + (-x1 * (ax * A[2] + bx * B[2]) + A[2]) ** 2)
        )
        * numpy.sqrt(ax**1.5)
        * numpy.sqrt(bx**1.5)
    )
    return result


def kinetic3d_01(ax, da, A, bx, db, B):
    """Cartesian 3D (sp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = 2.0 * ax
    x4 = (2.0 * bx + x3) ** (-1.0)
    x5 = 2.0 * ax**2
    x6 = -x0 - x5 * (x4 + (x2 + A[0]) ** 2)
    x7 = numpy.sqrt(x1)
    x8 = 1.77245385090552 * x7
    x9 = bx * x1
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = -x11 * (x2 + B[0])
    x13 = x12 * x8
    x14 = x3 * x9
    x15 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x16 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x17 = 3.14159265358979 * x1 * x16
    x18 = 5.56832799683171 * x7
    x19 = x12 * x18
    x20 = -x1 * (ax * A[1] + bx * B[1])
    x21 = -x15 * (x0 + x5 * (x4 + (x20 + A[1]) ** 2))
    x22 = x1 * x16 * x21
    x23 = -x1 * (ax * A[2] + bx * B[2])
    x24 = -x16 * (x0 + x5 * (x4 + (x23 + A[2]) ** 2))
    x25 = x1 * x15
    x26 = 1.01589817494786 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**2.5)
    x27 = -x20 - B[1]
    x28 = x27 * x8
    x29 = x11 * x25
    x30 = x18 * x27 * x29
    x31 = x16 * x6
    x32 = -x23 - B[2]
    x33 = x32 * x8
    x34 = x18 * x32

    # 3 item(s)
    result[0, 0] = numpy.sum(
        x26 * (x13 * x15 * x17 * (x14 + x6) + x19 * x22 + x19 * x24 * x25)
    )
    result[0, 1] = numpy.sum(
        x26 * (x11 * x17 * x28 * (x14 * x15 + x21) + x24 * x30 + x30 * x31)
    )
    result[0, 2] = numpy.sum(
        x26
        * (
            x11 * x22 * x34
            + x29 * x31 * x34
            + 3.14159265358979 * x29 * x33 * (x14 * x16 + x24)
        )
    )
    return result


def kinetic3d_02(ax, da, A, bx, db, B):
    """Cartesian 3D (sd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = -x0 * (ax * A[0] + bx * B[0])
    x2 = -x1 - B[0]
    x3 = -ax
    x4 = 2.0 * ax
    x5 = 2.0 * bx
    x6 = (x4 + x5) ** (-1.0)
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x6 + (x1 + A[0]) ** 2)
    x9 = ax * x0
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = numpy.sqrt(x0)
    x13 = 1.77245385090552 * x12
    x14 = x11 * x13
    x15 = x14 * x2
    x16 = bx * x0 * x4
    x17 = x15 * (x16 + x8)
    x18 = x14 * x6
    x19 = x14 * x2**2 + x18
    x20 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x21 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x22 = 3.14159265358979 * x0 * x21
    x23 = x20 * x22
    x24 = -x0 * (ax * A[1] + bx * B[1])
    x25 = -x3 - x7 * (x6 + (x24 + A[1]) ** 2)
    x26 = x19 * x23
    x27 = -x0 * (ax * A[2] + bx * B[2])
    x28 = -x3 - x7 * (x6 + (x27 + A[2]) ** 2)
    x29 = 0.179587122125167 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**3.5)
    x30 = 6.53197264742181 * x29
    x31 = -x24 - B[1]
    x32 = x13 * x20
    x33 = x31 * x32
    x34 = x33 * (x16 + x25)
    x35 = x11 * x22
    x36 = x34 * x35
    x37 = x17 * x23
    x38 = 5.56832799683171
    x39 = x0 * x11 * x20
    x40 = x12 * x2 * x21 * x38 * x39
    x41 = 11.3137084989848 * x29
    x42 = -x27 - B[2]
    x43 = x13 * x21
    x44 = x42 * x43
    x45 = x44 * (x16 + x28)
    x46 = 3.14159265358979 * x39
    x47 = x45 * x46
    x48 = x32 * x6
    x49 = x31**2 * x32 + x48
    x50 = x35 * x49
    x51 = x43 * x6
    x52 = x42**2 * x43 + x51
    x53 = x46 * x52

    # 6 item(s)
    result[0, 0] = numpy.sum(
        x30
        * (x23 * (x17 * x2 + x18 * x8 - x9 * (x14 - x19 * x5)) + x25 * x26 + x26 * x28)
    )
    result[0, 1] = numpy.sum(x41 * (x2 * x36 + x28 * x31 * x40 + x31 * x37))
    result[0, 2] = numpy.sum(x41 * (x2 * x47 + x25 * x40 * x42 + x37 * x42))
    result[0, 3] = numpy.sum(
        x30
        * (x28 * x50 + x35 * (x25 * x48 + x31 * x34 - x9 * (x32 - x49 * x5)) + x50 * x8)
    )
    result[0, 4] = numpy.sum(
        x41 * (x12 * x21 * x31 * x38 * x39 * x42 * x8 + x31 * x47 + x36 * x42)
    )
    result[0, 5] = numpy.sum(
        x30
        * (x25 * x53 + x46 * (x28 * x51 + x42 * x45 - x9 * (x43 - x5 * x52)) + x53 * x8)
    )
    return result


def kinetic3d_03(ax, da, A, bx, db, B):
    """Cartesian 3D (sf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = 2.0 * ax**2
    x7 = -x3 - x6 * (x2 + (x5 + A[0]) ** 2)
    x8 = -x5 - B[0]
    x9 = ax * x4
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.77245385090552 * numpy.sqrt(x4)
    x13 = x11 * x12
    x14 = x13 * x8
    x15 = x14 * x7
    x16 = 4.0 * x10
    x17 = bx * x0 * x4
    x18 = x14 * x17 + x15
    x19 = x13 * x2
    x20 = x13 * x8**2 + x19
    x21 = x18 * x8 + x19 * x7 + x9 * (x1 * x20 - x13)
    x22 = x8 * (2.0 * x19 + x20)
    x23 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x24 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x25 = 3.14159265358979 * x24 * x4
    x26 = x23 * x25
    x27 = -x4 * (ax * A[1] + bx * B[1])
    x28 = -x3 - x6 * (x2 + (x27 + A[1]) ** 2)
    x29 = x22 * x26
    x30 = -x4 * (ax * A[2] + bx * B[2])
    x31 = -x3 - x6 * (x2 + (x30 + A[2]) ** 2)
    x32 = 0.179587122125167 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**4.5)
    x33 = 5.84237394672177 * x32
    x34 = -x27 - B[1]
    x35 = x12 * x23
    x36 = x34 * x35
    x37 = x28 * x36
    x38 = x17 * x36 + x37
    x39 = x12 * x24
    x40 = x21 * x26
    x41 = x20 * x26
    x42 = 13.0639452948436 * x32
    x43 = -x30 - B[2]
    x44 = x39 * x43
    x45 = x31 * x44
    x46 = x17 * x44 + x45
    x47 = x2 * x35
    x48 = x34**2 * x35 + x47
    x49 = x28 * x47 + x34 * x38 + x9 * (x1 * x48 - x35)
    x50 = x11 * x25
    x51 = x49 * x50
    x52 = x50 * x8
    x53 = 3.14159265358979 * x11 * x23 * x4
    x54 = x53 * x8
    x55 = x2 * x39
    x56 = x39 * x43**2 + x55
    x57 = x31 * x55 + x43 * x46 + x9 * (x1 * x56 - x39)
    x58 = x53 * x57
    x59 = x34 * (2.0 * x47 + x48)
    x60 = x50 * x59
    x61 = x43 * (2.0 * x55 + x56)
    x62 = x53 * x61

    # 10 item(s)
    result[0, 0] = numpy.sum(
        x33
        * (
            x26 * (x2 * (x14 * x16 + 2.0 * x15) + x21 * x8 + x9 * (x1 * x22 - 2.0 * x14))
            + x28 * x29
            + x29 * x31
        )
    )
    result[0, 1] = numpy.sum(x42 * (x20 * x38 * x39 + x31 * x34 * x41 + x34 * x40))
    result[0, 2] = numpy.sum(x42 * (x20 * x35 * x46 + x28 * x41 * x43 + x40 * x43))
    result[0, 3] = numpy.sum(x42 * (x18 * x39 * x48 + x31 * x48 * x52 + x51 * x8))
    result[0, 4] = numpy.sum(
        22.6274169979695
        * x32
        * (x18 * x26 * x34 * x43 + x34 * x46 * x54 + x38 * x43 * x52)
    )
    result[0, 5] = numpy.sum(x42 * (x18 * x35 * x56 + x28 * x54 * x56 + x58 * x8))
    result[0, 6] = numpy.sum(
        x33
        * (
            x31 * x60
            + x50
            * (x2 * (x16 * x36 + 2.0 * x37) + x34 * x49 + x9 * (x1 * x59 - 2.0 * x36))
            + x60 * x7
        )
    )
    result[0, 7] = numpy.sum(x42 * (x13 * x46 * x48 + x43 * x48 * x50 * x7 + x43 * x51))
    result[0, 8] = numpy.sum(x42 * (x13 * x38 * x56 + x34 * x53 * x56 * x7 + x34 * x58))
    result[0, 9] = numpy.sum(
        x33
        * (
            x28 * x62
            + x53
            * (x2 * (x16 * x44 + 2.0 * x45) + x43 * x57 + x9 * (x1 * x61 - 2.0 * x44))
            + x62 * x7
        )
    )
    return result


def kinetic3d_04(ax, da, A, bx, db, B):
    """Cartesian 3D (sg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = 2.0 * ax**2
    x8 = -x6 - x7 * (x2 + (x4 + A[0]) ** 2)
    x9 = ax * x3
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.77245385090552 * numpy.sqrt(x3)
    x13 = x11 * x12
    x14 = x13 * x5
    x15 = x14 * x8
    x16 = bx * x0 * x3
    x17 = x14 * x16 + x15
    x18 = x17 * x5
    x19 = x13 * x5**2
    x20 = x13 * x2
    x21 = x19 + x20
    x22 = x9 * (x1 * x21 - x13)
    x23 = x20 * x8
    x24 = 4.0 * x10
    x25 = x18 + x22 + x23
    x26 = x5 * (2.0 * x20 + x21)
    x27 = x2 * (x14 * x24 + 2.0 * x15) + x25 * x5 + x9 * (x1 * x26 - 2.0 * x14)
    x28 = 3.0 * x19 + 3.0 * x20
    x29 = x2 * x28 + x26 * x5
    x30 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x31 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x32 = 3.14159265358979 * x3 * x31
    x33 = x30 * x32
    x34 = -x3 * (ax * A[1] + bx * B[1])
    x35 = -x6 - x7 * (x2 + (x34 + A[1]) ** 2)
    x36 = x29 * x33
    x37 = -x3 * (ax * A[2] + bx * B[2])
    x38 = -x6 - x7 * (x2 + (x37 + A[2]) ** 2)
    x39 = 0.179587122125167 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**5.5)
    x40 = 4.41641957979107 * x39
    x41 = -x34 - B[1]
    x42 = x12 * x30
    x43 = x41 * x42
    x44 = x35 * x43
    x45 = x16 * x43 + x44
    x46 = x12 * x31
    x47 = x45 * x46
    x48 = x27 * x33
    x49 = x26 * x33
    x50 = 11.6847478934435 * x39
    x51 = -x37 - B[2]
    x52 = x46 * x51
    x53 = x38 * x52
    x54 = x16 * x52 + x53
    x55 = x41 * x45
    x56 = x41**2 * x42
    x57 = x2 * x42
    x58 = x56 + x57
    x59 = x9 * (x1 * x58 - x42)
    x60 = x35 * x57
    x61 = x55 + x59 + x60
    x62 = x21 * x46
    x63 = 15.084944665313 * x39
    x64 = 26.1278905896872 * x39
    x65 = x51 * x54
    x66 = x46 * x51**2
    x67 = x2 * x46
    x68 = x66 + x67
    x69 = x9 * (x1 * x68 - x46)
    x70 = x38 * x67
    x71 = x65 + x69 + x70
    x72 = x21 * x42
    x73 = x41 * (2.0 * x57 + x58)
    x74 = x2 * (x24 * x43 + 2.0 * x44) + x41 * x61 + x9 * (x1 * x73 - 2.0 * x43)
    x75 = x11 * x32
    x76 = x74 * x75
    x77 = x5 * x75
    x78 = 3.14159265358979 * x11 * x3 * x30
    x79 = x5 * x78
    x80 = x51 * (2.0 * x67 + x68)
    x81 = x2 * (x24 * x52 + 2.0 * x53) + x51 * x71 + x9 * (x1 * x80 - 2.0 * x52)
    x82 = x78 * x81
    x83 = 3.0 * x56 + 3.0 * x57
    x84 = x2 * x83 + x41 * x73
    x85 = x75 * x84
    x86 = x13 * x58
    x87 = 3.0 * x66 + 3.0 * x67
    x88 = x2 * x87 + x51 * x80
    x89 = x78 * x88

    # 15 item(s)
    result[0, 0] = numpy.sum(
        x40
        * (
            x33 * (3.0 * x2 * (x18 + x22 + x23) + x27 * x5 + x9 * (2.0 * bx * x29 - x28))
            + x35 * x36
            + x36 * x38
        )
    )
    result[0, 1] = numpy.sum(x50 * (x26 * x47 + x38 * x41 * x49 + x41 * x48))
    result[0, 2] = numpy.sum(x50 * (x26 * x42 * x54 + x35 * x49 * x51 + x48 * x51))
    result[0, 3] = numpy.sum(x63 * (x25 * x46 * x58 + x38 * x58 * x62 + x61 * x62))
    result[0, 4] = numpy.sum(
        x64 * (x21 * x43 * x54 + x21 * x47 * x51 + x25 * x33 * x41 * x51)
    )
    result[0, 5] = numpy.sum(x63 * (x25 * x42 * x68 + x35 * x68 * x72 + x71 * x72))
    result[0, 6] = numpy.sum(x50 * (x17 * x46 * x73 + x38 * x73 * x77 + x5 * x76))
    result[0, 7] = numpy.sum(x64 * (x14 * x54 * x58 + x17 * x52 * x58 + x51 * x61 * x77))
    result[0, 8] = numpy.sum(x64 * (x14 * x45 * x68 + x17 * x43 * x68 + x41 * x71 * x79))
    result[0, 9] = numpy.sum(x50 * (x17 * x42 * x80 + x35 * x79 * x80 + x5 * x82))
    result[0, 10] = numpy.sum(
        x40
        * (
            x38 * x85
            + x75
            * (3.0 * x2 * (x55 + x59 + x60) + x41 * x74 + x9 * (2.0 * bx * x84 - x83))
            + x8 * x85
        )
    )
    result[0, 11] = numpy.sum(x50 * (x13 * x54 * x73 + x51 * x73 * x75 * x8 + x51 * x76))
    result[0, 12] = numpy.sum(x63 * (x13 * x61 * x68 + x68 * x8 * x86 + x71 * x86))
    result[0, 13] = numpy.sum(x50 * (x13 * x45 * x80 + x41 * x78 * x8 * x80 + x41 * x82))
    result[0, 14] = numpy.sum(
        x40
        * (
            x35 * x89
            + x78
            * (3.0 * x2 * (x65 + x69 + x70) + x51 * x81 + x9 * (2.0 * bx * x88 - x87))
            + x8 * x89
        )
    )
    return result


def kinetic3d_10(ax, da, A, bx, db, B):
    """Cartesian 3D (ps) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = x1 * (ax * A[0] + bx * B[0]) - A[0]
    x3 = 2.0 * ax
    x4 = (2.0 * bx + x3) ** (-1.0)
    x5 = 2.0 * ax**2
    x6 = -x0 - x5 * (x2**2 + x4)
    x7 = numpy.sqrt(x1)
    x8 = 1.77245385090552 * x7
    x9 = bx * x1
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = x11 * x2
    x13 = x12 * x8
    x14 = x3 * x9
    x15 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x16 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x17 = 3.14159265358979 * x1 * x16
    x18 = 5.56832799683171 * x7
    x19 = x12 * x18
    x20 = x1 * (ax * A[1] + bx * B[1]) - A[1]
    x21 = -x15 * (x0 + x5 * (x20**2 + x4))
    x22 = x1 * x16 * x21
    x23 = x1 * (ax * A[2] + bx * B[2]) - A[2]
    x24 = -x16 * (x0 + x5 * (x23**2 + x4))
    x25 = x1 * x15
    x26 = 1.01589817494786 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**1.5)
    x27 = x20 * x8
    x28 = x11 * x25
    x29 = x18 * x20 * x28
    x30 = x16 * x6
    x31 = x23 * x8
    x32 = x18 * x23

    # 3 item(s)
    result[0, 0] = numpy.sum(
        x26 * (x13 * x15 * x17 * (x14 + x6) + x19 * x22 + x19 * x24 * x25)
    )
    result[1, 0] = numpy.sum(
        x26 * (x11 * x17 * x27 * (x14 * x15 + x21) + x24 * x29 + x29 * x30)
    )
    result[2, 0] = numpy.sum(
        x26
        * (
            x11 * x22 * x32
            + x28 * x30 * x32
            + 3.14159265358979 * x28 * x31 * (x14 * x16 + x24)
        )
    )
    return result


def kinetic3d_11(ax, da, A, bx, db, B):
    """Cartesian 3D (pp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = -x0 * (ax * A[0] + bx * B[0])
    x2 = -x1 - A[0]
    x3 = -ax
    x4 = 2.0 * ax
    x5 = (2.0 * bx + x4) ** (-1.0)
    x6 = 2.0 * ax**2
    x7 = -x3 - x6 * (x2**2 + x5)
    x8 = numpy.sqrt(x0)
    x9 = 1.77245385090552 * x8
    x10 = bx * x0
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = -x12 * (x1 + B[0])
    x14 = x13 * x9
    x15 = x10 * x4
    x16 = x14 * (x15 + x7)
    x17 = x5 * x9
    x18 = x12 * x17
    x19 = x14 * x2 + x18
    x20 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x21 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x22 = 3.14159265358979 * x0 * x21
    x23 = x20 * x22
    x24 = -x0 * (ax * A[1] + bx * B[1])
    x25 = -x24 - A[1]
    x26 = -x3 - x6 * (x25**2 + x5)
    x27 = x19 * x23
    x28 = -x0 * (ax * A[2] + bx * B[2])
    x29 = -x28 - A[2]
    x30 = -x3 - x6 * (x29**2 + x5)
    x31 = 2.03179634989571 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**2.5)
    x32 = -x24 - B[1]
    x33 = x20 * x32
    x34 = x26 * x9
    x35 = x33 * x9
    x36 = x15 * x35 + x33 * x34
    x37 = x12 * x2
    x38 = x37 * x9
    x39 = x23 * x38 * (x15 + x7)
    x40 = x0 * x33
    x41 = 5.56832799683171 * x21 * x8
    x42 = x37 * x41
    x43 = -x28 - B[2]
    x44 = x21 * x9
    x45 = x30 * x44
    x46 = x43 * x44
    x47 = x15 * x46 + x43 * x45
    x48 = x0 * x20
    x49 = 3.14159265358979 * x48
    x50 = x26 * x48
    x51 = x16 * x23
    x52 = x20 * x25
    x53 = x52 * (x15 * x9 + x34)
    x54 = x0 * x52
    x55 = x41 * x54
    x56 = x17 * x20
    x57 = x25 * x35 + x56
    x58 = x12 * x22
    x59 = x57 * x58
    x60 = 3.14159265358979 * x12
    x61 = x12 * x7
    x62 = x29 * (x15 * x44 + x45)
    x63 = x29 * x41
    x64 = x17 * x21
    x65 = x29 * x46 + x64
    x66 = x12 * x49
    x67 = x65 * x66

    # 9 item(s)
    result[0, 0] = numpy.sum(
        x31 * (x23 * (x15 * x19 + x16 * x2 + x18 * x7) + x26 * x27 + x27 * x30)
    )
    result[0, 1] = numpy.sum(x31 * (x22 * x36 * x37 + x30 * x40 * x42 + x32 * x39))
    result[0, 2] = numpy.sum(x31 * (x37 * x47 * x49 + x39 * x43 + x42 * x43 * x50))
    result[1, 0] = numpy.sum(x31 * (x13 * x22 * x53 + x13 * x30 * x55 + x25 * x51))
    result[1, 1] = numpy.sum(
        x31 * (x30 * x59 + x58 * (x15 * x57 + x25 * x36 + x26 * x56) + x59 * x7)
    )
    result[1, 2] = numpy.sum(x31 * (x43 * x53 * x58 + x43 * x55 * x61 + x47 * x54 * x60))
    result[2, 0] = numpy.sum(x31 * (x13 * x49 * x62 + x13 * x50 * x63 + x29 * x51))
    result[2, 1] = numpy.sum(x31 * (x29 * x36 * x58 + x40 * x60 * x62 + x40 * x61 * x63))
    result[2, 2] = numpy.sum(
        x31 * (x26 * x67 + x66 * (x15 * x65 + x29 * x47 + x30 * x64) + x67 * x7)
    )
    return result


def kinetic3d_12(ax, da, A, bx, db, B):
    """Cartesian 3D (pd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x2 + x6**2)
    x9 = -x5 - B[0]
    x10 = ax * x4
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x4)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x15 * x8
    x17 = 4.0 * x11
    x18 = bx * x0
    x19 = x18 * x4
    x20 = x15 * x19 + x16
    x21 = x14 * x2
    x22 = x14 * x9**2 + x21
    x23 = x21 * x8
    x24 = x10 * (x1 * x22 - x14) + x20 * x9 + x23
    x25 = x4 * (2.0 * x21 * x9 + x22 * x6)
    x26 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x27 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x28 = 3.14159265358979 * x27 * x4
    x29 = x26 * x28
    x30 = -x4 * (ax * A[1] + bx * B[1])
    x31 = -x30 - A[1]
    x32 = -x3 - x7 * (x2 + x31**2)
    x33 = 3.14159265358979 * x26
    x34 = x25 * x27 * x33
    x35 = -x4 * (ax * A[2] + bx * B[2])
    x36 = -x35 - A[2]
    x37 = -x3 - x7 * (x2 + x36**2)
    x38 = 0.179587122125167 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**3.5)
    x39 = 13.0639452948436 * x38
    x40 = -x30 - B[1]
    x41 = x13 * x26
    x42 = x32 * x41
    x43 = x40 * x42
    x44 = x40 * x41
    x45 = x19 * x44 + x43
    x46 = x15 * x6 + x21
    x47 = x13 * x27
    x48 = x29 * (x19 * x46 + x20 * x6 + x23)
    x49 = x29 * x46
    x50 = 22.6274169979695 * x38
    x51 = -x35 - B[2]
    x52 = x37 * x47
    x53 = x51 * x52
    x54 = x47 * x51
    x55 = x19 * x54 + x53
    x56 = x2 * x41
    x57 = x40**2 * x41 + x56
    x58 = x14 * x6
    x59 = x58 * (x19 + x8)
    x60 = x32 * x56
    x61 = x10 * (x1 * x57 - x41) + x40 * x45 + x60
    x62 = x12 * x28
    x63 = x61 * x62
    x64 = x6 * x62
    x65 = x12 * x33 * x4
    x66 = x6 * x65
    x67 = x29 * x51
    x68 = x2 * x47
    x69 = x47 * x51**2 + x68
    x70 = x37 * x68
    x71 = x10 * (x1 * x69 - x47) + x51 * x55 + x70
    x72 = x65 * x71
    x73 = x31 * (x19 * x41 + x42)
    x74 = x24 * x29
    x75 = x22 * x29
    x76 = x31 * x44 + x56
    x77 = x62 * (x19 * x76 + x31 * x45 + x60)
    x78 = x62 * x9
    x79 = x31 * x65
    x80 = x31 * x57 + 2.0 * x40 * x56
    x81 = x62 * x80
    x82 = x62 * x8
    x83 = x36 * (x19 * x47 + x52)
    x84 = x65 * x9
    x85 = x36 * x54 + x68
    x86 = x65 * (x19 * x85 + x36 * x55 + x70)
    x87 = x36 * x69 + 2.0 * x51 * x68
    x88 = x65 * x87

    # 18 item(s)
    result[0, 0] = numpy.sum(
        x39
        * (
            x29 * (x18 * x25 + x2 * (x15 * x17 + 2.0 * x16) + x24 * x6)
            + x32 * x34
            + x34 * x37
        )
    )
    result[0, 1] = numpy.sum(x50 * (x37 * x40 * x49 + x40 * x48 + x45 * x46 * x47))
    result[0, 2] = numpy.sum(x50 * (x32 * x49 * x51 + x41 * x46 * x55 + x48 * x51))
    result[0, 3] = numpy.sum(x39 * (x37 * x57 * x64 + x47 * x57 * x59 + x6 * x63))
    result[0, 4] = numpy.sum(x50 * (x40 * x55 * x66 + x40 * x59 * x67 + x45 * x51 * x64))
    result[0, 5] = numpy.sum(x39 * (x32 * x66 * x69 + x41 * x59 * x69 + x6 * x72))
    result[1, 0] = numpy.sum(x39 * (x22 * x47 * x73 + x31 * x37 * x75 + x31 * x74))
    result[1, 1] = numpy.sum(x50 * (x20 * x47 * x76 + x37 * x76 * x78 + x77 * x9))
    result[1, 2] = numpy.sum(x50 * (x20 * x31 * x67 + x51 * x73 * x78 + x55 * x79 * x9))
    result[1, 3] = numpy.sum(
        x39
        * (
            x37 * x81
            + x62 * (x19 * x80 + x2 * (x17 * x44 + 2.0 * x43) + x31 * x61)
            + x8 * x81
        )
    )
    result[1, 4] = numpy.sum(x50 * (x14 * x55 * x76 + x51 * x76 * x82 + x51 * x77))
    result[1, 5] = numpy.sum(x39 * (x14 * x69 * x73 + x31 * x72 + x69 * x79 * x8))
    result[2, 0] = numpy.sum(x39 * (x22 * x41 * x83 + x32 * x36 * x75 + x36 * x74))
    result[2, 1] = numpy.sum(
        x50 * (x20 * x29 * x36 * x40 + x36 * x45 * x78 + x40 * x83 * x84)
    )
    result[2, 2] = numpy.sum(x50 * (x20 * x41 * x85 + x32 * x84 * x85 + x86 * x9))
    result[2, 3] = numpy.sum(x39 * (x14 * x57 * x83 + x36 * x57 * x82 + x36 * x63))
    result[2, 4] = numpy.sum(x50 * (x14 * x45 * x85 + x40 * x65 * x8 * x85 + x40 * x86))
    result[2, 5] = numpy.sum(
        x39
        * (
            x32 * x88
            + x65 * (x19 * x87 + x2 * (x17 * x54 + 2.0 * x53) + x36 * x71)
            + x8 * x88
        )
    )
    return result


def kinetic3d_13(ax, da, A, bx, db, B):
    """Cartesian 3D (pf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = -x4 - A[0]
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7**2)
    x10 = ax * x3
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x5
    x16 = x15 * x9
    x17 = bx * x0
    x18 = x17 * x3
    x19 = x15 * x18 + x16
    x20 = x19 * x5
    x21 = x14 * x5**2
    x22 = x14 * x2
    x23 = x21 + x22
    x24 = x10 * (x1 * x23 - x14)
    x25 = x22 * x9
    x26 = 4.0 * x11
    x27 = x2 * (x15 * x26 + 2.0 * x16)
    x28 = x20 + x24 + x25
    x29 = 2.0 * x22 * x5
    x30 = x23 * x5 + x29
    x31 = x10 * (x1 * x30 - 2.0 * x15) + x27 + x28 * x5
    x32 = x3 * (3.0 * x2 * (x21 + x22) + x30 * x7)
    x33 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x34 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x35 = 3.14159265358979 * x3 * x34
    x36 = x33 * x35
    x37 = -x3 * (ax * A[1] + bx * B[1])
    x38 = -x37 - A[1]
    x39 = -x6 - x8 * (x2 + x38**2)
    x40 = 3.14159265358979 * x33
    x41 = x32 * x34 * x40
    x42 = -x3 * (ax * A[2] + bx * B[2])
    x43 = -x42 - A[2]
    x44 = -x6 - x8 * (x2 + x43**2)
    x45 = 0.179587122125167 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**4.5)
    x46 = 11.6847478934435 * x45
    x47 = x23 * x7 + x29
    x48 = -x37 - B[1]
    x49 = x13 * x33
    x50 = x48 * x49
    x51 = x39 * x50
    x52 = x18 * x50 + x51
    x53 = x13 * x34
    x54 = x52 * x53
    x55 = x36 * (x18 * x47 + x27 + x28 * x7)
    x56 = x36 * x47
    x57 = 26.1278905896872 * x45
    x58 = -x42 - B[2]
    x59 = x53 * x58
    x60 = x44 * x59
    x61 = x18 * x59 + x60
    x62 = x49 * x61
    x63 = x15 * x7 + x22
    x64 = x18 * x63 + x19 * x7 + x25
    x65 = x48**2 * x49
    x66 = x2 * x49
    x67 = x65 + x66
    x68 = x53 * x67
    x69 = x48 * x52
    x70 = x10 * (x1 * x67 - x49)
    x71 = x39 * x66
    x72 = x69 + x70 + x71
    x73 = x36 * x58
    x74 = 45.2548339959391 * x45
    x75 = x53 * x58**2
    x76 = x2 * x53
    x77 = x75 + x76
    x78 = x49 * x77
    x79 = x58 * x61
    x80 = x10 * (x1 * x77 - x53)
    x81 = x44 * x76
    x82 = x79 + x80 + x81
    x83 = 2.0 * x48 * x66
    x84 = x48 * x67 + x83
    x85 = x14 * x7
    x86 = x85 * (x18 + x9)
    x87 = x2 * (x26 * x50 + 2.0 * x51)
    x88 = x10 * (x1 * x84 - 2.0 * x50) + x48 * x72 + x87
    x89 = x12 * x35
    x90 = x88 * x89
    x91 = x7 * x89
    x92 = x12 * x3 * x40
    x93 = x7 * x92
    x94 = 2.0 * x58 * x76
    x95 = x58 * x77 + x94
    x96 = x2 * (x26 * x59 + 2.0 * x60)
    x97 = x10 * (x1 * x95 - 2.0 * x59) + x58 * x82 + x96
    x98 = x92 * x97
    x99 = x39 * x49
    x100 = x38 * (x18 * x49 + x99)
    x101 = x31 * x36
    x102 = x30 * x36
    x103 = x38 * x50 + x66
    x104 = x103 * x18 + x38 * x52 + x71
    x105 = x23 * x53
    x106 = x38 * x67 + x83
    x107 = x89 * (x106 * x18 + x38 * x72 + x87)
    x108 = x5 * x89
    x109 = x38 * x92
    x110 = 3.0 * x2 * (x65 + x66) + x38 * x84
    x111 = x110 * x89
    x112 = x89 * x9
    x113 = x14 * x77
    x114 = x43 * x53
    x115 = x114 * (x18 + x44)
    x116 = x43 * x59 + x76
    x117 = x116 * x18 + x43 * x61 + x81
    x118 = x5 * x92
    x119 = x43 * x77 + x94
    x120 = x92 * (x119 * x18 + x43 * x82 + x96)
    x121 = x14 * x67
    x122 = 3.0 * x2 * (x75 + x76) + x43 * x95
    x123 = x122 * x92

    # 30 item(s)
    result[0, 0] = numpy.sum(
        x46
        * (
            x36 * (x17 * x32 + 3.0 * x2 * (x20 + x24 + x25) + x31 * x7)
            + x39 * x41
            + x41 * x44
        )
    )
    result[0, 1] = numpy.sum(x57 * (x44 * x48 * x56 + x47 * x54 + x48 * x55))
    result[0, 2] = numpy.sum(x57 * (x39 * x56 * x58 + x47 * x62 + x55 * x58))
    result[0, 3] = numpy.sum(x57 * (x44 * x63 * x68 + x53 * x63 * x72 + x64 * x68))
    result[0, 4] = numpy.sum(x74 * (x48 * x64 * x73 + x50 * x61 * x63 + x54 * x58 * x63))
    result[0, 5] = numpy.sum(x57 * (x39 * x63 * x78 + x49 * x63 * x82 + x64 * x78))
    result[0, 6] = numpy.sum(x46 * (x44 * x84 * x91 + x53 * x84 * x86 + x7 * x90))
    result[0, 7] = numpy.sum(x57 * (x58 * x72 * x91 + x59 * x67 * x86 + x61 * x67 * x85))
    result[0, 8] = numpy.sum(x57 * (x48 * x82 * x93 + x50 * x77 * x86 + x52 * x77 * x85))
    result[0, 9] = numpy.sum(x46 * (x39 * x93 * x95 + x49 * x86 * x95 + x7 * x98))
    result[1, 0] = numpy.sum(x46 * (x100 * x30 * x53 + x101 * x38 + x102 * x38 * x44))
    result[1, 1] = numpy.sum(x57 * (x103 * x105 * x44 + x103 * x28 * x53 + x104 * x105))
    result[1, 2] = numpy.sum(x57 * (x100 * x23 * x59 + x23 * x38 * x62 + x28 * x38 * x73))
    result[1, 3] = numpy.sum(x57 * (x106 * x108 * x44 + x106 * x19 * x53 + x107 * x5))
    result[1, 4] = numpy.sum(
        x74 * (x103 * x15 * x61 + x103 * x19 * x59 + x104 * x108 * x58)
    )
    result[1, 5] = numpy.sum(x57 * (x100 * x15 * x77 + x109 * x5 * x82 + x19 * x38 * x78))
    result[1, 6] = numpy.sum(
        x46
        * (
            x111 * x44
            + x111 * x9
            + x89 * (x110 * x18 + 3.0 * x2 * (x69 + x70 + x71) + x38 * x88)
        )
    )
    result[1, 7] = numpy.sum(x57 * (x106 * x112 * x58 + x106 * x14 * x61 + x107 * x58))
    result[1, 8] = numpy.sum(x57 * (x103 * x113 * x9 + x103 * x14 * x82 + x104 * x113))
    result[1, 9] = numpy.sum(x46 * (x100 * x14 * x95 + x109 * x9 * x95 + x38 * x98))
    result[2, 0] = numpy.sum(x46 * (x101 * x43 + x102 * x39 * x43 + x115 * x30 * x49))
    result[2, 1] = numpy.sum(
        x57 * (x115 * x23 * x50 + x23 * x43 * x54 + x28 * x36 * x43 * x48)
    )
    result[2, 2] = numpy.sum(
        x57 * (x116 * x23 * x99 + x116 * x28 * x49 + x117 * x23 * x49)
    )
    result[2, 3] = numpy.sum(
        x57 * (x108 * x43 * x72 + x115 * x15 * x67 + x19 * x43 * x68)
    )
    result[2, 4] = numpy.sum(
        x74 * (x116 * x15 * x52 + x116 * x19 * x50 + x117 * x118 * x48)
    )
    result[2, 5] = numpy.sum(x57 * (x118 * x119 * x39 + x119 * x19 * x49 + x120 * x5))
    result[2, 6] = numpy.sum(x46 * (x112 * x43 * x84 + x115 * x14 * x84 + x43 * x90))
    result[2, 7] = numpy.sum(x57 * (x116 * x121 * x9 + x116 * x14 * x72 + x117 * x121))
    result[2, 8] = numpy.sum(
        x57 * (x119 * x14 * x52 + x119 * x48 * x9 * x92 + x120 * x48)
    )
    result[2, 9] = numpy.sum(
        x46
        * (
            x123 * x39
            + x123 * x9
            + x92 * (x122 * x18 + 3.0 * x2 * (x79 + x80 + x81) + x43 * x97)
        )
    )
    return result


def kinetic3d_14(ax, da, A, bx, db, B):
    """Cartesian 3D (pg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x2 + x6**2)
    x9 = -x5 - B[0]
    x10 = ax * x4
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x4)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x15 * x8
    x17 = 4.0 * x11
    x18 = x2 * (x15 * x17 + 2.0 * x16)
    x19 = bx * x0
    x20 = x19 * x4
    x21 = x15 * x20 + x16
    x22 = x21 * x9
    x23 = x14 * x9**2
    x24 = x14 * x2
    x25 = x23 + x24
    x26 = x10 * (x1 * x25 - x14)
    x27 = x24 * x8
    x28 = x22 + x26 + x27
    x29 = x28 * x9
    x30 = x25 * x9
    x31 = x24 * x9
    x32 = 2.0 * x31
    x33 = x30 + x32
    x34 = x10 * (x1 * x33 - 2.0 * x15)
    x35 = 3.0 * x2 * (x22 + x26 + x27)
    x36 = x18 + x29 + x34
    x37 = 3.0 * x23 + 3.0 * x24
    x38 = x2 * x37
    x39 = x33 * x9 + x38
    x40 = x10 * (2.0 * bx * x39 - x37) + x35 + x36 * x9
    x41 = x4 * (4.0 * x2 * (x30 + 2.0 * x31) + x39 * x6)
    x42 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x43 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x44 = 3.14159265358979 * x4 * x43
    x45 = x42 * x44
    x46 = -x4 * (ax * A[1] + bx * B[1])
    x47 = -x46 - A[1]
    x48 = -x3 - x7 * (x2 + x47**2)
    x49 = 3.14159265358979 * x42
    x50 = x41 * x43 * x49
    x51 = -x4 * (ax * A[2] + bx * B[2])
    x52 = -x51 - A[2]
    x53 = -x3 - x7 * (x2 + x52**2)
    x54 = 0.179587122125167 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**5.5)
    x55 = 8.83283915958214 * x54
    x56 = x33 * x6 + x38
    x57 = -x46 - B[1]
    x58 = x13 * x42
    x59 = x57 * x58
    x60 = x48 * x59
    x61 = x20 * x59 + x60
    x62 = x13 * x43
    x63 = x61 * x62
    x64 = x45 * (x20 * x56 + x35 + x36 * x6)
    x65 = x45 * x56
    x66 = 23.3694957868871 * x54
    x67 = -x51 - B[2]
    x68 = x62 * x67
    x69 = x53 * x68
    x70 = x20 * x68 + x69
    x71 = x58 * x70
    x72 = x57 * x61
    x73 = x57**2 * x58
    x74 = x2 * x58
    x75 = x73 + x74
    x76 = x10 * (x1 * x75 - x58)
    x77 = x48 * x74
    x78 = x72 + x76 + x77
    x79 = x25 * x6 + x32
    x80 = x62 * x79
    x81 = x18 + x20 * x79 + x28 * x6
    x82 = x62 * x75
    x83 = 30.169889330626 * x54
    x84 = x45 * x67
    x85 = 52.2557811793745 * x54
    x86 = x67 * x70
    x87 = x62 * x67**2
    x88 = x2 * x62
    x89 = x87 + x88
    x90 = x10 * (x1 * x89 - x62)
    x91 = x53 * x88
    x92 = x86 + x90 + x91
    x93 = x58 * x79
    x94 = x58 * x89
    x95 = x15 * x6 + x24
    x96 = x20 * x95 + x21 * x6 + x27
    x97 = x57 * x75
    x98 = x57 * x74
    x99 = 2.0 * x98
    x100 = x97 + x99
    x101 = x100 * x62
    x102 = x2 * (x17 * x59 + 2.0 * x60)
    x103 = x57 * x78
    x104 = x10 * (x1 * x100 - 2.0 * x59)
    x105 = x102 + x103 + x104
    x106 = x67 * x89
    x107 = x67 * x88
    x108 = 2.0 * x107
    x109 = x106 + x108
    x110 = x109 * x58
    x111 = x2 * (x17 * x68 + 2.0 * x69)
    x112 = x67 * x92
    x113 = x10 * (x1 * x109 - 2.0 * x68)
    x114 = x111 + x112 + x113
    x115 = 3.0 * x73 + 3.0 * x74
    x116 = x115 * x2
    x117 = x100 * x57 + x116
    x118 = x14 * x6
    x119 = x118 * (x20 + x8)
    x120 = 3.0 * x2 * (x72 + x76 + x77)
    x121 = x10 * (2.0 * bx * x117 - x115) + x105 * x57 + x120
    x122 = x12 * x44
    x123 = x121 * x122
    x124 = x122 * x6
    x125 = x12 * x4 * x49
    x126 = x125 * x6
    x127 = 3.0 * x87 + 3.0 * x88
    x128 = x127 * x2
    x129 = x109 * x67 + x128
    x130 = 3.0 * x2 * (x86 + x90 + x91)
    x131 = x10 * (2.0 * bx * x129 - x127) + x114 * x67 + x130
    x132 = x125 * x131
    x133 = x47 * x58
    x134 = x133 * (x20 + x48)
    x135 = x40 * x45
    x136 = x39 * x45
    x137 = x47 * x59 + x74
    x138 = x137 * x20 + x47 * x61 + x77
    x139 = x33 * x62
    x140 = x47 * x75 + x99
    x141 = x140 * x62
    x142 = x102 + x140 * x20 + x47 * x78
    x143 = x25 * x62
    x144 = x100 * x47 + x116
    x145 = x122 * (x105 * x47 + x120 + x144 * x20)
    x146 = x122 * x9
    x147 = x125 * x47
    x148 = x117 * x47 + 4.0 * x2 * (x97 + 2.0 * x98)
    x149 = x122 * x148
    x150 = x122 * x8
    x151 = x14 * x140
    x152 = x109 * x14
    x153 = x52 * x62
    x154 = x153 * (x20 + x53)
    x155 = x52 * x68 + x88
    x156 = x155 * x20 + x52 * x70 + x91
    x157 = x33 * x58
    x158 = x108 + x52 * x89
    x159 = x158 * x58
    x160 = x111 + x158 * x20 + x52 * x92
    x161 = x125 * x9
    x162 = x109 * x52 + x128
    x163 = x125 * (x114 * x52 + x130 + x162 * x20)
    x164 = x100 * x14
    x165 = x14 * x158
    x166 = x129 * x52 + 4.0 * x2 * (x106 + 2.0 * x107)
    x167 = x125 * x166

    # 45 item(s)
    result[0, 0] = numpy.sum(
        x55
        * (
            x45 * (x19 * x41 + 4.0 * x2 * (x18 + x29 + x34) + x40 * x6)
            + x48 * x50
            + x50 * x53
        )
    )
    result[0, 1] = numpy.sum(x66 * (x53 * x57 * x65 + x56 * x63 + x57 * x64))
    result[0, 2] = numpy.sum(x66 * (x48 * x65 * x67 + x56 * x71 + x64 * x67))
    result[0, 3] = numpy.sum(x83 * (x53 * x75 * x80 + x78 * x80 + x81 * x82))
    result[0, 4] = numpy.sum(x85 * (x57 * x81 * x84 + x59 * x70 * x79 + x63 * x67 * x79))
    result[0, 5] = numpy.sum(x83 * (x48 * x89 * x93 + x81 * x94 + x92 * x93))
    result[0, 6] = numpy.sum(x66 * (x101 * x53 * x95 + x101 * x96 + x105 * x62 * x95))
    result[0, 7] = numpy.sum(x85 * (x68 * x75 * x96 + x68 * x78 * x95 + x70 * x75 * x95))
    result[0, 8] = numpy.sum(x85 * (x59 * x89 * x96 + x59 * x92 * x95 + x61 * x89 * x95))
    result[0, 9] = numpy.sum(x66 * (x110 * x48 * x95 + x110 * x96 + x114 * x58 * x95))
    result[0, 10] = numpy.sum(x55 * (x117 * x119 * x62 + x117 * x124 * x53 + x123 * x6))
    result[0, 11] = numpy.sum(
        x66 * (x100 * x118 * x70 + x100 * x119 * x68 + x105 * x124 * x67)
    )
    result[0, 12] = numpy.sum(
        x83 * (x118 * x75 * x92 + x118 * x78 * x89 + x119 * x75 * x89)
    )
    result[0, 13] = numpy.sum(
        x66 * (x109 * x118 * x61 + x109 * x119 * x59 + x114 * x126 * x57)
    )
    result[0, 14] = numpy.sum(x55 * (x119 * x129 * x58 + x126 * x129 * x48 + x132 * x6))
    result[1, 0] = numpy.sum(x55 * (x134 * x39 * x62 + x135 * x47 + x136 * x47 * x53))
    result[1, 1] = numpy.sum(x66 * (x137 * x139 * x53 + x137 * x36 * x62 + x138 * x139))
    result[1, 2] = numpy.sum(x66 * (x134 * x33 * x68 + x33 * x47 * x71 + x36 * x47 * x84))
    result[1, 3] = numpy.sum(x83 * (x141 * x25 * x53 + x141 * x28 + x142 * x143))
    result[1, 4] = numpy.sum(
        x85 * (x137 * x25 * x70 + x137 * x28 * x68 + x138 * x25 * x68)
    )
    result[1, 5] = numpy.sum(
        x83 * (x133 * x25 * x92 + x134 * x25 * x89 + x28 * x47 * x94)
    )
    result[1, 6] = numpy.sum(x66 * (x144 * x146 * x53 + x144 * x21 * x62 + x145 * x9))
    result[1, 7] = numpy.sum(
        x85 * (x140 * x15 * x70 + x140 * x21 * x68 + x142 * x146 * x67)
    )
    result[1, 8] = numpy.sum(
        x85 * (x137 * x15 * x92 + x137 * x21 * x89 + x138 * x15 * x89)
    )
    result[1, 9] = numpy.sum(
        x66 * (x109 * x134 * x15 + x110 * x21 * x47 + x114 * x147 * x9)
    )
    result[1, 10] = numpy.sum(
        x55
        * (
            x122 * (x121 * x47 + x148 * x20 + 4.0 * x2 * (x102 + x103 + x104))
            + x149 * x53
            + x149 * x8
        )
    )
    result[1, 11] = numpy.sum(x66 * (x14 * x144 * x70 + x144 * x150 * x67 + x145 * x67))
    result[1, 12] = numpy.sum(x83 * (x14 * x142 * x89 + x151 * x8 * x89 + x151 * x92))
    result[1, 13] = numpy.sum(x66 * (x114 * x137 * x14 + x137 * x152 * x8 + x138 * x152))
    result[1, 14] = numpy.sum(x55 * (x129 * x134 * x14 + x129 * x147 * x8 + x132 * x47))
    result[2, 0] = numpy.sum(x55 * (x135 * x52 + x136 * x48 * x52 + x154 * x39 * x58))
    result[2, 1] = numpy.sum(
        x66 * (x154 * x33 * x59 + x33 * x52 * x63 + x36 * x45 * x52 * x57)
    )
    result[2, 2] = numpy.sum(x66 * (x155 * x157 * x48 + x155 * x36 * x58 + x156 * x157))
    result[2, 3] = numpy.sum(
        x83 * (x143 * x52 * x78 + x154 * x25 * x75 + x28 * x52 * x82)
    )
    result[2, 4] = numpy.sum(
        x85 * (x155 * x25 * x61 + x155 * x28 * x59 + x156 * x25 * x59)
    )
    result[2, 5] = numpy.sum(x83 * (x159 * x25 * x48 + x159 * x28 + x160 * x25 * x58))
    result[2, 6] = numpy.sum(
        x66 * (x100 * x15 * x154 + x101 * x21 * x52 + x105 * x146 * x52)
    )
    result[2, 7] = numpy.sum(
        x85 * (x15 * x155 * x78 + x15 * x156 * x75 + x155 * x21 * x75)
    )
    result[2, 8] = numpy.sum(
        x85 * (x15 * x158 * x61 + x158 * x21 * x59 + x160 * x161 * x57)
    )
    result[2, 9] = numpy.sum(x66 * (x161 * x162 * x48 + x162 * x21 * x58 + x163 * x9))
    result[2, 10] = numpy.sum(x55 * (x117 * x14 * x154 + x117 * x150 * x52 + x123 * x52))
    result[2, 11] = numpy.sum(x66 * (x105 * x14 * x155 + x155 * x164 * x8 + x156 * x164))
    result[2, 12] = numpy.sum(x83 * (x14 * x160 * x75 + x165 * x75 * x8 + x165 * x78))
    result[2, 13] = numpy.sum(
        x66 * (x125 * x162 * x57 * x8 + x14 * x162 * x61 + x163 * x57)
    )
    result[2, 14] = numpy.sum(
        x55
        * (
            x125 * (x131 * x52 + x166 * x20 + 4.0 * x2 * (x111 + x112 + x113))
            + x167 * x48
            + x167 * x8
        )
    )
    return result


def kinetic3d_20(ax, da, A, bx, db, B):
    """Cartesian 3D (ds) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = x0 * (ax * A[0] + bx * B[0]) - A[0]
    x2 = -ax
    x3 = x1**2
    x4 = 2.0 * ax
    x5 = (2.0 * bx + x4) ** (-1.0)
    x6 = 2.0 * ax**2
    x7 = -x2 - x6 * (x3 + x5)
    x8 = bx * x0
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = numpy.sqrt(x0)
    x12 = 1.77245385090552 * x11
    x13 = x10 * x12
    x14 = x1 * x13
    x15 = x4 * x8
    x16 = x14 * (x15 + x7)
    x17 = x13 * x5
    x18 = x13 * x3 + x17
    x19 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x20 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x21 = 3.14159265358979 * x0 * x20
    x22 = x19 * x21
    x23 = x0 * (ax * A[1] + bx * B[1]) - A[1]
    x24 = x23**2
    x25 = -x2 - x6 * (x24 + x5)
    x26 = x18 * x22
    x27 = x0 * (ax * A[2] + bx * B[2]) - A[2]
    x28 = x27**2
    x29 = -x2 - x6 * (x28 + x5)
    x30 = 0.179587122125167 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**1.5)
    x31 = 6.53197264742181 * x30
    x32 = x12 * x19
    x33 = x23 * x32
    x34 = x33 * (x15 + x25)
    x35 = x10 * x21
    x36 = x34 * x35
    x37 = x16 * x22
    x38 = 5.56832799683171
    x39 = x0 * x10 * x19
    x40 = x1 * x11 * x20 * x38 * x39
    x41 = 11.3137084989848 * x30
    x42 = x12 * x20
    x43 = x27 * x42
    x44 = x43 * (x15 + x29)
    x45 = 3.14159265358979 * x39
    x46 = x44 * x45
    x47 = x32 * x5
    x48 = x24 * x32 + x47
    x49 = x35 * x48
    x50 = x42 * x5
    x51 = x28 * x42 + x50
    x52 = x45 * x51

    # 6 item(s)
    result[0, 0] = numpy.sum(
        x31
        * (x22 * (x1 * x16 + x17 * x7 - x8 * (x13 - x18 * x4)) + x25 * x26 + x26 * x29)
    )
    result[1, 0] = numpy.sum(x41 * (x1 * x36 + x23 * x29 * x40 + x23 * x37))
    result[2, 0] = numpy.sum(x41 * (x1 * x46 + x25 * x27 * x40 + x27 * x37))
    result[3, 0] = numpy.sum(
        x31
        * (x29 * x49 + x35 * (x23 * x34 + x25 * x47 - x8 * (x32 - x4 * x48)) + x49 * x7)
    )
    result[4, 0] = numpy.sum(
        x41 * (x11 * x20 * x23 * x27 * x38 * x39 * x7 + x23 * x46 + x27 * x36)
    )
    result[5, 0] = numpy.sum(
        x31
        * (x25 * x52 + x45 * (x27 * x44 + x29 * x50 + x8 * (x4 * x51 - x42)) + x52 * x7)
    )
    return result


def kinetic3d_21(ax, da, A, bx, db, B):
    """Cartesian 3D (dp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = x5**2
    x7 = 2.0 * ax**2
    x8 = -x2 - x7 * (x1 + x6)
    x9 = -x4 - B[0]
    x10 = bx * x3
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x0 * x10
    x17 = x15 * (x16 + x8)
    x18 = x14 * x5
    x19 = x18 * (x16 + x8)
    x20 = x1 * x14
    x21 = x18 * x9 + x20
    x22 = x20 * x8
    x23 = x16 * x21 + x17 * x5 + x22
    x24 = x1 * (x15 + x18) + x21 * x5
    x25 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x26 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x27 = 3.14159265358979 * x26 * x3
    x28 = x25 * x27
    x29 = -x3 * (ax * A[1] + bx * B[1])
    x30 = -x29 - A[1]
    x31 = x30**2
    x32 = -x2 - x7 * (x1 + x31)
    x33 = x24 * x28
    x34 = -x3 * (ax * A[2] + bx * B[2])
    x35 = -x34 - A[2]
    x36 = x35**2
    x37 = -x2 - x7 * (x1 + x36)
    x38 = 0.179587122125167 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**2.5)
    x39 = 13.0639452948436 * x38
    x40 = -x29 - B[1]
    x41 = x13 * x25
    x42 = x40 * x41
    x43 = x42 * (x16 + x32)
    x44 = x14 * x6 + x20
    x45 = x13 * x26
    x46 = x28 * (x10 * (x0 * x44 - x14) + x19 * x5 + x22)
    x47 = x28 * x44
    x48 = -x34 - B[2]
    x49 = x45 * x48
    x50 = x49 * (x16 + x37)
    x51 = x30 * x41
    x52 = x51 * (x16 + x32)
    x53 = x23 * x28
    x54 = x28 * x30
    x55 = 22.6274169979695 * x38
    x56 = x1 * x41
    x57 = x40 * x51 + x56
    x58 = x32 * x56
    x59 = x16 * x57 + x30 * x43 + x58
    x60 = x12 * x27
    x61 = x59 * x60
    x62 = x5 * x60
    x63 = 3.14159265358979 * x12 * x25 * x3
    x64 = x5 * x63
    x65 = x35 * x45
    x66 = x65 * (x16 + x37)
    x67 = x28 * x35
    x68 = x1 * x45
    x69 = x48 * x65 + x68
    x70 = x37 * x68
    x71 = x16 * x69 + x35 * x50 + x70
    x72 = x63 * x71
    x73 = x31 * x41 + x56
    x74 = x60 * (x10 * (x0 * x73 - x41) + x30 * x52 + x58)
    x75 = x60 * x73
    x76 = x1 * (x42 + x51) + x30 * x57
    x77 = x60 * x76
    x78 = x30 * x63
    x79 = x35 * x60
    x80 = x36 * x45 + x68
    x81 = x63 * (x10 * (x0 * x80 - x45) + x35 * x66 + x70)
    x82 = x63 * x80
    x83 = x1 * (x49 + x65) + x35 * x69
    x84 = x63 * x83

    # 18 item(s)
    result[0, 0] = numpy.sum(
        x39
        * (
            x28 * (x1 * (x17 + x19) + x10 * (x0 * x24 - x15) + x23 * x5)
            + x32 * x33
            + x33 * x37
        )
    )
    result[0, 1] = numpy.sum(x39 * (x37 * x40 * x47 + x40 * x46 + x43 * x44 * x45))
    result[0, 2] = numpy.sum(x39 * (x32 * x47 * x48 + x41 * x44 * x50 + x46 * x48))
    result[1, 0] = numpy.sum(x55 * (x21 * x37 * x54 + x21 * x45 * x52 + x30 * x53))
    result[1, 1] = numpy.sum(x55 * (x19 * x45 * x57 + x37 * x57 * x62 + x5 * x61))
    result[1, 2] = numpy.sum(x55 * (x19 * x48 * x54 + x30 * x50 * x64 + x48 * x52 * x62))
    result[2, 0] = numpy.sum(x55 * (x21 * x32 * x67 + x21 * x41 * x66 + x35 * x53))
    result[2, 1] = numpy.sum(x55 * (x19 * x40 * x67 + x35 * x43 * x62 + x40 * x64 * x66))
    result[2, 2] = numpy.sum(x55 * (x19 * x41 * x69 + x32 * x64 * x69 + x5 * x72))
    result[3, 0] = numpy.sum(x39 * (x17 * x45 * x73 + x37 * x75 * x9 + x74 * x9))
    result[3, 1] = numpy.sum(
        x39
        * (
            x37 * x77
            + x60 * (x1 * (x43 + x52) + x10 * (x0 * x76 - x42) + x30 * x59)
            + x77 * x8
        )
    )
    result[3, 2] = numpy.sum(x39 * (x14 * x50 * x73 + x48 * x74 + x48 * x75 * x8))
    result[4, 0] = numpy.sum(x55 * (x17 * x35 * x54 + x52 * x79 * x9 + x66 * x78 * x9))
    result[4, 1] = numpy.sum(x55 * (x14 * x57 * x66 + x35 * x61 + x57 * x79 * x8))
    result[4, 2] = numpy.sum(x55 * (x14 * x52 * x69 + x30 * x72 + x69 * x78 * x8))
    result[5, 0] = numpy.sum(x39 * (x17 * x41 * x80 + x32 * x82 * x9 + x81 * x9))
    result[5, 1] = numpy.sum(x39 * (x14 * x43 * x80 + x40 * x8 * x82 + x40 * x81))
    result[5, 2] = numpy.sum(
        x39
        * (
            x32 * x84
            + x63 * (x1 * (x50 + x66) + x10 * (x0 * x83 - x49) + x35 * x71)
            + x8 * x84
        )
    )
    return result


def kinetic3d_22(ax, da, A, bx, db, B):
    """Cartesian 3D (dd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x20 * x5
    x22 = x15 * x2
    x23 = x15 * x5
    x24 = x10 * x23
    x25 = x22 + x24
    x26 = 4.0 * x12
    x27 = x22 * x9
    x28 = x10**2 * x15
    x29 = x22 + x28
    x30 = -x15
    x31 = x10 * x20 + x11 * (x1 * x29 + x30)
    x32 = x27 + x31
    x33 = 2.0 * x10 * x22 + x29 * x5
    x34 = x19 * x33 + x2 * (x16 * x26 + 2.0 * x17) + x32 * x5
    x35 = x2 * (3.0 * x22 + 2.0 * x24 + x28) + x33 * x5
    x36 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x37 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x38 = 3.14159265358979 * x3 * x37
    x39 = x36 * x38
    x40 = -x3 * (ax * A[1] + bx * B[1])
    x41 = -x40 - A[1]
    x42 = x41**2
    x43 = -x6 - x8 * (x2 + x42)
    x44 = x35 * x39
    x45 = -x3 * (ax * A[2] + bx * B[2])
    x46 = -x45 - A[2]
    x47 = x46**2
    x48 = -x6 - x8 * (x2 + x47)
    x49 = 0.179587122125167 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**3.5)
    x50 = 15.084944665313 * x49
    x51 = -x40 - B[1]
    x52 = x14 * x36
    x53 = x51 * x52
    x54 = x43 * x53
    x55 = x19 * x53 + x54
    x56 = x2 * (x16 + x23) + x25 * x5
    x57 = x14 * x37
    x58 = x23 * (x19 + x9)
    x59 = x19 * x25 + x21 + x27
    x60 = x39 * (x18 * (x0 * x56 - x16) + x2 * (x20 + x58) + x5 * x59)
    x61 = x39 * x56
    x62 = 26.1278905896872 * x49
    x63 = -x45 - B[2]
    x64 = x57 * x63
    x65 = x48 * x64
    x66 = x19 * x64 + x65
    x67 = x2 * x52
    x68 = x43 * x67
    x69 = x51**2 * x52
    x70 = x67 + x69
    x71 = -x52
    x72 = x11 * (x1 * x70 + x71) + x51 * x55
    x73 = x68 + x72
    x74 = x15 * x7 + x22
    x75 = x57 * x74
    x76 = x18 * (x0 * x74 + x30) + x27 + x5 * x58
    x77 = x39 * x63
    x78 = x2 * x57
    x79 = x48 * x78
    x80 = x57 * x63**2
    x81 = x78 + x80
    x82 = -x57
    x83 = x11 * (x1 * x81 + x82) + x63 * x66
    x84 = x79 + x83
    x85 = x52 * x74
    x86 = x41 * x52
    x87 = x86 * (x19 + x43)
    x88 = x34 * x39
    x89 = x33 * x39
    x90 = x41 * x55
    x91 = x51 * x86
    x92 = x67 + x91
    x93 = x19 * x92 + x68 + x90
    x94 = x25 * x57
    x95 = 45.2548339959391 * x49
    x96 = x41 * x70 + 2.0 * x51 * x67
    x97 = x19 * x96 + x2 * (x26 * x53 + 2.0 * x54) + x41 * x73
    x98 = x13 * x38
    x99 = x97 * x98
    x100 = x5 * x98
    x101 = 3.14159265358979 * x13 * x3 * x36
    x102 = x101 * x5
    x103 = x46 * x57
    x104 = x103 * (x19 + x48)
    x105 = x39 * x46
    x106 = x46 * x66
    x107 = x103 * x63
    x108 = x107 + x78
    x109 = x106 + x108 * x19 + x79
    x110 = x25 * x52
    x111 = x46 * x81 + 2.0 * x63 * x78
    x112 = x111 * x19 + x2 * (x26 * x64 + 2.0 * x65) + x46 * x84
    x113 = x101 * x112
    x114 = x42 * x52 + x67
    x115 = x114 * x57
    x116 = x18 * (x0 * x114 + x71) + x41 * x87 + x68
    x117 = x2 * (x53 + x86) + x41 * x92
    x118 = x98 * (x18 * (x0 * x117 - x53) + x2 * (x55 + x87) + x41 * x93)
    x119 = x10 * x98
    x120 = x2 * (3.0 * x67 + x69 + 2.0 * x91) + x41 * x96
    x121 = x120 * x98
    x122 = x9 * x98
    x123 = x114 * x15
    x124 = x101 * x41
    x125 = x15 * x92
    x126 = x47 * x57 + x78
    x127 = x126 * x52
    x128 = x104 * x46 + x18 * (x0 * x126 + x82) + x79
    x129 = x10 * x101
    x130 = x108 * x46 + x2 * (x103 + x64)
    x131 = x101 * (x109 * x46 + x18 * (x0 * x130 - x64) + x2 * (x104 + x66))
    x132 = x126 * x15
    x133 = x111 * x46 + x2 * (2.0 * x107 + 3.0 * x78 + x80)
    x134 = x101 * x133

    # 36 item(s)
    result[0, 0] = numpy.sum(
        x50
        * (
            x39
            * (
                x18 * (2.0 * ax * x35 - x29)
                + x2 * (2.0 * x21 + x25 * x26 + 3.0 * x27 + x31)
                + x34 * x5
            )
            + x43 * x44
            + x44 * x48
        )
    )
    result[0, 1] = numpy.sum(x62 * (x48 * x51 * x61 + x51 * x60 + x55 * x56 * x57))
    result[0, 2] = numpy.sum(x62 * (x43 * x61 * x63 + x52 * x56 * x66 + x60 * x63))
    result[0, 3] = numpy.sum(x50 * (x48 * x70 * x75 + x57 * x70 * x76 + x73 * x75))
    result[0, 4] = numpy.sum(x62 * (x51 * x76 * x77 + x53 * x66 * x74 + x55 * x64 * x74))
    result[0, 5] = numpy.sum(x50 * (x43 * x81 * x85 + x52 * x76 * x81 + x84 * x85))
    result[1, 0] = numpy.sum(x62 * (x33 * x57 * x87 + x41 * x48 * x89 + x41 * x88))
    result[1, 1] = numpy.sum(x95 * (x48 * x92 * x94 + x57 * x59 * x92 + x93 * x94))
    result[1, 2] = numpy.sum(x95 * (x25 * x64 * x87 + x25 * x66 * x86 + x41 * x59 * x77))
    result[1, 3] = numpy.sum(x62 * (x100 * x48 * x96 + x5 * x99 + x57 * x58 * x96))
    result[1, 4] = numpy.sum(x95 * (x100 * x63 * x93 + x23 * x66 * x92 + x58 * x64 * x92))
    result[1, 5] = numpy.sum(x62 * (x102 * x41 * x84 + x23 * x81 * x87 + x58 * x81 * x86))
    result[2, 0] = numpy.sum(x62 * (x104 * x33 * x52 + x43 * x46 * x89 + x46 * x88))
    result[2, 1] = numpy.sum(
        x95 * (x103 * x25 * x55 + x104 * x25 * x53 + x105 * x51 * x59)
    )
    result[2, 2] = numpy.sum(x95 * (x108 * x110 * x43 + x108 * x52 * x59 + x109 * x110))
    result[2, 3] = numpy.sum(
        x62 * (x100 * x46 * x73 + x103 * x58 * x70 + x104 * x23 * x70)
    )
    result[2, 4] = numpy.sum(
        x95 * (x102 * x109 * x51 + x108 * x23 * x55 + x108 * x53 * x58)
    )
    result[2, 5] = numpy.sum(x62 * (x102 * x111 * x43 + x111 * x52 * x58 + x113 * x5))
    result[3, 0] = numpy.sum(x50 * (x115 * x29 * x48 + x115 * x32 + x116 * x29 * x57))
    result[3, 1] = numpy.sum(x62 * (x10 * x118 + x117 * x119 * x48 + x117 * x20 * x57))
    result[3, 2] = numpy.sum(
        x62 * (x114 * x16 * x66 + x114 * x20 * x64 + x116 * x119 * x63)
    )
    result[3, 3] = numpy.sum(
        x50
        * (
            x121 * x48
            + x121 * x9
            + x98
            * (
                x18 * (2.0 * ax * x120 - x70)
                + x2 * (x26 * x92 + 3.0 * x68 + x72 + 2.0 * x90)
                + x41 * x97
            )
        )
    )
    result[3, 4] = numpy.sum(x62 * (x117 * x122 * x63 + x117 * x15 * x66 + x118 * x63))
    result[3, 5] = numpy.sum(x50 * (x116 * x15 * x81 + x123 * x81 * x9 + x123 * x84))
    result[4, 0] = numpy.sum(
        x62 * (x103 * x29 * x87 + x104 * x29 * x86 + x105 * x32 * x41)
    )
    result[4, 1] = numpy.sum(
        x95 * (x103 * x20 * x92 + x104 * x16 * x92 + x119 * x46 * x93)
    )
    result[4, 2] = numpy.sum(
        x95 * (x10 * x109 * x124 + x108 * x16 * x87 + x108 * x20 * x86)
    )
    result[4, 3] = numpy.sum(x62 * (x104 * x15 * x96 + x122 * x46 * x96 + x46 * x99))
    result[4, 4] = numpy.sum(x95 * (x108 * x125 * x9 + x108 * x15 * x93 + x109 * x125))
    result[4, 5] = numpy.sum(x62 * (x111 * x124 * x9 + x111 * x15 * x87 + x113 * x41))
    result[5, 0] = numpy.sum(x50 * (x127 * x29 * x43 + x127 * x32 + x128 * x29 * x52))
    result[5, 1] = numpy.sum(
        x62 * (x126 * x16 * x55 + x126 * x20 * x53 + x128 * x129 * x51)
    )
    result[5, 2] = numpy.sum(x62 * (x10 * x131 + x129 * x130 * x43 + x130 * x20 * x52))
    result[5, 3] = numpy.sum(x50 * (x128 * x15 * x70 + x132 * x70 * x9 + x132 * x73))
    result[5, 4] = numpy.sum(
        x62 * (x101 * x130 * x51 * x9 + x130 * x15 * x55 + x131 * x51)
    )
    result[5, 5] = numpy.sum(
        x50
        * (
            x101
            * (
                x112 * x46
                + x18 * (2.0 * ax * x133 - x81)
                + x2 * (2.0 * x106 + x108 * x26 + 3.0 * x79 + x83)
            )
            + x134 * x43
            + x134 * x9
        )
    )
    return result


def kinetic3d_23(ax, da, A, bx, db, B):
    """Cartesian 3D (df) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = ax * x3
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x2
    x16 = x15 * x9
    x17 = -x4 - B[0]
    x18 = x14 * x17
    x19 = x18 * x9
    x20 = bx * x3
    x21 = x0 * x20
    x22 = x18 * x21 + x19
    x23 = x17 * x22
    x24 = x14 * x17**2
    x25 = x15 + x24
    x26 = -x14
    x27 = x10 * (x1 * x25 + x26)
    x28 = x23 + x27
    x29 = x16 + x28
    x30 = x29 * x5
    x31 = 4.0 * x11
    x32 = x2 * (x18 * x31 + 2.0 * x19)
    x33 = x25 * x5
    x34 = x15 * x17
    x35 = 2.0 * x34
    x36 = x33 + x35
    x37 = 6.0 * x11
    x38 = x17 * x25
    x39 = x35 + x38
    x40 = x10 * (x1 * x39 - 2.0 * x18) + x17 * x29
    x41 = 3.0 * x16
    x42 = x32 + x40
    x43 = 3.0 * x15
    x44 = x2 * (3.0 * x24 + x43) + x39 * x5
    x45 = x2 * (3.0 * x23 + 3.0 * x27 + x41) + x21 * x44 + x42 * x5
    x46 = x2 * (3.0 * x33 + 8.0 * x34 + x38) + x44 * x5
    x47 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x48 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x49 = 3.14159265358979 * x3 * x48
    x50 = x47 * x49
    x51 = -x3 * (ax * A[1] + bx * B[1])
    x52 = -x51 - A[1]
    x53 = x52**2
    x54 = -x6 - x8 * (x2 + x53)
    x55 = x46 * x50
    x56 = -x3 * (ax * A[2] + bx * B[2])
    x57 = -x56 - A[2]
    x58 = x57**2
    x59 = -x6 - x8 * (x2 + x58)
    x60 = 0.179587122125167 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**4.5)
    x61 = 13.4923846833851 * x60
    x62 = -x51 - B[1]
    x63 = x13 * x47
    x64 = x62 * x63
    x65 = x54 * x64
    x66 = x21 * x64 + x65
    x67 = x14 * x5
    x68 = x17 * x67
    x69 = x2 * (x24 + x43 + 2.0 * x68) + x36 * x5
    x70 = x13 * x48
    x71 = x22 * x5
    x72 = x15 + x68
    x73 = x21 * x36 + x30 + x32
    x74 = x50 * (
        x2 * (x28 + x31 * x72 + x41 + 2.0 * x71) + x20 * (2.0 * ax * x69 - x25) + x5 * x73
    )
    x75 = x50 * x69
    x76 = 30.169889330626 * x60
    x77 = -x56 - B[2]
    x78 = x70 * x77
    x79 = x59 * x78
    x80 = x21 * x78 + x79
    x81 = x2 * x63
    x82 = x54 * x81
    x83 = x62 * x66
    x84 = x62**2 * x63
    x85 = x81 + x84
    x86 = -x63
    x87 = x10 * (x1 * x85 + x86)
    x88 = x83 + x87
    x89 = x82 + x88
    x90 = x2 * (x18 + x67) + x5 * x72
    x91 = x70 * x90
    x92 = x67 * (x21 + x9)
    x93 = x16 + x21 * x72 + x71
    x94 = x2 * (x22 + x92) + x20 * (x0 * x90 - x18) + x5 * x93
    x95 = x50 * x77
    x96 = 52.2557811793745 * x60
    x97 = x2 * x70
    x98 = x59 * x97
    x99 = x77 * x80
    x100 = x70 * x77**2
    x101 = x100 + x97
    x102 = -x70
    x103 = x10 * (x1 * x101 + x102)
    x104 = x103 + x99
    x105 = x104 + x98
    x106 = x63 * x90
    x107 = x14 * x7 + x15
    x108 = x16 + x20 * (x0 * x107 + x26) + x5 * x92
    x109 = x62 * x85
    x110 = x62 * x81
    x111 = 2.0 * x110
    x112 = x109 + x111
    x113 = x112 * x70
    x114 = x2 * (x31 * x64 + 2.0 * x65)
    x115 = x10 * (x1 * x112 - 2.0 * x64) + x62 * x89
    x116 = x114 + x115
    x117 = x101 * x77
    x118 = x77 * x97
    x119 = 2.0 * x118
    x120 = x117 + x119
    x121 = x120 * x63
    x122 = x2 * (x31 * x78 + 2.0 * x79)
    x123 = x10 * (x1 * x120 - 2.0 * x78) + x105 * x77
    x124 = x122 + x123
    x125 = x52 * x63
    x126 = x125 * (x21 + x54)
    x127 = x45 * x50
    x128 = x44 * x50
    x129 = 23.3694957868871 * x60
    x130 = x52 * x66
    x131 = x125 * x62
    x132 = x131 + x81
    x133 = x130 + x132 * x21 + x82
    x134 = x36 * x70
    x135 = x52 * x85
    x136 = x111 + x135
    x137 = x136 * x70
    x138 = x52 * x89
    x139 = x114 + x136 * x21 + x138
    x140 = 90.5096679918781 * x60
    x141 = 3.0 * x81
    x142 = x112 * x52 + x2 * (x141 + 3.0 * x84)
    x143 = 3.0 * x82
    x144 = x116 * x52 + x142 * x21 + x2 * (x143 + 3.0 * x83 + 3.0 * x87)
    x145 = x12 * x49
    x146 = x144 * x145
    x147 = x145 * x5
    x148 = 3.14159265358979 * x12 * x3 * x47
    x149 = x148 * x5
    x150 = x57 * x70
    x151 = x150 * (x21 + x59)
    x152 = x50 * x57
    x153 = x57 * x80
    x154 = x150 * x77
    x155 = x154 + x97
    x156 = x153 + x155 * x21 + x98
    x157 = x36 * x63
    x158 = x101 * x57
    x159 = x119 + x158
    x160 = x159 * x63
    x161 = x105 * x57
    x162 = x122 + x159 * x21 + x161
    x163 = 3.0 * x97
    x164 = x120 * x57 + x2 * (3.0 * x100 + x163)
    x165 = 3.0 * x98
    x166 = x124 * x57 + x164 * x21 + x2 * (3.0 * x103 + x165 + 3.0 * x99)
    x167 = x148 * x166
    x168 = x53 * x63 + x81
    x169 = x126 * x52 + x20 * (x0 * x168 + x86) + x82
    x170 = x39 * x70
    x171 = x132 * x52 + x2 * (x125 + x64)
    x172 = x171 * x70
    x173 = x133 * x52 + x2 * (x126 + x66) + x20 * (x0 * x171 - x64)
    x174 = x136 * x52 + x2 * (2.0 * x131 + x141 + x84)
    x175 = x145 * (
        x139 * x52
        + x2 * (2.0 * x130 + x132 * x31 + x143 + x88)
        + x20 * (2.0 * ax * x174 - x85)
    )
    x176 = x145 * x17
    x177 = x142 * x52 + x2 * (x109 + 8.0 * x110 + 3.0 * x135)
    x178 = x145 * x177
    x179 = x145 * x9
    x180 = x14 * x171
    x181 = x120 * x14
    x182 = x148 * x52
    x183 = x136 * x14
    x184 = x14 * x159
    x185 = x58 * x70 + x97
    x186 = x151 * x57 + x20 * (x0 * x185 + x102) + x98
    x187 = x39 * x63
    x188 = x155 * x57 + x2 * (x150 + x78)
    x189 = x188 * x63
    x190 = x156 * x57 + x2 * (x151 + x80) + x20 * (x0 * x188 - x78)
    x191 = x148 * x17
    x192 = x159 * x57 + x2 * (x100 + 2.0 * x154 + x163)
    x193 = x148 * (
        x162 * x57
        + x2 * (x104 + 2.0 * x153 + x155 * x31 + x165)
        + x20 * (2.0 * ax * x192 - x101)
    )
    x194 = x112 * x14
    x195 = x14 * x188
    x196 = x164 * x57 + x2 * (x117 + 8.0 * x118 + 3.0 * x158)
    x197 = x148 * x196

    # 60 item(s)
    result[0, 0] = numpy.sum(
        x61
        * (
            x50
            * (
                x2 * (3.0 * x30 + 4.0 * x32 + x36 * x37 + x40)
                + x20 * (2.0 * ax * x46 - x39)
                + x45 * x5
            )
            + x54 * x55
            + x55 * x59
        )
    )
    result[0, 1] = numpy.sum(x76 * (x59 * x62 * x75 + x62 * x74 + x66 * x69 * x70))
    result[0, 2] = numpy.sum(x76 * (x54 * x75 * x77 + x63 * x69 * x80 + x74 * x77))
    result[0, 3] = numpy.sum(x76 * (x59 * x85 * x91 + x70 * x85 * x94 + x89 * x91))
    result[0, 4] = numpy.sum(x96 * (x62 * x94 * x95 + x64 * x80 * x90 + x66 * x78 * x90))
    result[0, 5] = numpy.sum(x76 * (x101 * x106 * x54 + x101 * x63 * x94 + x105 * x106))
    result[0, 6] = numpy.sum(x61 * (x107 * x113 * x59 + x107 * x116 * x70 + x108 * x113))
    result[0, 7] = numpy.sum(
        x76 * (x107 * x78 * x89 + x107 * x80 * x85 + x108 * x78 * x85)
    )
    result[0, 8] = numpy.sum(
        x76 * (x101 * x107 * x66 + x101 * x108 * x64 + x105 * x107 * x64)
    )
    result[0, 9] = numpy.sum(x61 * (x107 * x121 * x54 + x107 * x124 * x63 + x108 * x121))
    result[1, 0] = numpy.sum(x129 * (x126 * x44 * x70 + x127 * x52 + x128 * x52 * x59))
    result[1, 1] = numpy.sum(x96 * (x132 * x134 * x59 + x132 * x70 * x73 + x133 * x134))
    result[1, 2] = numpy.sum(
        x96 * (x125 * x36 * x80 + x126 * x36 * x78 + x52 * x73 * x95)
    )
    result[1, 3] = numpy.sum(x96 * (x137 * x59 * x72 + x137 * x93 + x139 * x70 * x72))
    result[1, 4] = numpy.sum(
        x140 * (x132 * x72 * x80 + x132 * x78 * x93 + x133 * x72 * x78)
    )
    result[1, 5] = numpy.sum(
        x96 * (x101 * x125 * x93 + x101 * x126 * x72 + x105 * x125 * x72)
    )
    result[1, 6] = numpy.sum(x129 * (x142 * x147 * x59 + x142 * x70 * x92 + x146 * x5))
    result[1, 7] = numpy.sum(
        x96 * (x136 * x67 * x80 + x136 * x78 * x92 + x139 * x147 * x77)
    )
    result[1, 8] = numpy.sum(
        x96 * (x101 * x132 * x92 + x101 * x133 * x67 + x105 * x132 * x67)
    )
    result[1, 9] = numpy.sum(
        x129 * (x120 * x125 * x92 + x120 * x126 * x67 + x124 * x149 * x52)
    )
    result[2, 0] = numpy.sum(x129 * (x127 * x57 + x128 * x54 * x57 + x151 * x44 * x63))
    result[2, 1] = numpy.sum(
        x96 * (x150 * x36 * x66 + x151 * x36 * x64 + x152 * x62 * x73)
    )
    result[2, 2] = numpy.sum(x96 * (x155 * x157 * x54 + x155 * x63 * x73 + x156 * x157))
    result[2, 3] = numpy.sum(
        x96 * (x150 * x72 * x89 + x150 * x85 * x93 + x151 * x72 * x85)
    )
    result[2, 4] = numpy.sum(
        x140 * (x155 * x64 * x93 + x155 * x66 * x72 + x156 * x64 * x72)
    )
    result[2, 5] = numpy.sum(x96 * (x160 * x54 * x72 + x160 * x93 + x162 * x63 * x72))
    result[2, 6] = numpy.sum(
        x129 * (x112 * x150 * x92 + x112 * x151 * x67 + x116 * x147 * x57)
    )
    result[2, 7] = numpy.sum(
        x96 * (x155 * x67 * x89 + x155 * x85 * x92 + x156 * x67 * x85)
    )
    result[2, 8] = numpy.sum(
        x96 * (x149 * x162 * x62 + x159 * x64 * x92 + x159 * x66 * x67)
    )
    result[2, 9] = numpy.sum(x129 * (x149 * x164 * x54 + x164 * x63 * x92 + x167 * x5))
    result[3, 0] = numpy.sum(x61 * (x168 * x170 * x59 + x168 * x42 * x70 + x169 * x170))
    result[3, 1] = numpy.sum(x76 * (x172 * x25 * x59 + x172 * x29 + x173 * x25 * x70))
    result[3, 2] = numpy.sum(
        x76 * (x168 * x25 * x80 + x168 * x29 * x78 + x169 * x25 * x78)
    )
    result[3, 3] = numpy.sum(x76 * (x17 * x175 + x174 * x176 * x59 + x174 * x22 * x70))
    result[3, 4] = numpy.sum(
        x96 * (x171 * x18 * x80 + x171 * x22 * x78 + x173 * x176 * x77)
    )
    result[3, 5] = numpy.sum(
        x76 * (x101 * x168 * x22 + x101 * x169 * x18 + x105 * x168 * x18)
    )
    result[3, 6] = numpy.sum(
        x61
        * (
            x145
            * (
                x144 * x52
                + x2 * (4.0 * x114 + x115 + x136 * x37 + 3.0 * x138)
                + x20 * (2.0 * ax * x177 - x112)
            )
            + x178 * x59
            + x178 * x9
        )
    )
    result[3, 7] = numpy.sum(x76 * (x14 * x174 * x80 + x174 * x179 * x77 + x175 * x77))
    result[3, 8] = numpy.sum(x76 * (x101 * x14 * x173 + x101 * x180 * x9 + x105 * x180))
    result[3, 9] = numpy.sum(x61 * (x124 * x14 * x168 + x168 * x181 * x9 + x169 * x181))
    result[4, 0] = numpy.sum(
        x129 * (x125 * x151 * x39 + x126 * x150 * x39 + x152 * x42 * x52)
    )
    result[4, 1] = numpy.sum(
        x96 * (x132 * x150 * x29 + x132 * x151 * x25 + x133 * x150 * x25)
    )
    result[4, 2] = numpy.sum(
        x96 * (x125 * x155 * x29 + x125 * x156 * x25 + x126 * x155 * x25)
    )
    result[4, 3] = numpy.sum(
        x96 * (x136 * x150 * x22 + x136 * x151 * x18 + x139 * x176 * x57)
    )
    result[4, 4] = numpy.sum(
        x140 * (x132 * x155 * x22 + x132 * x156 * x18 + x133 * x155 * x18)
    )
    result[4, 5] = numpy.sum(
        x96 * (x125 * x159 * x22 + x126 * x159 * x18 + x162 * x17 * x182)
    )
    result[4, 6] = numpy.sum(x129 * (x14 * x142 * x151 + x142 * x179 * x57 + x146 * x57))
    result[4, 7] = numpy.sum(x96 * (x139 * x14 * x155 + x155 * x183 * x9 + x156 * x183))
    result[4, 8] = numpy.sum(x96 * (x132 * x14 * x162 + x132 * x184 * x9 + x133 * x184))
    result[4, 9] = numpy.sum(x129 * (x126 * x14 * x164 + x164 * x182 * x9 + x167 * x52))
    result[5, 0] = numpy.sum(x61 * (x185 * x187 * x54 + x185 * x42 * x63 + x186 * x187))
    result[5, 1] = numpy.sum(
        x76 * (x185 * x25 * x66 + x185 * x29 * x64 + x186 * x25 * x64)
    )
    result[5, 2] = numpy.sum(x76 * (x189 * x25 * x54 + x189 * x29 + x190 * x25 * x63))
    result[5, 3] = numpy.sum(
        x76 * (x18 * x185 * x89 + x18 * x186 * x85 + x185 * x22 * x85)
    )
    result[5, 4] = numpy.sum(
        x96 * (x18 * x188 * x66 + x188 * x22 * x64 + x190 * x191 * x62)
    )
    result[5, 5] = numpy.sum(x76 * (x17 * x193 + x191 * x192 * x54 + x192 * x22 * x63))
    result[5, 6] = numpy.sum(x61 * (x116 * x14 * x185 + x185 * x194 * x9 + x186 * x194))
    result[5, 7] = numpy.sum(x76 * (x14 * x190 * x85 + x195 * x85 * x9 + x195 * x89))
    result[5, 8] = numpy.sum(
        x76 * (x14 * x192 * x66 + x148 * x192 * x62 * x9 + x193 * x62)
    )
    result[5, 9] = numpy.sum(
        x61
        * (
            x148
            * (
                x166 * x57
                + x2 * (4.0 * x122 + x123 + x159 * x37 + 3.0 * x161)
                + x20 * (2.0 * ax * x196 - x120)
            )
            + x197 * x54
            + x197 * x9
        )
    )
    return result


def kinetic3d_24(ax, da, A, bx, db, B):
    """Cartesian 3D (dg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = 4.0 * x12
    x19 = x2 * (x16 * x18 + 2.0 * x17)
    x20 = x15 * x2
    x21 = x20 * x9
    x22 = bx * x3
    x23 = x0 * x22
    x24 = x16 * x23 + x17
    x25 = x10 * x24
    x26 = x10**2 * x15
    x27 = x20 + x26
    x28 = -x15
    x29 = x11 * (x1 * x27 + x28)
    x30 = x25 + x29
    x31 = x21 + x30
    x32 = x10 * x31
    x33 = x10 * x27
    x34 = x10 * x20
    x35 = 2.0 * x34
    x36 = x33 + x35
    x37 = x11 * (x1 * x36 - 2.0 * x16)
    x38 = x32 + x37
    x39 = x19 + x38
    x40 = x39 * x5
    x41 = 3.0 * x21
    x42 = x2 * (3.0 * x25 + 3.0 * x29 + x41)
    x43 = 3.0 * x20
    x44 = 3.0 * x26 + x43
    x45 = x2 * x44
    x46 = x36 * x5
    x47 = x45 + x46
    x48 = 8.0 * x12
    x49 = x10 * x36
    x50 = x45 + x49
    x51 = x10 * x39 + x11 * (2.0 * bx * x50 - x44)
    x52 = 4.0 * x19
    x53 = x42 + x51
    x54 = 8.0 * x34
    x55 = x2 * (4.0 * x33 + x54) + x5 * x50
    x56 = x2 * (4.0 * x32 + 4.0 * x37 + x52) + x23 * x55 + x5 * x53
    x57 = x2 * (5.0 * x45 + 4.0 * x46 + x49) + x5 * x55
    x58 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x59 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x60 = 3.14159265358979 * x3 * x59
    x61 = x58 * x60
    x62 = -x3 * (ax * A[1] + bx * B[1])
    x63 = -x62 - A[1]
    x64 = x63**2
    x65 = -x6 - x8 * (x2 + x64)
    x66 = x57 * x61
    x67 = -x3 * (ax * A[2] + bx * B[2])
    x68 = -x67 - A[2]
    x69 = x68**2
    x70 = -x6 - x8 * (x2 + x69)
    x71 = 0.179587122125167 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**5.5)
    x72 = 10.1992841329868 * x71
    x73 = -x62 - B[1]
    x74 = x14 * x58
    x75 = x73 * x74
    x76 = x65 * x75
    x77 = x23 * x75 + x76
    x78 = x27 * x5
    x79 = x2 * (x33 + x54 + 3.0 * x78) + x47 * x5
    x80 = x14 * x59
    x81 = x31 * x5
    x82 = x35 + x78
    x83 = 6.0 * x12
    x84 = x23 * x47 + x40 + x42
    x85 = x61 * (
        x2 * (x38 + x52 + 3.0 * x81 + x82 * x83) + x22 * (2.0 * ax * x79 - x36) + x5 * x84
    )
    x86 = x61 * x79
    x87 = 26.9847693667702 * x71
    x88 = -x67 - B[2]
    x89 = x80 * x88
    x90 = x70 * x89
    x91 = x23 * x89 + x90
    x92 = x2 * x74
    x93 = x65 * x92
    x94 = x73 * x77
    x95 = x73**2 * x74
    x96 = x92 + x95
    x97 = -x74
    x98 = x11 * (x1 * x96 + x97)
    x99 = x94 + x98
    x100 = x93 + x99
    x101 = x15 * x5
    x102 = x10 * x101
    x103 = x2 * (2.0 * x102 + x26 + x43) + x5 * x82
    x104 = x103 * x80
    x105 = x24 * x5
    x106 = x102 + x20
    x107 = x19 + x23 * x82 + x81
    x108 = (
        x107 * x5
        + x2 * (2.0 * x105 + x106 * x18 + x30 + x41)
        + x22 * (2.0 * ax * x103 - x27)
    )
    x109 = 34.8371874529163 * x71
    x110 = x61 * x88
    x111 = 60.3397786612521 * x71
    x112 = x2 * x80
    x113 = x112 * x70
    x114 = x88 * x91
    x115 = x80 * x88**2
    x116 = x112 + x115
    x117 = -x80
    x118 = x11 * (x1 * x116 + x117)
    x119 = x114 + x118
    x120 = x113 + x119
    x121 = x103 * x74
    x122 = x2 * (x18 * x75 + 2.0 * x76)
    x123 = x100 * x73
    x124 = x73 * x96
    x125 = x73 * x92
    x126 = 2.0 * x125
    x127 = x124 + x126
    x128 = x11 * (x1 * x127 - 2.0 * x75)
    x129 = x123 + x128
    x130 = x122 + x129
    x131 = x106 * x5 + x2 * (x101 + x16)
    x132 = x131 * x80
    x133 = x101 * (x23 + x9)
    x134 = x105 + x106 * x23 + x21
    x135 = x134 * x5 + x2 * (x133 + x24) + x22 * (x0 * x131 - x16)
    x136 = x2 * (x18 * x89 + 2.0 * x90)
    x137 = x120 * x88
    x138 = x116 * x88
    x139 = x112 * x88
    x140 = 2.0 * x139
    x141 = x138 + x140
    x142 = x11 * (x1 * x141 - 2.0 * x89)
    x143 = x137 + x142
    x144 = x136 + x143
    x145 = x131 * x74
    x146 = x15 * x7 + x20
    x147 = x133 * x5 + x21 + x22 * (x0 * x146 + x28)
    x148 = 3.0 * x92
    x149 = x148 + 3.0 * x95
    x150 = x149 * x2
    x151 = x127 * x73
    x152 = x150 + x151
    x153 = x152 * x80
    x154 = 3.0 * x93
    x155 = x2 * (x154 + 3.0 * x94 + 3.0 * x98)
    x156 = x11 * (2.0 * bx * x152 - x149) + x130 * x73
    x157 = x155 + x156
    x158 = 3.0 * x112
    x159 = 3.0 * x115 + x158
    x160 = x159 * x2
    x161 = x141 * x88
    x162 = x160 + x161
    x163 = x162 * x74
    x164 = 3.0 * x113
    x165 = x2 * (3.0 * x114 + 3.0 * x118 + x164)
    x166 = x11 * (2.0 * bx * x162 - x159) + x144 * x88
    x167 = x165 + x166
    x168 = x63 * x74
    x169 = x168 * (x23 + x65)
    x170 = x56 * x61
    x171 = x55 * x61
    x172 = 17.6656783191643 * x71
    x173 = x63 * x77
    x174 = x168 * x73
    x175 = x174 + x92
    x176 = x173 + x175 * x23 + x93
    x177 = x47 * x80
    x178 = 46.7389915737742 * x71
    x179 = x100 * x63
    x180 = x63 * x96
    x181 = x126 + x180
    x182 = x122 + x179 + x181 * x23
    x183 = x80 * x82
    x184 = 60.3397786612521 * x71
    x185 = 104.511562358749 * x71
    x186 = x127 * x63
    x187 = x150 + x186
    x188 = x187 * x80
    x189 = x130 * x63
    x190 = x155 + x187 * x23 + x189
    x191 = 8.0 * x125
    x192 = x152 * x63 + x2 * (4.0 * x124 + x191)
    x193 = 4.0 * x122
    x194 = x157 * x63 + x192 * x23 + x2 * (4.0 * x123 + 4.0 * x128 + x193)
    x195 = x13 * x60
    x196 = x194 * x195
    x197 = x195 * x5
    x198 = 3.14159265358979 * x13 * x3 * x58
    x199 = x198 * x5
    x200 = x68 * x80
    x201 = x200 * (x23 + x70)
    x202 = x61 * x68
    x203 = x68 * x91
    x204 = x200 * x88
    x205 = x112 + x204
    x206 = x113 + x203 + x205 * x23
    x207 = x47 * x74
    x208 = x120 * x68
    x209 = x116 * x68
    x210 = x140 + x209
    x211 = x136 + x208 + x210 * x23
    x212 = x74 * x82
    x213 = x141 * x68
    x214 = x160 + x213
    x215 = x214 * x74
    x216 = x144 * x68
    x217 = x165 + x214 * x23 + x216
    x218 = 8.0 * x139
    x219 = x162 * x68 + x2 * (4.0 * x138 + x218)
    x220 = 4.0 * x136
    x221 = x167 * x68 + x2 * (4.0 * x137 + 4.0 * x142 + x220) + x219 * x23
    x222 = x198 * x221
    x223 = x64 * x74 + x92
    x224 = x169 * x63 + x22 * (x0 * x223 + x97) + x93
    x225 = x50 * x80
    x226 = x175 * x63 + x2 * (x168 + x75)
    x227 = x226 * x80
    x228 = x176 * x63 + x2 * (x169 + x77) + x22 * (x0 * x226 - x75)
    x229 = x181 * x63 + x2 * (x148 + 2.0 * x174 + x95)
    x230 = x229 * x80
    x231 = (
        x182 * x63
        + x2 * (x154 + 2.0 * x173 + x175 * x18 + x99)
        + x22 * (2.0 * ax * x229 - x96)
    )
    x232 = x187 * x63 + x2 * (x124 + 3.0 * x180 + x191)
    x233 = x195 * (
        x190 * x63
        + x2 * (x129 + 3.0 * x179 + x181 * x83 + x193)
        + x22 * (2.0 * ax * x232 - x127)
    )
    x234 = x10 * x195
    x235 = x192 * x63 + x2 * (5.0 * x150 + x151 + 4.0 * x186)
    x236 = x195 * x235
    x237 = x195 * x9
    x238 = x15 * x229
    x239 = x15 * x226
    x240 = x15 * x162
    x241 = x198 * x63
    x242 = x15 * x187
    x243 = x15 * x181
    x244 = x15 * x214
    x245 = x112 + x69 * x80
    x246 = x113 + x201 * x68 + x22 * (x0 * x245 + x117)
    x247 = x50 * x74
    x248 = x2 * (x200 + x89) + x205 * x68
    x249 = x248 * x74
    x250 = x2 * (x201 + x91) + x206 * x68 + x22 * (x0 * x248 - x89)
    x251 = x2 * (x115 + x158 + 2.0 * x204) + x210 * x68
    x252 = x251 * x74
    x253 = (
        x2 * (x119 + x164 + x18 * x205 + 2.0 * x203)
        + x211 * x68
        + x22 * (2.0 * ax * x251 - x116)
    )
    x254 = x10 * x198
    x255 = x2 * (x138 + 3.0 * x209 + x218) + x214 * x68
    x256 = x198 * (
        x2 * (x143 + 3.0 * x208 + x210 * x83 + x220)
        + x217 * x68
        + x22 * (2.0 * ax * x255 - x141)
    )
    x257 = x15 * x152
    x258 = x15 * x248
    x259 = x15 * x251
    x260 = x2 * (5.0 * x160 + x161 + 4.0 * x213) + x219 * x68
    x261 = x198 * x260

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x72
        * (
            x61
            * (
                x2 * (4.0 * x40 + 5.0 * x42 + x47 * x48 + x51)
                + x22 * (2.0 * ax * x57 - x50)
                + x5 * x56
            )
            + x65 * x66
            + x66 * x70
        )
    )
    result[0, 1] = numpy.sum(x87 * (x70 * x73 * x86 + x73 * x85 + x77 * x79 * x80))
    result[0, 2] = numpy.sum(x87 * (x65 * x86 * x88 + x74 * x79 * x91 + x85 * x88))
    result[0, 3] = numpy.sum(x109 * (x100 * x104 + x104 * x70 * x96 + x108 * x80 * x96))
    result[0, 4] = numpy.sum(
        x111 * (x103 * x75 * x91 + x103 * x77 * x89 + x108 * x110 * x73)
    )
    result[0, 5] = numpy.sum(x109 * (x108 * x116 * x74 + x116 * x121 * x65 + x120 * x121))
    result[0, 6] = numpy.sum(x87 * (x127 * x132 * x70 + x127 * x135 * x80 + x130 * x132))
    result[0, 7] = numpy.sum(
        x111 * (x100 * x131 * x89 + x131 * x91 * x96 + x135 * x89 * x96)
    )
    result[0, 8] = numpy.sum(
        x111 * (x116 * x131 * x77 + x116 * x135 * x75 + x120 * x131 * x75)
    )
    result[0, 9] = numpy.sum(x87 * (x135 * x141 * x74 + x141 * x145 * x65 + x144 * x145))
    result[0, 10] = numpy.sum(x72 * (x146 * x153 * x70 + x146 * x157 * x80 + x147 * x153))
    result[0, 11] = numpy.sum(
        x87 * (x127 * x146 * x91 + x127 * x147 * x89 + x130 * x146 * x89)
    )
    result[0, 12] = numpy.sum(
        x109 * (x100 * x116 * x146 + x116 * x147 * x96 + x120 * x146 * x96)
    )
    result[0, 13] = numpy.sum(
        x87 * (x141 * x146 * x77 + x141 * x147 * x75 + x144 * x146 * x75)
    )
    result[0, 14] = numpy.sum(x72 * (x146 * x163 * x65 + x146 * x167 * x74 + x147 * x163))
    result[1, 0] = numpy.sum(x172 * (x169 * x55 * x80 + x170 * x63 + x171 * x63 * x70))
    result[1, 1] = numpy.sum(x178 * (x175 * x177 * x70 + x175 * x80 * x84 + x176 * x177))
    result[1, 2] = numpy.sum(
        x178 * (x110 * x63 * x84 + x168 * x47 * x91 + x169 * x47 * x89)
    )
    result[1, 3] = numpy.sum(x184 * (x107 * x181 * x80 + x181 * x183 * x70 + x182 * x183))
    result[1, 4] = numpy.sum(
        x185 * (x107 * x175 * x89 + x175 * x82 * x91 + x176 * x82 * x89)
    )
    result[1, 5] = numpy.sum(
        x184 * (x107 * x116 * x168 + x116 * x169 * x82 + x120 * x168 * x82)
    )
    result[1, 6] = numpy.sum(x178 * (x106 * x188 * x70 + x106 * x190 * x80 + x134 * x188))
    result[1, 7] = numpy.sum(
        x185 * (x106 * x181 * x91 + x106 * x182 * x89 + x134 * x181 * x89)
    )
    result[1, 8] = numpy.sum(
        x185 * (x106 * x116 * x176 + x106 * x120 * x175 + x116 * x134 * x175)
    )
    result[1, 9] = numpy.sum(
        x178 * (x106 * x141 * x169 + x106 * x144 * x168 + x134 * x141 * x168)
    )
    result[1, 10] = numpy.sum(x172 * (x133 * x192 * x80 + x192 * x197 * x70 + x196 * x5))
    result[1, 11] = numpy.sum(
        x178 * (x101 * x187 * x91 + x133 * x187 * x89 + x190 * x197 * x88)
    )
    result[1, 12] = numpy.sum(
        x184 * (x101 * x116 * x182 + x101 * x120 * x181 + x116 * x133 * x181)
    )
    result[1, 13] = numpy.sum(
        x178 * (x101 * x141 * x176 + x101 * x144 * x175 + x133 * x141 * x175)
    )
    result[1, 14] = numpy.sum(
        x172 * (x101 * x162 * x169 + x133 * x162 * x168 + x167 * x199 * x63)
    )
    result[2, 0] = numpy.sum(x172 * (x170 * x68 + x171 * x65 * x68 + x201 * x55 * x74))
    result[2, 1] = numpy.sum(
        x178 * (x200 * x47 * x77 + x201 * x47 * x75 + x202 * x73 * x84)
    )
    result[2, 2] = numpy.sum(x178 * (x205 * x207 * x65 + x205 * x74 * x84 + x206 * x207))
    result[2, 3] = numpy.sum(
        x184 * (x100 * x200 * x82 + x107 * x200 * x96 + x201 * x82 * x96)
    )
    result[2, 4] = numpy.sum(
        x185 * (x107 * x205 * x75 + x205 * x77 * x82 + x206 * x75 * x82)
    )
    result[2, 5] = numpy.sum(x184 * (x107 * x210 * x74 + x210 * x212 * x65 + x211 * x212))
    result[2, 6] = numpy.sum(
        x178 * (x106 * x127 * x201 + x106 * x130 * x200 + x127 * x134 * x200)
    )
    result[2, 7] = numpy.sum(
        x185 * (x100 * x106 * x205 + x106 * x206 * x96 + x134 * x205 * x96)
    )
    result[2, 8] = numpy.sum(
        x185 * (x106 * x210 * x77 + x106 * x211 * x75 + x134 * x210 * x75)
    )
    result[2, 9] = numpy.sum(x178 * (x106 * x215 * x65 + x106 * x217 * x74 + x134 * x215))
    result[2, 10] = numpy.sum(
        x172 * (x101 * x152 * x201 + x133 * x152 * x200 + x157 * x197 * x68)
    )
    result[2, 11] = numpy.sum(
        x178 * (x101 * x127 * x206 + x101 * x130 * x205 + x127 * x133 * x205)
    )
    result[2, 12] = numpy.sum(
        x184 * (x100 * x101 * x210 + x101 * x211 * x96 + x133 * x210 * x96)
    )
    result[2, 13] = numpy.sum(
        x178 * (x101 * x214 * x77 + x133 * x214 * x75 + x199 * x217 * x73)
    )
    result[2, 14] = numpy.sum(x172 * (x133 * x219 * x74 + x199 * x219 * x65 + x222 * x5))
    result[3, 0] = numpy.sum(x72 * (x223 * x225 * x70 + x223 * x53 * x80 + x224 * x225))
    result[3, 1] = numpy.sum(x87 * (x227 * x36 * x70 + x227 * x39 + x228 * x36 * x80))
    result[3, 2] = numpy.sum(
        x87 * (x223 * x36 * x91 + x223 * x39 * x89 + x224 * x36 * x89)
    )
    result[3, 3] = numpy.sum(x109 * (x230 * x27 * x70 + x230 * x31 + x231 * x27 * x80))
    result[3, 4] = numpy.sum(
        x111 * (x226 * x27 * x91 + x226 * x31 * x89 + x228 * x27 * x89)
    )
    result[3, 5] = numpy.sum(
        x109 * (x116 * x223 * x31 + x116 * x224 * x27 + x120 * x223 * x27)
    )
    result[3, 6] = numpy.sum(x87 * (x10 * x233 + x232 * x234 * x70 + x232 * x24 * x80))
    result[3, 7] = numpy.sum(
        x111 * (x16 * x229 * x91 + x229 * x24 * x89 + x231 * x234 * x88)
    )
    result[3, 8] = numpy.sum(
        x111 * (x116 * x16 * x228 + x116 * x226 * x24 + x120 * x16 * x226)
    )
    result[3, 9] = numpy.sum(
        x87 * (x141 * x16 * x224 + x141 * x223 * x24 + x144 * x16 * x223)
    )
    result[3, 10] = numpy.sum(
        x72
        * (
            x195
            * (
                x194 * x63
                + x2 * (5.0 * x155 + x156 + x187 * x48 + 4.0 * x189)
                + x22 * (2.0 * ax * x235 - x152)
            )
            + x236 * x70
            + x236 * x9
        )
    )
    result[3, 11] = numpy.sum(x87 * (x15 * x232 * x91 + x232 * x237 * x88 + x233 * x88))
    result[3, 12] = numpy.sum(x109 * (x116 * x15 * x231 + x116 * x238 * x9 + x120 * x238))
    result[3, 13] = numpy.sum(x87 * (x141 * x15 * x228 + x141 * x239 * x9 + x144 * x239))
    result[3, 14] = numpy.sum(x72 * (x15 * x167 * x223 + x223 * x240 * x9 + x224 * x240))
    result[4, 0] = numpy.sum(
        x172 * (x168 * x201 * x50 + x169 * x200 * x50 + x202 * x53 * x63)
    )
    result[4, 1] = numpy.sum(
        x178 * (x175 * x200 * x39 + x175 * x201 * x36 + x176 * x200 * x36)
    )
    result[4, 2] = numpy.sum(
        x178 * (x168 * x205 * x39 + x168 * x206 * x36 + x169 * x205 * x36)
    )
    result[4, 3] = numpy.sum(
        x184 * (x181 * x200 * x31 + x181 * x201 * x27 + x182 * x200 * x27)
    )
    result[4, 4] = numpy.sum(
        x185 * (x175 * x205 * x31 + x175 * x206 * x27 + x176 * x205 * x27)
    )
    result[4, 5] = numpy.sum(
        x184 * (x168 * x210 * x31 + x168 * x211 * x27 + x169 * x210 * x27)
    )
    result[4, 6] = numpy.sum(
        x178 * (x16 * x187 * x201 + x187 * x200 * x24 + x190 * x234 * x68)
    )
    result[4, 7] = numpy.sum(
        x185 * (x16 * x181 * x206 + x16 * x182 * x205 + x181 * x205 * x24)
    )
    result[4, 8] = numpy.sum(
        x185 * (x16 * x175 * x211 + x16 * x176 * x210 + x175 * x210 * x24)
    )
    result[4, 9] = numpy.sum(
        x178 * (x10 * x217 * x241 + x16 * x169 * x214 + x168 * x214 * x24)
    )
    result[4, 10] = numpy.sum(x172 * (x15 * x192 * x201 + x192 * x237 * x68 + x196 * x68))
    result[4, 11] = numpy.sum(x178 * (x15 * x190 * x205 + x205 * x242 * x9 + x206 * x242))
    result[4, 12] = numpy.sum(x184 * (x15 * x182 * x210 + x210 * x243 * x9 + x211 * x243))
    result[4, 13] = numpy.sum(x178 * (x15 * x175 * x217 + x175 * x244 * x9 + x176 * x244))
    result[4, 14] = numpy.sum(x172 * (x15 * x169 * x219 + x219 * x241 * x9 + x222 * x63))
    result[5, 0] = numpy.sum(x72 * (x245 * x247 * x65 + x245 * x53 * x74 + x246 * x247))
    result[5, 1] = numpy.sum(
        x87 * (x245 * x36 * x77 + x245 * x39 * x75 + x246 * x36 * x75)
    )
    result[5, 2] = numpy.sum(x87 * (x249 * x36 * x65 + x249 * x39 + x250 * x36 * x74))
    result[5, 3] = numpy.sum(
        x109 * (x100 * x245 * x27 + x245 * x31 * x96 + x246 * x27 * x96)
    )
    result[5, 4] = numpy.sum(
        x111 * (x248 * x27 * x77 + x248 * x31 * x75 + x250 * x27 * x75)
    )
    result[5, 5] = numpy.sum(x109 * (x252 * x27 * x65 + x252 * x31 + x253 * x27 * x74))
    result[5, 6] = numpy.sum(
        x87 * (x127 * x16 * x246 + x127 * x24 * x245 + x130 * x16 * x245)
    )
    result[5, 7] = numpy.sum(
        x111 * (x100 * x16 * x248 + x16 * x250 * x96 + x24 * x248 * x96)
    )
    result[5, 8] = numpy.sum(
        x111 * (x16 * x251 * x77 + x24 * x251 * x75 + x253 * x254 * x73)
    )
    result[5, 9] = numpy.sum(x87 * (x10 * x256 + x24 * x255 * x74 + x254 * x255 * x65))
    result[5, 10] = numpy.sum(x72 * (x15 * x157 * x245 + x245 * x257 * x9 + x246 * x257))
    result[5, 11] = numpy.sum(x87 * (x127 * x15 * x250 + x127 * x258 * x9 + x130 * x258))
    result[5, 12] = numpy.sum(x109 * (x100 * x259 + x15 * x253 * x96 + x259 * x9 * x96))
    result[5, 13] = numpy.sum(
        x87 * (x15 * x255 * x77 + x198 * x255 * x73 * x9 + x256 * x73)
    )
    result[5, 14] = numpy.sum(
        x72
        * (
            x198
            * (
                x2 * (5.0 * x165 + x166 + x214 * x48 + 4.0 * x216)
                + x22 * (2.0 * ax * x260 - x162)
                + x221 * x68
            )
            + x261 * x65
            + x261 * x9
        )
    )
    return result


def kinetic3d_30(ax, da, A, bx, db, B):
    """Cartesian 3D (fs) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = x3 * (ax * A[0] + bx * B[0]) - A[0]
    x5 = x4**2
    x6 = 2.0 * ax**2
    x7 = -x2 - x6 * (x1 + x5)
    x8 = bx * x3
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = 1.77245385090552 * numpy.sqrt(x3)
    x12 = x10 * x11
    x13 = x12 * x4
    x14 = x13 * x7
    x15 = 4.0 * x9
    x16 = x0 * x8
    x17 = x13 * x16 + x14
    x18 = x1 * x12
    x19 = x12 * x5 + x18
    x20 = x17 * x4 + x18 * x7 + x8 * (x0 * x19 - x12)
    x21 = x4 * (2.0 * x18 + x19)
    x22 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x23 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x24 = 3.14159265358979 * x23 * x3
    x25 = x22 * x24
    x26 = x3 * (ax * A[1] + bx * B[1]) - A[1]
    x27 = x26**2
    x28 = -x2 - x6 * (x1 + x27)
    x29 = x21 * x25
    x30 = x3 * (ax * A[2] + bx * B[2]) - A[2]
    x31 = x30**2
    x32 = -x2 - x6 * (x1 + x31)
    x33 = 0.179587122125167 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**1.5)
    x34 = 5.84237394672177 * x33
    x35 = x11 * x22
    x36 = x26 * x35
    x37 = x28 * x36
    x38 = x16 * x36 + x37
    x39 = x11 * x23
    x40 = x20 * x25
    x41 = x19 * x25
    x42 = 13.0639452948436 * x33
    x43 = x30 * x39
    x44 = x32 * x43
    x45 = x16 * x43 + x44
    x46 = x1 * x35
    x47 = x27 * x35 + x46
    x48 = x26 * x38 + x28 * x46 + x8 * (x0 * x47 - x35)
    x49 = x10 * x24
    x50 = x48 * x49
    x51 = x4 * x49
    x52 = 3.14159265358979 * x10 * x22 * x3
    x53 = x4 * x52
    x54 = x1 * x39
    x55 = x31 * x39 + x54
    x56 = x30 * x45 + x32 * x54 + x8 * (x0 * x55 - x39)
    x57 = x52 * x56
    x58 = x26 * (2.0 * x46 + x47)
    x59 = x49 * x58
    x60 = x30 * (2.0 * x54 + x55)
    x61 = x52 * x60

    # 10 item(s)
    result[0, 0] = numpy.sum(
        x34
        * (
            x25 * (x1 * (x13 * x15 + 2.0 * x14) + x20 * x4 + x8 * (x0 * x21 - 2.0 * x13))
            + x28 * x29
            + x29 * x32
        )
    )
    result[1, 0] = numpy.sum(x42 * (x19 * x38 * x39 + x26 * x32 * x41 + x26 * x40))
    result[2, 0] = numpy.sum(x42 * (x19 * x35 * x45 + x28 * x30 * x41 + x30 * x40))
    result[3, 0] = numpy.sum(x42 * (x17 * x39 * x47 + x32 * x47 * x51 + x4 * x50))
    result[4, 0] = numpy.sum(
        22.6274169979695
        * x33
        * (x17 * x25 * x26 * x30 + x26 * x45 * x53 + x30 * x38 * x51)
    )
    result[5, 0] = numpy.sum(x42 * (x17 * x35 * x55 + x28 * x53 * x55 + x4 * x57))
    result[6, 0] = numpy.sum(
        x34
        * (
            x32 * x59
            + x49
            * (x1 * (x15 * x36 + 2.0 * x37) + x26 * x48 + x8 * (x0 * x58 - 2.0 * x36))
            + x59 * x7
        )
    )
    result[7, 0] = numpy.sum(x42 * (x12 * x45 * x47 + x30 * x47 * x49 * x7 + x30 * x50))
    result[8, 0] = numpy.sum(x42 * (x12 * x38 * x55 + x26 * x52 * x55 * x7 + x26 * x57))
    result[9, 0] = numpy.sum(
        x34
        * (
            x28 * x61
            + x52
            * (x1 * (x15 * x43 + 2.0 * x44) + x30 * x56 + x8 * (x0 * x60 - 2.0 * x43))
            + x61 * x7
        )
    )
    return result


def kinetic3d_31(ax, da, A, bx, db, B):
    """Cartesian 3D (fp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = (ax + bx) ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = -ax
    x6 = x4**2
    x7 = 2.0 * ax**2
    x8 = -x5 - x7 * (x1 + x6)
    x9 = -x3 - B[0]
    x10 = bx * x2
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x2)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x0 * x10
    x17 = x15 * (x16 + x8)
    x18 = x17 * x4
    x19 = x1 * x14
    x20 = x14 * x4
    x21 = x20 * x9
    x22 = x19 + x21
    x23 = 4.0 * x11
    x24 = x19 * x8
    x25 = x20 * x8
    x26 = x16 * x20 + x25
    x27 = x14 * x6
    x28 = x19 + x27
    x29 = x10 * (x0 * x28 - x14) + x26 * x4
    x30 = x16 * x22 + x18 + x24
    x31 = x1 * (x15 + x20) + x22 * x4
    x32 = x1 * (x17 + x26) + x10 * (x0 * x31 - x15) + x30 * x4
    x33 = 2.0 * x21
    x34 = x1 * (3.0 * x19 + x27 + x33) + x31 * x4
    x35 = 2.0 * x19
    x36 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x37 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x38 = 3.14159265358979 * x2 * x37
    x39 = x36 * x38
    x40 = -x2 * (ax * A[1] + bx * B[1])
    x41 = -x40 - A[1]
    x42 = x41**2
    x43 = -x5 - x7 * (x1 + x42)
    x44 = x34 * x39
    x45 = -x2 * (ax * A[2] + bx * B[2])
    x46 = -x45 - A[2]
    x47 = x46**2
    x48 = -x5 - x7 * (x1 + x47)
    x49 = 0.179587122125167 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**2.5)
    x50 = 11.6847478934435 * x49
    x51 = -x40 - B[1]
    x52 = x13 * x36
    x53 = x51 * x52
    x54 = x53 * (x16 + x43)
    x55 = x4 * (x28 + x35)
    x56 = x13 * x37
    x57 = x24 + x29
    x58 = x39 * (x1 * (x20 * x23 + 2.0 * x25) + x10 * (x0 * x55 - 2.0 * x20) + x4 * x57)
    x59 = x39 * x55
    x60 = -x45 - B[2]
    x61 = x56 * x60
    x62 = x61 * (x16 + x48)
    x63 = x41 * x52
    x64 = x43 * x63
    x65 = x16 * x63 + x64
    x66 = x32 * x39
    x67 = x39 * x41
    x68 = 26.1278905896872 * x49
    x69 = x41 * x54
    x70 = x1 * x52
    x71 = x51 * x63
    x72 = x70 + x71
    x73 = x43 * x70
    x74 = x16 * x72 + x69 + x73
    x75 = x28 * x56
    x76 = x46 * x56
    x77 = x48 * x76
    x78 = x16 * x76 + x77
    x79 = x39 * x46
    x80 = x46 * x62
    x81 = x1 * x56
    x82 = x60 * x76
    x83 = x81 + x82
    x84 = x48 * x81
    x85 = x16 * x83 + x80 + x84
    x86 = x28 * x52
    x87 = x42 * x52
    x88 = x70 + x87
    x89 = x56 * x88
    x90 = x10 * (x0 * x88 - x52) + x41 * x65
    x91 = x73 + x90
    x92 = x1 * (x53 + x63) + x41 * x72
    x93 = x1 * (x54 + x65) + x10 * (x0 * x92 - x53) + x41 * x74
    x94 = x12 * x38
    x95 = x93 * x94
    x96 = x4 * x94
    x97 = 45.2548339959391 * x49
    x98 = 3.14159265358979 * x12 * x2 * x36
    x99 = x4 * x98
    x100 = x47 * x56
    x101 = x100 + x81
    x102 = x101 * x52
    x103 = x10 * (x0 * x101 - x56) + x46 * x78
    x104 = x103 + x84
    x105 = x1 * (x61 + x76) + x46 * x83
    x106 = x1 * (x62 + x78) + x10 * (x0 * x105 - x61) + x46 * x85
    x107 = x106 * x98
    x108 = 2.0 * x70
    x109 = x41 * (x108 + x88)
    x110 = x94 * (
        x1 * (x23 * x63 + 2.0 * x64) + x10 * (x0 * x109 - 2.0 * x63) + x41 * x91
    )
    x111 = x109 * x94
    x112 = 2.0 * x71
    x113 = x1 * (x112 + 3.0 * x70 + x87) + x41 * x92
    x114 = x113 * x94
    x115 = x46 * x94
    x116 = x14 * x88
    x117 = x41 * x98
    x118 = x101 * x14
    x119 = 2.0 * x81
    x120 = x46 * (x101 + x119)
    x121 = x98 * (
        x1 * (x23 * x76 + 2.0 * x77) + x10 * (x0 * x120 - 2.0 * x76) + x104 * x46
    )
    x122 = x120 * x98
    x123 = 2.0 * x82
    x124 = x1 * (x100 + x123 + 3.0 * x81) + x105 * x46
    x125 = x124 * x98

    # 30 item(s)
    result[0, 0] = numpy.sum(
        x50
        * (
            x39
            * (
                x1 * (2.0 * x18 + x22 * x23 + 3.0 * x24 + x29)
                - x10 * (-2.0 * ax * x34 + x33 + x35)
                + x32 * x4
            )
            + x43 * x44
            + x44 * x48
        )
    )
    result[0, 1] = numpy.sum(x50 * (x48 * x51 * x59 + x51 * x58 + x54 * x55 * x56))
    result[0, 2] = numpy.sum(x50 * (x43 * x59 * x60 + x52 * x55 * x62 + x58 * x60))
    result[1, 0] = numpy.sum(x68 * (x31 * x48 * x67 + x31 * x56 * x65 + x41 * x66))
    result[1, 1] = numpy.sum(x68 * (x48 * x72 * x75 + x56 * x57 * x72 + x74 * x75))
    result[1, 2] = numpy.sum(x68 * (x28 * x61 * x65 + x28 * x62 * x63 + x57 * x60 * x67))
    result[2, 0] = numpy.sum(x68 * (x31 * x43 * x79 + x31 * x52 * x78 + x46 * x66))
    result[2, 1] = numpy.sum(x68 * (x28 * x53 * x78 + x28 * x54 * x76 + x51 * x57 * x79))
    result[2, 2] = numpy.sum(x68 * (x43 * x83 * x86 + x52 * x57 * x83 + x85 * x86))
    result[3, 0] = numpy.sum(x68 * (x22 * x48 * x89 + x22 * x56 * x91 + x30 * x89))
    result[3, 1] = numpy.sum(x68 * (x26 * x56 * x92 + x4 * x95 + x48 * x92 * x96))
    result[3, 2] = numpy.sum(x68 * (x20 * x62 * x88 + x26 * x61 * x88 + x60 * x91 * x96))
    result[4, 0] = numpy.sum(x97 * (x22 * x63 * x78 + x22 * x65 * x76 + x30 * x46 * x67))
    result[4, 1] = numpy.sum(x97 * (x20 * x72 * x78 + x26 * x72 * x76 + x46 * x74 * x96))
    result[4, 2] = numpy.sum(x97 * (x20 * x65 * x83 + x26 * x63 * x83 + x41 * x85 * x99))
    result[5, 0] = numpy.sum(x68 * (x102 * x22 * x43 + x102 * x30 + x104 * x22 * x52))
    result[5, 1] = numpy.sum(
        x68 * (x101 * x20 * x54 + x101 * x26 * x53 + x104 * x51 * x99)
    )
    result[5, 2] = numpy.sum(x68 * (x105 * x26 * x52 + x105 * x43 * x99 + x107 * x4))
    result[6, 0] = numpy.sum(x50 * (x109 * x17 * x56 + x110 * x9 + x111 * x48 * x9))
    result[6, 1] = numpy.sum(
        x50
        * (
            x114 * x48
            + x114 * x8
            + x94
            * (
                x1 * (x23 * x72 + 2.0 * x69 + 3.0 * x73 + x90)
                - x10 * (-2.0 * ax * x113 + x108 + x112)
                + x41 * x93
            )
        )
    )
    result[6, 2] = numpy.sum(x50 * (x109 * x14 * x62 + x110 * x60 + x111 * x60 * x8))
    result[7, 0] = numpy.sum(x68 * (x115 * x9 * x91 + x15 * x78 * x88 + x17 * x76 * x88))
    result[7, 1] = numpy.sum(x68 * (x115 * x8 * x92 + x14 * x78 * x92 + x46 * x95))
    result[7, 2] = numpy.sum(x68 * (x116 * x8 * x83 + x116 * x85 + x14 * x83 * x91))
    result[8, 0] = numpy.sum(
        x68 * (x101 * x15 * x65 + x101 * x17 * x63 + x104 * x117 * x9)
    )
    result[8, 1] = numpy.sum(x68 * (x104 * x14 * x72 + x118 * x72 * x8 + x118 * x74))
    result[8, 2] = numpy.sum(x68 * (x105 * x117 * x8 + x105 * x14 * x65 + x107 * x41))
    result[9, 0] = numpy.sum(x50 * (x120 * x17 * x52 + x121 * x9 + x122 * x43 * x9))
    result[9, 1] = numpy.sum(x50 * (x120 * x14 * x54 + x121 * x51 + x122 * x51 * x8))
    result[9, 2] = numpy.sum(
        x50
        * (
            x125 * x43
            + x125 * x8
            + x98
            * (
                x1 * (x103 + x23 * x83 + 2.0 * x80 + 3.0 * x84)
                - x10 * (-2.0 * ax * x124 + x119 + x123)
                + x106 * x46
            )
        )
    )
    return result


def kinetic3d_32(ax, da, A, bx, db, B):
    """Cartesian 3D (fd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = x6**2
    x8 = 2.0 * ax**2
    x9 = -x3 - x8 * (x2 + x7)
    x10 = -x5 - B[0]
    x11 = ax * x4
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x4)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = 4.0 * x12
    x19 = x2 * (x16 * x18 + 2.0 * x17)
    x20 = bx * x4
    x21 = x0 * x20
    x22 = x16 * x21 + x17
    x23 = x15 * x6
    x24 = x23 * x9
    x25 = x21 * x23 + x24
    x26 = x2 * (x22 + x25)
    x27 = x22 * x6
    x28 = x15 * x2
    x29 = x10 * x23
    x30 = x28 + x29
    x31 = x28 * x9
    x32 = x21 * x30 + x27 + x31
    x33 = x32 * x6
    x34 = x10**2 * x15
    x35 = x28 + x34
    x36 = -x15
    x37 = x10 * x22 + x11 * (x1 * x35 + x36)
    x38 = x31 + x37
    x39 = x38 * x6
    x40 = x2 * (x16 + x23)
    x41 = x30 * x6
    x42 = x40 + x41
    x43 = x0 * x42 - x16
    x44 = x1 * x4
    x45 = x35 * x6
    x46 = 2.0 * x28
    x47 = x10 * x46 + x45
    x48 = x18 * x30 + 2.0 * x27 + 3.0 * x31
    x49 = x19 + x21 * x47 + x39
    x50 = 2.0 * x29
    x51 = 3.0 * x28 + x50
    x52 = x2 * (x34 + x51) + x47 * x6
    x53 = x2 * (x37 + x48) + x20 * (2.0 * ax * x52 - x35) + x49 * x6
    x54 = 4.0 * x10 * x28 + 2.0 * x45
    x55 = x2 * (2.0 * x40 + 2.0 * x41 + x54) + x52 * x6
    x56 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x57 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x58 = 3.14159265358979 * x4 * x57
    x59 = x56 * x58
    x60 = -x4 * (ax * A[1] + bx * B[1])
    x61 = -x60 - A[1]
    x62 = x61**2
    x63 = -x3 - x8 * (x2 + x62)
    x64 = x55 * x59
    x65 = -x4 * (ax * A[2] + bx * B[2])
    x66 = -x65 - A[2]
    x67 = x66**2
    x68 = -x3 - x8 * (x2 + x67)
    x69 = 0.179587122125167 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**3.5)
    x70 = 13.4923846833851 * x69
    x71 = -x60 - B[1]
    x72 = x14 * x56
    x73 = x71 * x72
    x74 = x63 * x73
    x75 = x21 * x73 + x74
    x76 = x15 * x7
    x77 = x2 * (x51 + x76) + x42 * x6
    x78 = x14 * x57
    x79 = x28 + x76
    x80 = x20 * (x0 * x79 + x36) + x25 * x6
    x81 = x20 * x43 + x26 + x33
    x82 = x59 * (x2 * (x48 + x80) - x20 * (-2.0 * ax * x77 + x46 + x50) + x6 * x81)
    x83 = x59 * x77
    x84 = 23.3694957868871 * x69
    x85 = -x65 - B[2]
    x86 = x78 * x85
    x87 = x68 * x86
    x88 = x21 * x86 + x87
    x89 = x2 * x72
    x90 = x63 * x89
    x91 = x71**2 * x72
    x92 = x89 + x91
    x93 = -x72
    x94 = x11 * (x1 * x92 + x93) + x71 * x75
    x95 = x90 + x94
    x96 = x6 * (x46 + x79)
    x97 = x78 * x96
    x98 = x31 + x80
    x99 = x2 * (x18 * x23 + 2.0 * x24) + x20 * (x0 * x96 - 2.0 * x23) + x6 * x98
    x100 = x59 * x85
    x101 = x2 * x78
    x102 = x101 * x68
    x103 = x78 * x85**2
    x104 = x101 + x103
    x105 = -x78
    x106 = x11 * (x1 * x104 + x105) + x85 * x88
    x107 = x102 + x106
    x108 = x72 * x96
    x109 = x61 * x72
    x110 = x109 * x63
    x111 = x109 * x21 + x110
    x112 = x53 * x59
    x113 = x52 * x59
    x114 = 30.169889330626 * x69
    x115 = x61 * x75
    x116 = x109 * x71
    x117 = x116 + x89
    x118 = x115 + x117 * x21 + x90
    x119 = x42 * x78
    x120 = 52.2557811793745 * x69
    x121 = x61 * x92
    x122 = 2.0 * x89
    x123 = x121 + x122 * x71
    x124 = x123 * x78
    x125 = x2 * (x18 * x73 + 2.0 * x74)
    x126 = x61 * x95
    x127 = x123 * x21 + x125 + x126
    x128 = x66 * x78
    x129 = x128 * x68
    x130 = x128 * x21 + x129
    x131 = x59 * x66
    x132 = x66 * x88
    x133 = x128 * x85
    x134 = x101 + x133
    x135 = x102 + x132 + x134 * x21
    x136 = x42 * x72
    x137 = x104 * x66
    x138 = 2.0 * x101
    x139 = x137 + x138 * x85
    x140 = x139 * x72
    x141 = x2 * (x18 * x86 + 2.0 * x87)
    x142 = x107 * x66
    x143 = x139 * x21 + x141 + x142
    x144 = x62 * x72
    x145 = x144 + x89
    x146 = x111 * x61 + x20 * (x0 * x145 + x93)
    x147 = x146 + x90
    x148 = x47 * x78
    x149 = x2 * (x109 + x73)
    x150 = x117 * x61
    x151 = x149 + x150
    x152 = x151 * x78
    x153 = x2 * (x111 + x75)
    x154 = x118 * x61
    x155 = x0 * x151 - x73
    x156 = x153 + x154 + x155 * x20
    x157 = 2.0 * x116
    x158 = x157 + 3.0 * x89
    x159 = x123 * x61 + x2 * (x158 + x91)
    x160 = 2.0 * x115 + x117 * x18 + 3.0 * x90
    x161 = x127 * x61 + x2 * (x160 + x94) + x20 * (2.0 * ax * x159 - x92)
    x162 = x13 * x58
    x163 = x161 * x162
    x164 = x162 * x6
    x165 = 90.5096679918781 * x69
    x166 = 3.14159265358979 * x13 * x4 * x56
    x167 = x166 * x6
    x168 = x67 * x78
    x169 = x101 + x168
    x170 = x130 * x66 + x20 * (x0 * x169 + x105)
    x171 = x102 + x170
    x172 = x47 * x72
    x173 = x2 * (x128 + x86)
    x174 = x134 * x66
    x175 = x173 + x174
    x176 = x175 * x72
    x177 = x2 * (x130 + x88)
    x178 = x135 * x66
    x179 = x0 * x175 - x86
    x180 = x177 + x178 + x179 * x20
    x181 = 2.0 * x133
    x182 = 3.0 * x101 + x181
    x183 = x139 * x66 + x2 * (x103 + x182)
    x184 = 3.0 * x102 + 2.0 * x132 + x134 * x18
    x185 = x143 * x66 + x2 * (x106 + x184) + x20 * (2.0 * ax * x183 - x104)
    x186 = x166 * x185
    x187 = x61 * (x122 + x145)
    x188 = x187 * x78
    x189 = x147 * x61 + x2 * (x109 * x18 + 2.0 * x110) + x20 * (x0 * x187 - 2.0 * x109)
    x190 = x151 * x61 + x2 * (x144 + x158)
    x191 = x162 * (
        x156 * x61 + x2 * (x146 + x160) - x20 * (-2.0 * ax * x190 + x122 + x157)
    )
    x192 = x10 * x162
    x193 = 2.0 * x121 + 4.0 * x71 * x89
    x194 = x159 * x61 + x2 * (2.0 * x149 + 2.0 * x150 + x193)
    x195 = x162 * x194
    x196 = x162 * x9
    x197 = x15 * x187
    x198 = x15 * x151
    x199 = x139 * x15
    x200 = x166 * x61
    x201 = x123 * x15
    x202 = x15 * x175
    x203 = x66 * (x138 + x169)
    x204 = x203 * x72
    x205 = x171 * x66 + x2 * (x128 * x18 + 2.0 * x129) + x20 * (x0 * x203 - 2.0 * x128)
    x206 = x10 * x166
    x207 = x175 * x66 + x2 * (x168 + x182)
    x208 = x166 * (
        x180 * x66 + x2 * (x170 + x184) - x20 * (-2.0 * ax * x207 + x138 + x181)
    )
    x209 = x15 * x203
    x210 = 4.0 * x101 * x85 + 2.0 * x137
    x211 = x183 * x66 + x2 * (2.0 * x173 + 2.0 * x174 + x210)
    x212 = x166 * x211

    # 60 item(s)
    result[0, 0] = numpy.sum(
        x70
        * (
            x59
            * (
                x2
                * (x18 * x47 + 2.0 * x19 + 2.0 * x26 + 2.0 * x33 + 2.0 * x39 + x43 * x44)
                + x20 * (2.0 * ax * x55 - x54)
                + x53 * x6
            )
            + x63 * x64
            + x64 * x68
        )
    )
    result[0, 1] = numpy.sum(x84 * (x68 * x71 * x83 + x71 * x82 + x75 * x77 * x78))
    result[0, 2] = numpy.sum(x84 * (x63 * x83 * x85 + x72 * x77 * x88 + x82 * x85))
    result[0, 3] = numpy.sum(x70 * (x68 * x92 * x97 + x78 * x92 * x99 + x95 * x97))
    result[0, 4] = numpy.sum(x84 * (x100 * x71 * x99 + x73 * x88 * x96 + x75 * x86 * x96))
    result[0, 5] = numpy.sum(x70 * (x104 * x108 * x63 + x104 * x72 * x99 + x107 * x108))
    result[1, 0] = numpy.sum(x114 * (x111 * x52 * x78 + x112 * x61 + x113 * x61 * x68))
    result[1, 1] = numpy.sum(x120 * (x117 * x119 * x68 + x117 * x78 * x81 + x118 * x119))
    result[1, 2] = numpy.sum(
        x120 * (x100 * x61 * x81 + x109 * x42 * x88 + x111 * x42 * x86)
    )
    result[1, 3] = numpy.sum(x114 * (x124 * x68 * x79 + x124 * x98 + x127 * x78 * x79))
    result[1, 4] = numpy.sum(
        x120 * (x117 * x79 * x88 + x117 * x86 * x98 + x118 * x79 * x86)
    )
    result[1, 5] = numpy.sum(
        x114 * (x104 * x109 * x98 + x104 * x111 * x79 + x107 * x109 * x79)
    )
    result[2, 0] = numpy.sum(x114 * (x112 * x66 + x113 * x63 * x66 + x130 * x52 * x72))
    result[2, 1] = numpy.sum(
        x120 * (x128 * x42 * x75 + x130 * x42 * x73 + x131 * x71 * x81)
    )
    result[2, 2] = numpy.sum(x120 * (x134 * x136 * x63 + x134 * x72 * x81 + x135 * x136))
    result[2, 3] = numpy.sum(
        x114 * (x128 * x79 * x95 + x128 * x92 * x98 + x130 * x79 * x92)
    )
    result[2, 4] = numpy.sum(
        x120 * (x134 * x73 * x98 + x134 * x75 * x79 + x135 * x73 * x79)
    )
    result[2, 5] = numpy.sum(x114 * (x140 * x63 * x79 + x140 * x98 + x143 * x72 * x79))
    result[3, 0] = numpy.sum(x114 * (x145 * x148 * x68 + x145 * x49 * x78 + x147 * x148))
    result[3, 1] = numpy.sum(x120 * (x152 * x30 * x68 + x152 * x32 + x156 * x30 * x78))
    result[3, 2] = numpy.sum(
        x120 * (x145 * x30 * x88 + x145 * x32 * x86 + x147 * x30 * x86)
    )
    result[3, 3] = numpy.sum(x114 * (x159 * x164 * x68 + x159 * x25 * x78 + x163 * x6))
    result[3, 4] = numpy.sum(
        x120 * (x151 * x23 * x88 + x151 * x25 * x86 + x156 * x164 * x85)
    )
    result[3, 5] = numpy.sum(
        x114 * (x104 * x145 * x25 + x104 * x147 * x23 + x107 * x145 * x23)
    )
    result[4, 0] = numpy.sum(
        x120 * (x109 * x130 * x47 + x111 * x128 * x47 + x131 * x49 * x61)
    )
    result[4, 1] = numpy.sum(
        x165 * (x117 * x128 * x32 + x117 * x130 * x30 + x118 * x128 * x30)
    )
    result[4, 2] = numpy.sum(
        x165 * (x109 * x134 * x32 + x109 * x135 * x30 + x111 * x134 * x30)
    )
    result[4, 3] = numpy.sum(
        x120 * (x123 * x128 * x25 + x123 * x130 * x23 + x127 * x164 * x66)
    )
    result[4, 4] = numpy.sum(
        x165 * (x117 * x134 * x25 + x117 * x135 * x23 + x118 * x134 * x23)
    )
    result[4, 5] = numpy.sum(
        x120 * (x109 * x139 * x25 + x111 * x139 * x23 + x143 * x167 * x61)
    )
    result[5, 0] = numpy.sum(x114 * (x169 * x172 * x63 + x169 * x49 * x72 + x171 * x172))
    result[5, 1] = numpy.sum(
        x120 * (x169 * x30 * x75 + x169 * x32 * x73 + x171 * x30 * x73)
    )
    result[5, 2] = numpy.sum(x120 * (x176 * x30 * x63 + x176 * x32 + x180 * x30 * x72))
    result[5, 3] = numpy.sum(
        x114 * (x169 * x23 * x95 + x169 * x25 * x92 + x171 * x23 * x92)
    )
    result[5, 4] = numpy.sum(
        x120 * (x167 * x180 * x71 + x175 * x23 * x75 + x175 * x25 * x73)
    )
    result[5, 5] = numpy.sum(x114 * (x167 * x183 * x63 + x183 * x25 * x72 + x186 * x6))
    result[6, 0] = numpy.sum(x70 * (x188 * x35 * x68 + x188 * x38 + x189 * x35 * x78))
    result[6, 1] = numpy.sum(x84 * (x10 * x191 + x190 * x192 * x68 + x190 * x22 * x78))
    result[6, 2] = numpy.sum(
        x84 * (x16 * x187 * x88 + x187 * x22 * x86 + x189 * x192 * x85)
    )
    result[6, 3] = numpy.sum(
        x70
        * (
            x162
            * (
                x161 * x61
                + x2
                * (
                    x123 * x18
                    + 2.0 * x125
                    + 2.0 * x126
                    + 2.0 * x153
                    + 2.0 * x154
                    + x155 * x44
                )
                + x20 * (2.0 * ax * x194 - x193)
            )
            + x195 * x68
            + x195 * x9
        )
    )
    result[6, 4] = numpy.sum(x84 * (x15 * x190 * x88 + x190 * x196 * x85 + x191 * x85))
    result[6, 5] = numpy.sum(x70 * (x104 * x15 * x189 + x104 * x197 * x9 + x107 * x197))
    result[7, 0] = numpy.sum(
        x114 * (x128 * x145 * x38 + x128 * x147 * x35 + x130 * x145 * x35)
    )
    result[7, 1] = numpy.sum(
        x120 * (x128 * x151 * x22 + x130 * x151 * x16 + x156 * x192 * x66)
    )
    result[7, 2] = numpy.sum(
        x120 * (x134 * x145 * x22 + x134 * x147 * x16 + x135 * x145 * x16)
    )
    result[7, 3] = numpy.sum(x114 * (x130 * x15 * x159 + x159 * x196 * x66 + x163 * x66))
    result[7, 4] = numpy.sum(x120 * (x134 * x15 * x156 + x134 * x198 * x9 + x135 * x198))
    result[7, 5] = numpy.sum(x114 * (x143 * x145 * x15 + x145 * x199 * x9 + x147 * x199))
    result[8, 0] = numpy.sum(
        x114 * (x109 * x169 * x38 + x109 * x171 * x35 + x111 * x169 * x35)
    )
    result[8, 1] = numpy.sum(
        x120 * (x117 * x16 * x171 + x117 * x169 * x22 + x118 * x16 * x169)
    )
    result[8, 2] = numpy.sum(
        x120 * (x10 * x180 * x200 + x109 * x175 * x22 + x111 * x16 * x175)
    )
    result[8, 3] = numpy.sum(x114 * (x127 * x15 * x169 + x169 * x201 * x9 + x171 * x201))
    result[8, 4] = numpy.sum(x120 * (x117 * x15 * x180 + x117 * x202 * x9 + x118 * x202))
    result[8, 5] = numpy.sum(x114 * (x111 * x15 * x183 + x183 * x200 * x9 + x186 * x61))
    result[9, 0] = numpy.sum(x70 * (x204 * x35 * x63 + x204 * x38 + x205 * x35 * x72))
    result[9, 1] = numpy.sum(
        x84 * (x16 * x203 * x75 + x203 * x22 * x73 + x205 * x206 * x71)
    )
    result[9, 2] = numpy.sum(x84 * (x10 * x208 + x206 * x207 * x63 + x207 * x22 * x72))
    result[9, 3] = numpy.sum(x70 * (x15 * x205 * x92 + x209 * x9 * x92 + x209 * x95))
    result[9, 4] = numpy.sum(
        x84 * (x15 * x207 * x75 + x166 * x207 * x71 * x9 + x208 * x71)
    )
    result[9, 5] = numpy.sum(
        x70
        * (
            x166
            * (
                x185 * x66
                + x2
                * (
                    x139 * x18
                    + 2.0 * x141
                    + 2.0 * x142
                    + 2.0 * x177
                    + 2.0 * x178
                    + x179 * x44
                )
                + x20 * (2.0 * ax * x211 - x210)
            )
            + x212 * x63
            + x212 * x9
        )
    )
    return result


def kinetic3d_33(ax, da, A, bx, db, B):
    """Cartesian 3D (ff) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = -x4 - A[0]
    x8 = x7**2
    x9 = 2.0 * ax**2
    x10 = -x6 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x5
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x20 * x5
    x22 = x15 * x5**2
    x23 = x15 * x2
    x24 = x22 + x23
    x25 = -x15
    x26 = x11 * (x1 * x24 + x25)
    x27 = x10 * x23
    x28 = 3.0 * x27
    x29 = x2 * (3.0 * x21 + 3.0 * x26 + x28)
    x30 = 4.0 * x12
    x31 = x2 * (x16 * x30 + 2.0 * x17)
    x32 = x21 + x26
    x33 = x27 + x32
    x34 = x24 * x5
    x35 = 2.0 * x23
    x36 = x35 * x5
    x37 = x34 + x36
    x38 = x11 * (x1 * x37 - 2.0 * x16) + x33 * x5
    x39 = x31 + x38
    x40 = x39 * x7
    x41 = x20 * x7
    x42 = x15 * x7
    x43 = x42 * x5
    x44 = x23 + x43
    x45 = x28 + x30 * x44 + 2.0 * x41
    x46 = x2 * (x32 + x45)
    x47 = x33 * x7
    x48 = x24 * x7
    x49 = x36 + x48
    x50 = x19 * x49 + x31 + x47
    x51 = x50 * x7
    x52 = 3.0 * x23
    x53 = 2.0 * x43
    x54 = x52 + x53
    x55 = x2 * (x22 + x54)
    x56 = x49 * x7
    x57 = x55 + x56
    x58 = x18 * (2.0 * ax * x57 - x24)
    x59 = x2 * (3.0 * x22 + x52)
    x60 = x37 * x7
    x61 = x59 + x60
    x62 = 6.0 * x12
    x63 = x19 * x61 + x29 + x40
    x64 = x23 * x5
    x65 = x2 * (x34 + 3.0 * x48 + 8.0 * x64) + x61 * x7
    x66 = (
        x18 * (2.0 * ax * x65 - x37)
        + x2 * (4.0 * x31 + x38 + 3.0 * x47 + x49 * x62)
        + x63 * x7
    )
    x67 = 2.0 * x59 + 2.0 * x60
    x68 = x2 * (3.0 * x55 + 3.0 * x56 + x67) + x65 * x7
    x69 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x70 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x71 = 3.14159265358979 * x3 * x70
    x72 = x69 * x71
    x73 = -x3 * (ax * A[1] + bx * B[1])
    x74 = -x73 - A[1]
    x75 = x74**2
    x76 = -x6 - x9 * (x2 + x75)
    x77 = x68 * x72
    x78 = -x3 * (ax * A[2] + bx * B[2])
    x79 = -x78 - A[2]
    x80 = x79**2
    x81 = -x6 - x9 * (x2 + x80)
    x82 = 0.179587122125167 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**4.5)
    x83 = 12.0679557322504 * x82
    x84 = -x73 - B[1]
    x85 = x14 * x69
    x86 = x84 * x85
    x87 = x76 * x86
    x88 = x19 * x86 + x87
    x89 = x2 * (x16 + x42)
    x90 = x44 * x7
    x91 = 2.0 * x48 + 4.0 * x64
    x92 = x2 * (2.0 * x89 + 2.0 * x90 + x91) + x57 * x7
    x93 = x14 * x70
    x94 = x10 * x42
    x95 = x19 * x42 + x94
    x96 = x2 * (x20 + x95)
    x97 = x19 * x44 + x27 + x41
    x98 = x7 * x97
    x99 = x89 + x90
    x100 = x0 * x99 - x16
    x101 = x1 * x3
    x102 = x46 + x51 + x58
    x103 = x72 * (
        x102 * x7
        + x18 * (2.0 * ax * x92 - x91)
        + x2 * (x100 * x101 + x30 * x49 + 2.0 * x31 + 2.0 * x47 + 2.0 * x96 + 2.0 * x98)
    )
    x104 = x72 * x92
    x105 = 26.9847693667702 * x82
    x106 = -x78 - B[2]
    x107 = x106 * x93
    x108 = x107 * x81
    x109 = x107 * x19 + x108
    x110 = x2 * x85
    x111 = x110 * x76
    x112 = x84 * x88
    x113 = x84**2 * x85
    x114 = x110 + x113
    x115 = -x85
    x116 = x11 * (x1 * x114 + x115)
    x117 = x112 + x116
    x118 = x111 + x117
    x119 = x15 * x8
    x120 = x2 * (x119 + x54) + x7 * x99
    x121 = x120 * x93
    x122 = x119 + x23
    x123 = x18 * (x0 * x122 + x25) + x7 * x95
    x124 = x100 * x18 + x96 + x98
    x125 = x124 * x7 - x18 * (-2.0 * ax * x120 + x35 + x53) + x2 * (x123 + x45)
    x126 = x106 * x72
    x127 = 46.7389915737742 * x82
    x128 = x2 * x93
    x129 = x128 * x81
    x130 = x106 * x109
    x131 = x106**2 * x93
    x132 = x128 + x131
    x133 = -x93
    x134 = x11 * (x1 * x132 + x133)
    x135 = x130 + x134
    x136 = x129 + x135
    x137 = x120 * x85
    x138 = x2 * (x30 * x86 + 2.0 * x87)
    x139 = x114 * x84
    x140 = 2.0 * x110
    x141 = x140 * x84
    x142 = x139 + x141
    x143 = x11 * (x1 * x142 - 2.0 * x86) + x118 * x84
    x144 = x138 + x143
    x145 = x7 * (x122 + x35)
    x146 = x145 * x93
    x147 = x123 + x27
    x148 = x147 * x7 + x18 * (x0 * x145 - 2.0 * x42) + x2 * (x30 * x42 + 2.0 * x94)
    x149 = x2 * (x107 * x30 + 2.0 * x108)
    x150 = x106 * x132
    x151 = 2.0 * x128
    x152 = x106 * x151
    x153 = x150 + x152
    x154 = x106 * x136 + x11 * (x1 * x153 - 2.0 * x107)
    x155 = x149 + x154
    x156 = x145 * x85
    x157 = x74 * x85
    x158 = x157 * x76
    x159 = x157 * x19 + x158
    x160 = x66 * x72
    x161 = x65 * x72
    x162 = x74 * x88
    x163 = x157 * x84
    x164 = x110 + x163
    x165 = x111 + x162 + x164 * x19
    x166 = x57 * x93
    x167 = 60.3397786612521 * x82
    x168 = x118 * x74
    x169 = x114 * x74
    x170 = x141 + x169
    x171 = x138 + x168 + x170 * x19
    x172 = x93 * x99
    x173 = 104.511562358749 * x82
    x174 = 3.0 * x110
    x175 = x2 * (3.0 * x113 + x174)
    x176 = x142 * x74
    x177 = x175 + x176
    x178 = x177 * x93
    x179 = 3.0 * x111
    x180 = x2 * (3.0 * x112 + 3.0 * x116 + x179)
    x181 = x144 * x74
    x182 = x177 * x19 + x180 + x181
    x183 = x79 * x93
    x184 = x183 * x81
    x185 = x183 * x19 + x184
    x186 = x72 * x79
    x187 = x109 * x79
    x188 = x106 * x183
    x189 = x128 + x188
    x190 = x129 + x187 + x189 * x19
    x191 = x57 * x85
    x192 = x136 * x79
    x193 = x132 * x79
    x194 = x152 + x193
    x195 = x149 + x19 * x194 + x192
    x196 = x85 * x99
    x197 = 3.0 * x128
    x198 = x2 * (3.0 * x131 + x197)
    x199 = x153 * x79
    x200 = x198 + x199
    x201 = x200 * x85
    x202 = 3.0 * x129
    x203 = x2 * (3.0 * x130 + 3.0 * x134 + x202)
    x204 = x155 * x79
    x205 = x19 * x200 + x203 + x204
    x206 = x75 * x85
    x207 = x110 + x206
    x208 = x159 * x74 + x18 * (x0 * x207 + x115)
    x209 = x111 + x208
    x210 = x61 * x93
    x211 = x2 * (x157 + x86)
    x212 = x164 * x74
    x213 = x211 + x212
    x214 = x213 * x93
    x215 = x2 * (x159 + x88)
    x216 = x165 * x74
    x217 = x0 * x213 - x86
    x218 = x18 * x217 + x215 + x216
    x219 = 2.0 * x163
    x220 = x174 + x219
    x221 = x2 * (x113 + x220)
    x222 = x170 * x74
    x223 = x221 + x222
    x224 = x223 * x93
    x225 = 2.0 * x162 + x164 * x30 + x179
    x226 = x2 * (x117 + x225)
    x227 = x171 * x74
    x228 = x18 * (2.0 * ax * x223 - x114)
    x229 = x226 + x227 + x228
    x230 = x110 * x84
    x231 = x177 * x74 + x2 * (x139 + 3.0 * x169 + 8.0 * x230)
    x232 = (
        x18 * (2.0 * ax * x231 - x142)
        + x182 * x74
        + x2 * (4.0 * x138 + x143 + 3.0 * x168 + x170 * x62)
    )
    x233 = x13 * x71
    x234 = x232 * x233
    x235 = x233 * x7
    x236 = 3.14159265358979 * x13 * x3 * x69
    x237 = x236 * x7
    x238 = x80 * x93
    x239 = x128 + x238
    x240 = x18 * (x0 * x239 + x133) + x185 * x79
    x241 = x129 + x240
    x242 = x61 * x85
    x243 = x2 * (x107 + x183)
    x244 = x189 * x79
    x245 = x243 + x244
    x246 = x245 * x85
    x247 = x2 * (x109 + x185)
    x248 = x190 * x79
    x249 = x0 * x245 - x107
    x250 = x18 * x249 + x247 + x248
    x251 = 2.0 * x188
    x252 = x197 + x251
    x253 = x2 * (x131 + x252)
    x254 = x194 * x79
    x255 = x253 + x254
    x256 = x255 * x85
    x257 = 2.0 * x187 + x189 * x30 + x202
    x258 = x2 * (x135 + x257)
    x259 = x195 * x79
    x260 = x18 * (2.0 * ax * x255 - x132)
    x261 = x258 + x259 + x260
    x262 = x106 * x128
    x263 = x2 * (x150 + 3.0 * x193 + 8.0 * x262) + x200 * x79
    x264 = (
        x18 * (2.0 * ax * x263 - x153)
        + x2 * (4.0 * x149 + x154 + 3.0 * x192 + x194 * x62)
        + x205 * x79
    )
    x265 = x236 * x264
    x266 = x74 * (x140 + x207)
    x267 = x266 * x93
    x268 = x18 * (x0 * x266 - 2.0 * x157) + x2 * (x157 * x30 + 2.0 * x158) + x209 * x74
    x269 = x2 * (x206 + x220) + x213 * x74
    x270 = x269 * x93
    x271 = -x18 * (-2.0 * ax * x269 + x140 + x219) + x2 * (x208 + x225) + x218 * x74
    x272 = 2.0 * x169 + 4.0 * x230
    x273 = x2 * (2.0 * x211 + 2.0 * x212 + x272) + x223 * x74
    x274 = x233 * (
        x18 * (2.0 * ax * x273 - x272)
        + x2
        * (x101 * x217 + 2.0 * x138 + 2.0 * x168 + x170 * x30 + 2.0 * x215 + 2.0 * x216)
        + x229 * x74
    )
    x275 = x233 * x5
    x276 = 2.0 * x175 + 2.0 * x176
    x277 = x2 * (3.0 * x221 + 3.0 * x222 + x276) + x231 * x74
    x278 = x233 * x277
    x279 = x10 * x233
    x280 = x15 * x269
    x281 = x15 * x266
    x282 = x15 * x223
    x283 = x15 * x213
    x284 = x15 * x200
    x285 = x236 * x74
    x286 = x15 * x177
    x287 = x15 * x245
    x288 = x15 * x255
    x289 = x79 * (x151 + x239)
    x290 = x289 * x85
    x291 = x18 * (x0 * x289 - 2.0 * x183) + x2 * (x183 * x30 + 2.0 * x184) + x241 * x79
    x292 = x2 * (x238 + x252) + x245 * x79
    x293 = x292 * x85
    x294 = -x18 * (-2.0 * ax * x292 + x151 + x251) + x2 * (x240 + x257) + x250 * x79
    x295 = x236 * x5
    x296 = 2.0 * x193 + 4.0 * x262
    x297 = x2 * (2.0 * x243 + 2.0 * x244 + x296) + x255 * x79
    x298 = x236 * (
        x18 * (2.0 * ax * x297 - x296)
        + x2
        * (x101 * x249 + 2.0 * x149 + 2.0 * x192 + x194 * x30 + 2.0 * x247 + 2.0 * x248)
        + x261 * x79
    )
    x299 = x15 * x289
    x300 = x15 * x292
    x301 = 2.0 * x198 + 2.0 * x199
    x302 = x2 * (3.0 * x253 + 3.0 * x254 + x301) + x263 * x79
    x303 = x236 * x302

    # 100 item(s)
    result[0, 0] = numpy.sum(
        x83
        * (
            x72
            * (
                x18 * (2.0 * ax * x68 - x67)
                + x2
                * (2.0 * x29 + x30 * x61 + 2.0 * x40 + 3.0 * x46 + 3.0 * x51 + 3.0 * x58)
                + x66 * x7
            )
            + x76 * x77
            + x77 * x81
        )
    )
    result[0, 1] = numpy.sum(x105 * (x103 * x84 + x104 * x81 * x84 + x88 * x92 * x93))
    result[0, 2] = numpy.sum(x105 * (x103 * x106 + x104 * x106 * x76 + x109 * x85 * x92))
    result[0, 3] = numpy.sum(x105 * (x114 * x121 * x81 + x114 * x125 * x93 + x118 * x121))
    result[0, 4] = numpy.sum(
        x127 * (x107 * x120 * x88 + x109 * x120 * x86 + x125 * x126 * x84)
    )
    result[0, 5] = numpy.sum(x105 * (x125 * x132 * x85 + x132 * x137 * x76 + x136 * x137))
    result[0, 6] = numpy.sum(x83 * (x142 * x146 * x81 + x142 * x148 * x93 + x144 * x146))
    result[0, 7] = numpy.sum(
        x105 * (x107 * x114 * x148 + x107 * x118 * x145 + x109 * x114 * x145)
    )
    result[0, 8] = numpy.sum(
        x105 * (x132 * x145 * x88 + x132 * x148 * x86 + x136 * x145 * x86)
    )
    result[0, 9] = numpy.sum(x83 * (x148 * x153 * x85 + x153 * x156 * x76 + x155 * x156))
    result[1, 0] = numpy.sum(x105 * (x159 * x65 * x93 + x160 * x74 + x161 * x74 * x81))
    result[1, 1] = numpy.sum(x167 * (x102 * x164 * x93 + x164 * x166 * x81 + x165 * x166))
    result[1, 2] = numpy.sum(
        x167 * (x102 * x126 * x74 + x107 * x159 * x57 + x109 * x157 * x57)
    )
    result[1, 3] = numpy.sum(x167 * (x124 * x170 * x93 + x170 * x172 * x81 + x171 * x172))
    result[1, 4] = numpy.sum(
        x173 * (x107 * x124 * x164 + x107 * x165 * x99 + x109 * x164 * x99)
    )
    result[1, 5] = numpy.sum(
        x167 * (x124 * x132 * x157 + x132 * x159 * x99 + x136 * x157 * x99)
    )
    result[1, 6] = numpy.sum(x105 * (x122 * x178 * x81 + x122 * x182 * x93 + x147 * x178))
    result[1, 7] = numpy.sum(
        x167 * (x107 * x122 * x171 + x107 * x147 * x170 + x109 * x122 * x170)
    )
    result[1, 8] = numpy.sum(
        x167 * (x122 * x132 * x165 + x122 * x136 * x164 + x132 * x147 * x164)
    )
    result[1, 9] = numpy.sum(
        x105 * (x122 * x153 * x159 + x122 * x155 * x157 + x147 * x153 * x157)
    )
    result[2, 0] = numpy.sum(x105 * (x160 * x79 + x161 * x76 * x79 + x185 * x65 * x85))
    result[2, 1] = numpy.sum(
        x167 * (x102 * x186 * x84 + x183 * x57 * x88 + x185 * x57 * x86)
    )
    result[2, 2] = numpy.sum(x167 * (x102 * x189 * x85 + x189 * x191 * x76 + x190 * x191))
    result[2, 3] = numpy.sum(
        x167 * (x114 * x124 * x183 + x114 * x185 * x99 + x118 * x183 * x99)
    )
    result[2, 4] = numpy.sum(
        x173 * (x124 * x189 * x86 + x189 * x88 * x99 + x190 * x86 * x99)
    )
    result[2, 5] = numpy.sum(x167 * (x124 * x194 * x85 + x194 * x196 * x76 + x195 * x196))
    result[2, 6] = numpy.sum(
        x105 * (x122 * x142 * x185 + x122 * x144 * x183 + x142 * x147 * x183)
    )
    result[2, 7] = numpy.sum(
        x167 * (x114 * x122 * x190 + x114 * x147 * x189 + x118 * x122 * x189)
    )
    result[2, 8] = numpy.sum(
        x167 * (x122 * x194 * x88 + x122 * x195 * x86 + x147 * x194 * x86)
    )
    result[2, 9] = numpy.sum(x105 * (x122 * x201 * x76 + x122 * x205 * x85 + x147 * x201))
    result[3, 0] = numpy.sum(x105 * (x207 * x210 * x81 + x207 * x63 * x93 + x209 * x210))
    result[3, 1] = numpy.sum(x167 * (x214 * x49 * x81 + x214 * x50 + x218 * x49 * x93))
    result[3, 2] = numpy.sum(
        x167 * (x107 * x207 * x50 + x107 * x209 * x49 + x109 * x207 * x49)
    )
    result[3, 3] = numpy.sum(x167 * (x224 * x44 * x81 + x224 * x97 + x229 * x44 * x93))
    result[3, 4] = numpy.sum(
        x173 * (x107 * x213 * x97 + x107 * x218 * x44 + x109 * x213 * x44)
    )
    result[3, 5] = numpy.sum(
        x167 * (x132 * x207 * x97 + x132 * x209 * x44 + x136 * x207 * x44)
    )
    result[3, 6] = numpy.sum(x105 * (x231 * x235 * x81 + x231 * x93 * x95 + x234 * x7))
    result[3, 7] = numpy.sum(
        x167 * (x106 * x229 * x235 + x107 * x223 * x95 + x109 * x223 * x42)
    )
    result[3, 8] = numpy.sum(
        x167 * (x132 * x213 * x95 + x132 * x218 * x42 + x136 * x213 * x42)
    )
    result[3, 9] = numpy.sum(
        x105 * (x153 * x207 * x95 + x153 * x209 * x42 + x155 * x207 * x42)
    )
    result[4, 0] = numpy.sum(
        x127 * (x157 * x185 * x61 + x159 * x183 * x61 + x186 * x63 * x74)
    )
    result[4, 1] = numpy.sum(
        x173 * (x164 * x183 * x50 + x164 * x185 * x49 + x165 * x183 * x49)
    )
    result[4, 2] = numpy.sum(
        x173 * (x157 * x189 * x50 + x157 * x190 * x49 + x159 * x189 * x49)
    )
    result[4, 3] = numpy.sum(
        x173 * (x170 * x183 * x97 + x170 * x185 * x44 + x171 * x183 * x44)
    )
    result[4, 4] = numpy.sum(
        181.019335983756
        * x82
        * (x164 * x189 * x97 + x164 * x190 * x44 + x165 * x189 * x44)
    )
    result[4, 5] = numpy.sum(
        x173 * (x157 * x194 * x97 + x157 * x195 * x44 + x159 * x194 * x44)
    )
    result[4, 6] = numpy.sum(
        x127 * (x177 * x183 * x95 + x177 * x185 * x42 + x182 * x235 * x79)
    )
    result[4, 7] = numpy.sum(
        x173 * (x170 * x189 * x95 + x170 * x190 * x42 + x171 * x189 * x42)
    )
    result[4, 8] = numpy.sum(
        x173 * (x164 * x194 * x95 + x164 * x195 * x42 + x165 * x194 * x42)
    )
    result[4, 9] = numpy.sum(
        x127 * (x157 * x200 * x95 + x159 * x200 * x42 + x205 * x237 * x74)
    )
    result[5, 0] = numpy.sum(x105 * (x239 * x242 * x76 + x239 * x63 * x85 + x241 * x242))
    result[5, 1] = numpy.sum(
        x167 * (x239 * x49 * x88 + x239 * x50 * x86 + x241 * x49 * x86)
    )
    result[5, 2] = numpy.sum(x167 * (x246 * x49 * x76 + x246 * x50 + x250 * x49 * x85))
    result[5, 3] = numpy.sum(
        x167 * (x114 * x239 * x97 + x114 * x241 * x44 + x118 * x239 * x44)
    )
    result[5, 4] = numpy.sum(
        x173 * (x245 * x44 * x88 + x245 * x86 * x97 + x250 * x44 * x86)
    )
    result[5, 5] = numpy.sum(x167 * (x256 * x44 * x76 + x256 * x97 + x261 * x44 * x85))
    result[5, 6] = numpy.sum(
        x105 * (x142 * x239 * x95 + x142 * x241 * x42 + x144 * x239 * x42)
    )
    result[5, 7] = numpy.sum(
        x167 * (x114 * x245 * x95 + x114 * x250 * x42 + x118 * x245 * x42)
    )
    result[5, 8] = numpy.sum(
        x167 * (x237 * x261 * x84 + x255 * x42 * x88 + x255 * x86 * x95)
    )
    result[5, 9] = numpy.sum(x105 * (x237 * x263 * x76 + x263 * x85 * x95 + x265 * x7))
    result[6, 0] = numpy.sum(x83 * (x267 * x37 * x81 + x267 * x39 + x268 * x37 * x93))
    result[6, 1] = numpy.sum(x105 * (x24 * x270 * x81 + x24 * x271 * x93 + x270 * x33))
    result[6, 2] = numpy.sum(
        x105 * (x107 * x24 * x268 + x107 * x266 * x33 + x109 * x24 * x266)
    )
    result[6, 3] = numpy.sum(x105 * (x20 * x273 * x93 + x273 * x275 * x81 + x274 * x5))
    result[6, 4] = numpy.sum(
        x127 * (x106 * x271 * x275 + x107 * x20 * x269 + x109 * x16 * x269)
    )
    result[6, 5] = numpy.sum(
        x105 * (x132 * x16 * x268 + x132 * x20 * x266 + x136 * x16 * x266)
    )
    result[6, 6] = numpy.sum(
        x83
        * (
            x10 * x278
            + x233
            * (
                x18 * (2.0 * ax * x277 - x276)
                + x2
                * (
                    x177 * x30
                    + 2.0 * x180
                    + 2.0 * x181
                    + 3.0 * x226
                    + 3.0 * x227
                    + 3.0 * x228
                )
                + x232 * x74
            )
            + x278 * x81
        )
    )
    result[6, 7] = numpy.sum(
        x105 * (x106 * x273 * x279 + x106 * x274 + x109 * x15 * x273)
    )
    result[6, 8] = numpy.sum(x105 * (x10 * x132 * x280 + x132 * x15 * x271 + x136 * x280))
    result[6, 9] = numpy.sum(x83 * (x10 * x153 * x281 + x15 * x153 * x268 + x155 * x281))
    result[7, 0] = numpy.sum(
        x105 * (x183 * x207 * x39 + x183 * x209 * x37 + x185 * x207 * x37)
    )
    result[7, 1] = numpy.sum(
        x167 * (x183 * x213 * x33 + x183 * x218 * x24 + x185 * x213 * x24)
    )
    result[7, 2] = numpy.sum(
        x167 * (x189 * x207 * x33 + x189 * x209 * x24 + x190 * x207 * x24)
    )
    result[7, 3] = numpy.sum(
        x167 * (x16 * x185 * x223 + x183 * x20 * x223 + x229 * x275 * x79)
    )
    result[7, 4] = numpy.sum(
        x173 * (x16 * x189 * x218 + x16 * x190 * x213 + x189 * x20 * x213)
    )
    result[7, 5] = numpy.sum(
        x167 * (x16 * x194 * x209 + x16 * x195 * x207 + x194 * x20 * x207)
    )
    result[7, 6] = numpy.sum(x105 * (x15 * x185 * x231 + x231 * x279 * x79 + x234 * x79))
    result[7, 7] = numpy.sum(x167 * (x10 * x189 * x282 + x15 * x189 * x229 + x190 * x282))
    result[7, 8] = numpy.sum(x167 * (x10 * x194 * x283 + x15 * x194 * x218 + x195 * x283))
    result[7, 9] = numpy.sum(x105 * (x10 * x207 * x284 + x15 * x205 * x207 + x209 * x284))
    result[8, 0] = numpy.sum(
        x105 * (x157 * x239 * x39 + x157 * x241 * x37 + x159 * x239 * x37)
    )
    result[8, 1] = numpy.sum(
        x167 * (x164 * x239 * x33 + x164 * x24 * x241 + x165 * x239 * x24)
    )
    result[8, 2] = numpy.sum(
        x167 * (x157 * x24 * x250 + x157 * x245 * x33 + x159 * x24 * x245)
    )
    result[8, 3] = numpy.sum(
        x167 * (x16 * x170 * x241 + x16 * x171 * x239 + x170 * x20 * x239)
    )
    result[8, 4] = numpy.sum(
        x173 * (x16 * x164 * x250 + x16 * x165 * x245 + x164 * x20 * x245)
    )
    result[8, 5] = numpy.sum(
        x167 * (x157 * x20 * x255 + x159 * x16 * x255 + x261 * x285 * x5)
    )
    result[8, 6] = numpy.sum(x105 * (x10 * x239 * x286 + x15 * x182 * x239 + x241 * x286))
    result[8, 7] = numpy.sum(x167 * (x10 * x170 * x287 + x15 * x170 * x250 + x171 * x287))
    result[8, 8] = numpy.sum(x167 * (x10 * x164 * x288 + x15 * x164 * x261 + x165 * x288))
    result[8, 9] = numpy.sum(x105 * (x10 * x263 * x285 + x15 * x159 * x263 + x265 * x74))
    result[9, 0] = numpy.sum(x83 * (x290 * x37 * x76 + x290 * x39 + x291 * x37 * x85))
    result[9, 1] = numpy.sum(
        x105 * (x24 * x289 * x88 + x24 * x291 * x86 + x289 * x33 * x86)
    )
    result[9, 2] = numpy.sum(x105 * (x24 * x293 * x76 + x24 * x294 * x85 + x293 * x33))
    result[9, 3] = numpy.sum(
        x105 * (x114 * x16 * x291 + x114 * x20 * x289 + x118 * x16 * x289)
    )
    result[9, 4] = numpy.sum(
        x127 * (x16 * x292 * x88 + x20 * x292 * x86 + x294 * x295 * x84)
    )
    result[9, 5] = numpy.sum(x105 * (x20 * x297 * x85 + x295 * x297 * x76 + x298 * x5))
    result[9, 6] = numpy.sum(x83 * (x10 * x142 * x299 + x142 * x15 * x291 + x144 * x299))
    result[9, 7] = numpy.sum(x105 * (x10 * x114 * x300 + x114 * x15 * x294 + x118 * x300))
    result[9, 8] = numpy.sum(
        x105 * (x10 * x236 * x297 * x84 + x15 * x297 * x88 + x298 * x84)
    )
    result[9, 9] = numpy.sum(
        x83
        * (
            x10 * x303
            + x236
            * (
                x18 * (2.0 * ax * x302 - x301)
                + x2
                * (
                    x200 * x30
                    + 2.0 * x203
                    + 2.0 * x204
                    + 3.0 * x258
                    + 3.0 * x259
                    + 3.0 * x260
                )
                + x264 * x79
            )
            + x303 * x76
        )
    )
    return result


def kinetic3d_34(ax, da, A, bx, db, B):
    """Cartesian 3D (fg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = x6**2
    x8 = 2.0 * ax**2
    x9 = -x3 - x8 * (x2 + x7)
    x10 = -x5 - B[0]
    x11 = ax * x4
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x4)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = 4.0 * x12
    x19 = x2 * (x16 * x18 + 2.0 * x17)
    x20 = 4.0 * x19
    x21 = x15 * x2
    x22 = x21 * x9
    x23 = bx * x4
    x24 = x0 * x23
    x25 = x16 * x24 + x17
    x26 = x10 * x25
    x27 = x10**2 * x15
    x28 = x21 + x27
    x29 = -x15
    x30 = x11 * (x1 * x28 + x29)
    x31 = x26 + x30
    x32 = x22 + x31
    x33 = x10 * x32
    x34 = x10 * x28
    x35 = 2.0 * x21
    x36 = x10 * x35
    x37 = x34 + x36
    x38 = x11 * (x1 * x37 - 2.0 * x16)
    x39 = x2 * (x20 + 4.0 * x33 + 4.0 * x38)
    x40 = 3.0 * x22
    x41 = x2 * (3.0 * x26 + 3.0 * x30 + x40)
    x42 = x33 + x38
    x43 = x19 + x42
    x44 = 3.0 * x21
    x45 = 3.0 * x27 + x44
    x46 = x2 * x45
    x47 = x10 * x37
    x48 = x46 + x47
    x49 = x10 * x43 + x11 * (2.0 * bx * x48 - x45)
    x50 = x41 + x49
    x51 = x50 * x6
    x52 = x32 * x6
    x53 = x28 * x6
    x54 = x36 + x53
    x55 = x12 * x54
    x56 = x2 * (x20 + x42 + 3.0 * x52 + 6.0 * x55)
    x57 = x43 * x6
    x58 = x37 * x6
    x59 = x46 + x58
    x60 = x24 * x59 + x41 + x57
    x61 = x6 * x60
    x62 = x10 * x21
    x63 = 8.0 * x62
    x64 = x2 * (x34 + 3.0 * x53 + x63)
    x65 = x59 * x6
    x66 = x64 + x65
    x67 = x23 * (2.0 * ax * x66 - x37)
    x68 = x2 * (4.0 * x34 + x63)
    x69 = x48 * x6
    x70 = x68 + x69
    x71 = 8.0 * x12
    x72 = x24 * x70 + x39 + x51
    x73 = x2 * (5.0 * x46 + x47 + 4.0 * x58) + x6 * x70
    x74 = (
        x2 * (5.0 * x41 + x49 + 4.0 * x57 + x59 * x71)
        + x23 * (2.0 * ax * x73 - x48)
        + x6 * x72
    )
    x75 = 2.0 * x68 + 2.0 * x69
    x76 = x2 * (4.0 * x64 + 4.0 * x65 + x75) + x6 * x73
    x77 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x78 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x79 = 3.14159265358979 * x4 * x78
    x80 = x77 * x79
    x81 = -x4 * (ax * A[1] + bx * B[1])
    x82 = -x81 - A[1]
    x83 = x82**2
    x84 = -x3 - x8 * (x2 + x83)
    x85 = x76 * x80
    x86 = -x4 * (ax * A[2] + bx * B[2])
    x87 = -x86 - A[2]
    x88 = x87**2
    x89 = -x3 - x8 * (x2 + x88)
    x90 = 0.179587122125167 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**5.5)
    x91 = 9.12251705727742 * x90
    x92 = -x81 - B[1]
    x93 = x14 * x77
    x94 = x92 * x93
    x95 = x84 * x94
    x96 = x24 * x94 + x95
    x97 = x15 * x6
    x98 = x10 * x97
    x99 = 2.0 * x98
    x100 = x44 + x99
    x101 = x2 * (x100 + x27)
    x102 = x54 * x6
    x103 = 2.0 * x46 + 2.0 * x58
    x104 = x2 * (3.0 * x101 + 3.0 * x102 + x103) + x6 * x66
    x105 = x14 * x78
    x106 = x25 * x6
    x107 = x21 + x98
    x108 = 2.0 * x106 + x107 * x18 + x40
    x109 = x2 * (x108 + x31)
    x110 = x19 + x24 * x54 + x52
    x111 = x110 * x6
    x112 = x101 + x102
    x113 = x23 * (2.0 * ax * x112 - x28)
    x114 = x56 + x61 + x67
    x115 = x80 * (
        x114 * x6
        + x2 * (3.0 * x109 + 3.0 * x111 + 3.0 * x113 + x18 * x59 + 2.0 * x41 + 2.0 * x57)
        + x23 * (2.0 * ax * x104 - x103)
    )
    x116 = x104 * x80
    x117 = 24.1359114645008 * x90
    x118 = -x86 - B[2]
    x119 = x105 * x118
    x120 = x119 * x89
    x121 = x119 * x24 + x120
    x122 = x2 * x93
    x123 = x122 * x84
    x124 = x92 * x96
    x125 = x92**2 * x93
    x126 = x122 + x125
    x127 = -x93
    x128 = x11 * (x1 * x126 + x127)
    x129 = x124 + x128
    x130 = x123 + x129
    x131 = x2 * (x16 + x97)
    x132 = x107 * x6
    x133 = 2.0 * x53 + 4.0 * x62
    x134 = x112 * x6 + x2 * (2.0 * x131 + 2.0 * x132 + x133)
    x135 = x105 * x134
    x136 = x9 * x97
    x137 = x136 + x24 * x97
    x138 = x2 * (x137 + x25)
    x139 = x106 + x107 * x24 + x22
    x140 = x139 * x6
    x141 = x131 + x132
    x142 = x0 * x141 - x16
    x143 = x1 * x4
    x144 = x109 + x111 + x113
    x145 = (
        x144 * x6
        + x2 * (2.0 * x138 + 2.0 * x140 + x142 * x143 + 2.0 * x19 + 2.0 * x52 + 4.0 * x55)
        + x23 * (2.0 * ax * x134 - x133)
    )
    x146 = 31.1593277158494 * x90
    x147 = x118 * x80
    x148 = 53.9695387335403 * x90
    x149 = x105 * x2
    x150 = x149 * x89
    x151 = x118 * x121
    x152 = x105 * x118**2
    x153 = x149 + x152
    x154 = -x105
    x155 = x11 * (x1 * x153 + x154)
    x156 = x151 + x155
    x157 = x150 + x156
    x158 = x134 * x93
    x159 = x2 * (x18 * x94 + 2.0 * x95)
    x160 = x130 * x92
    x161 = x126 * x92
    x162 = 2.0 * x122
    x163 = x162 * x92
    x164 = x161 + x163
    x165 = x11 * (x1 * x164 - 2.0 * x94)
    x166 = x160 + x165
    x167 = x159 + x166
    x168 = x15 * x7
    x169 = x141 * x6 + x2 * (x100 + x168)
    x170 = x105 * x169
    x171 = x168 + x21
    x172 = x137 * x6 + x23 * (x0 * x171 + x29)
    x173 = x138 + x140 + x142 * x23
    x174 = x173 * x6 + x2 * (x108 + x172) - x23 * (-2.0 * ax * x169 + x35 + x99)
    x175 = x2 * (x119 * x18 + 2.0 * x120)
    x176 = x118 * x157
    x177 = x118 * x153
    x178 = 2.0 * x149
    x179 = x118 * x178
    x180 = x177 + x179
    x181 = x11 * (x1 * x180 - 2.0 * x119)
    x182 = x176 + x181
    x183 = x175 + x182
    x184 = x169 * x93
    x185 = x172 + x22
    x186 = x6 * (x171 + x35)
    x187 = x185 * x6 + x2 * (2.0 * x136 + x18 * x97) + x23 * (x0 * x186 - 2.0 * x97)
    x188 = 3.0 * x122
    x189 = 3.0 * x125 + x188
    x190 = x189 * x2
    x191 = x164 * x92
    x192 = x190 + x191
    x193 = x105 * x192
    x194 = 3.0 * x123
    x195 = x2 * (3.0 * x124 + 3.0 * x128 + x194)
    x196 = x11 * (2.0 * bx * x192 - x189) + x167 * x92
    x197 = x195 + x196
    x198 = 3.0 * x149
    x199 = 3.0 * x152 + x198
    x200 = x199 * x2
    x201 = x118 * x180
    x202 = x200 + x201
    x203 = x202 * x93
    x204 = 3.0 * x150
    x205 = x2 * (3.0 * x151 + 3.0 * x155 + x204)
    x206 = x11 * (2.0 * bx * x202 - x199) + x118 * x183
    x207 = x205 + x206
    x208 = x82 * x93
    x209 = x208 * x84
    x210 = x208 * x24 + x209
    x211 = x74 * x80
    x212 = x73 * x80
    x213 = 20.3985682659737 * x90
    x214 = x82 * x96
    x215 = x208 * x92
    x216 = x122 + x215
    x217 = x123 + x214 + x216 * x24
    x218 = x105 * x66
    x219 = x130 * x82
    x220 = x126 * x82
    x221 = x163 + x220
    x222 = x159 + x219 + x221 * x24
    x223 = x105 * x112
    x224 = 69.6743749058326 * x90
    x225 = 120.679557322504 * x90
    x226 = x167 * x82
    x227 = x164 * x82
    x228 = x190 + x227
    x229 = x195 + x226 + x228 * x24
    x230 = x105 * x141
    x231 = x122 * x92
    x232 = 8.0 * x231
    x233 = x2 * (4.0 * x161 + x232)
    x234 = x192 * x82
    x235 = x233 + x234
    x236 = x105 * x235
    x237 = 4.0 * x159
    x238 = x2 * (4.0 * x160 + 4.0 * x165 + x237)
    x239 = x197 * x82
    x240 = x235 * x24 + x238 + x239
    x241 = x105 * x87
    x242 = x241 * x89
    x243 = x24 * x241 + x242
    x244 = x80 * x87
    x245 = x121 * x87
    x246 = x118 * x241
    x247 = x149 + x246
    x248 = x150 + x24 * x247 + x245
    x249 = x66 * x93
    x250 = x157 * x87
    x251 = x153 * x87
    x252 = x179 + x251
    x253 = x175 + x24 * x252 + x250
    x254 = x112 * x93
    x255 = x183 * x87
    x256 = x180 * x87
    x257 = x200 + x256
    x258 = x205 + x24 * x257 + x255
    x259 = x141 * x93
    x260 = x118 * x149
    x261 = 8.0 * x260
    x262 = x2 * (4.0 * x177 + x261)
    x263 = x202 * x87
    x264 = x262 + x263
    x265 = x264 * x93
    x266 = 4.0 * x175
    x267 = x2 * (4.0 * x176 + 4.0 * x181 + x266)
    x268 = x207 * x87
    x269 = x24 * x264 + x267 + x268
    x270 = x83 * x93
    x271 = x122 + x270
    x272 = x210 * x82 + x23 * (x0 * x271 + x127)
    x273 = x123 + x272
    x274 = x105 * x70
    x275 = x2 * (x208 + x94)
    x276 = x216 * x82
    x277 = x275 + x276
    x278 = x105 * x277
    x279 = x2 * (x210 + x96)
    x280 = x217 * x82
    x281 = x0 * x277 - x94
    x282 = x23 * x281 + x279 + x280
    x283 = 2.0 * x215
    x284 = x188 + x283
    x285 = x2 * (x125 + x284)
    x286 = x221 * x82
    x287 = x285 + x286
    x288 = x105 * x287
    x289 = x18 * x216 + x194 + 2.0 * x214
    x290 = x2 * (x129 + x289)
    x291 = x222 * x82
    x292 = x23 * (2.0 * ax * x287 - x126)
    x293 = x290 + x291 + x292
    x294 = x2 * (x161 + 3.0 * x220 + x232)
    x295 = x228 * x82
    x296 = x294 + x295
    x297 = x105 * x296
    x298 = 6.0 * x12
    x299 = x2 * (x166 + 3.0 * x219 + x221 * x298 + x237)
    x300 = x229 * x82
    x301 = x23 * (2.0 * ax * x296 - x164)
    x302 = x299 + x300 + x301
    x303 = x2 * (5.0 * x190 + x191 + 4.0 * x227) + x235 * x82
    x304 = (
        x2 * (5.0 * x195 + x196 + 4.0 * x226 + x228 * x71)
        + x23 * (2.0 * ax * x303 - x192)
        + x240 * x82
    )
    x305 = x13 * x79
    x306 = x304 * x305
    x307 = x305 * x6
    x308 = 35.3313566383285 * x90
    x309 = 93.4779831475484 * x90
    x310 = 120.679557322504 * x90
    x311 = 209.023124717498 * x90
    x312 = 3.14159265358979 * x13 * x4 * x77
    x313 = x312 * x6
    x314 = x105 * x88
    x315 = x149 + x314
    x316 = x23 * (x0 * x315 + x154) + x243 * x87
    x317 = x150 + x316
    x318 = x70 * x93
    x319 = x2 * (x119 + x241)
    x320 = x247 * x87
    x321 = x319 + x320
    x322 = x321 * x93
    x323 = x2 * (x121 + x243)
    x324 = x248 * x87
    x325 = x0 * x321 - x119
    x326 = x23 * x325 + x323 + x324
    x327 = 2.0 * x246
    x328 = x198 + x327
    x329 = x2 * (x152 + x328)
    x330 = x252 * x87
    x331 = x329 + x330
    x332 = x331 * x93
    x333 = x18 * x247 + x204 + 2.0 * x245
    x334 = x2 * (x156 + x333)
    x335 = x253 * x87
    x336 = x23 * (2.0 * ax * x331 - x153)
    x337 = x334 + x335 + x336
    x338 = x2 * (x177 + 3.0 * x251 + x261)
    x339 = x257 * x87
    x340 = x338 + x339
    x341 = x340 * x93
    x342 = x2 * (x182 + 3.0 * x250 + x252 * x298 + x266)
    x343 = x258 * x87
    x344 = x23 * (2.0 * ax * x340 - x180)
    x345 = x342 + x343 + x344
    x346 = x2 * (5.0 * x200 + x201 + 4.0 * x256) + x264 * x87
    x347 = (
        x2 * (5.0 * x205 + x206 + 4.0 * x255 + x257 * x71)
        + x23 * (2.0 * ax * x346 - x202)
        + x269 * x87
    )
    x348 = x312 * x347
    x349 = x82 * (x162 + x271)
    x350 = x2 * (x18 * x208 + 2.0 * x209) + x23 * (x0 * x349 - 2.0 * x208) + x273 * x82
    x351 = x105 * x48
    x352 = x2 * (x270 + x284) + x277 * x82
    x353 = x105 * x352
    x354 = x2 * (x272 + x289) - x23 * (-2.0 * ax * x352 + x162 + x283) + x282 * x82
    x355 = 2.0 * x220 + 4.0 * x231
    x356 = x2 * (2.0 * x275 + 2.0 * x276 + x355) + x287 * x82
    x357 = x105 * x356
    x358 = (
        x2
        * (x143 * x281 + 2.0 * x159 + x18 * x221 + 2.0 * x219 + 2.0 * x279 + 2.0 * x280)
        + x23 * (2.0 * ax * x356 - x355)
        + x293 * x82
    )
    x359 = 2.0 * x190 + 2.0 * x227
    x360 = x2 * (3.0 * x285 + 3.0 * x286 + x359) + x296 * x82
    x361 = x305 * (
        x2 * (x18 * x228 + 2.0 * x195 + 2.0 * x226 + 3.0 * x290 + 3.0 * x291 + 3.0 * x292)
        + x23 * (2.0 * ax * x360 - x359)
        + x302 * x82
    )
    x362 = x10 * x305
    x363 = 2.0 * x233 + 2.0 * x234
    x364 = x2 * (4.0 * x294 + 4.0 * x295 + x363) + x303 * x82
    x365 = x305 * x364
    x366 = x305 * x9
    x367 = x15 * x356
    x368 = x15 * x352
    x369 = x15 * x202
    x370 = x15 * x296
    x371 = x15 * x287
    x372 = x15 * x277
    x373 = x15 * x264
    x374 = x312 * x82
    x375 = x15 * x235
    x376 = x15 * x321
    x377 = x15 * x331
    x378 = x15 * x340
    x379 = x87 * (x178 + x315)
    x380 = x2 * (x18 * x241 + 2.0 * x242) + x23 * (x0 * x379 - 2.0 * x241) + x317 * x87
    x381 = x48 * x93
    x382 = x2 * (x314 + x328) + x321 * x87
    x383 = x382 * x93
    x384 = x2 * (x316 + x333) - x23 * (-2.0 * ax * x382 + x178 + x327) + x326 * x87
    x385 = 2.0 * x251 + 4.0 * x260
    x386 = x2 * (2.0 * x319 + 2.0 * x320 + x385) + x331 * x87
    x387 = x386 * x93
    x388 = (
        x2
        * (x143 * x325 + 2.0 * x175 + x18 * x252 + 2.0 * x250 + 2.0 * x323 + 2.0 * x324)
        + x23 * (2.0 * ax * x386 - x385)
        + x337 * x87
    )
    x389 = x10 * x312
    x390 = 2.0 * x200 + 2.0 * x256
    x391 = x2 * (3.0 * x329 + 3.0 * x330 + x390) + x340 * x87
    x392 = x312 * (
        x2 * (x18 * x257 + 2.0 * x205 + 2.0 * x255 + 3.0 * x334 + 3.0 * x335 + 3.0 * x336)
        + x23 * (2.0 * ax * x391 - x390)
        + x345 * x87
    )
    x393 = x15 * x192
    x394 = x15 * x382
    x395 = x15 * x386
    x396 = 2.0 * x262 + 2.0 * x263
    x397 = x2 * (4.0 * x338 + 4.0 * x339 + x396) + x346 * x87
    x398 = x312 * x397

    # 150 item(s)
    result[0, 0] = numpy.sum(
        x91
        * (
            x80
            * (
                x2
                * (x18 * x70 + 2.0 * x39 + 2.0 * x51 + 4.0 * x56 + 4.0 * x61 + 4.0 * x67)
                + x23 * (2.0 * ax * x76 - x75)
                + x6 * x74
            )
            + x84 * x85
            + x85 * x89
        )
    )
    result[0, 1] = numpy.sum(x117 * (x104 * x105 * x96 + x115 * x92 + x116 * x89 * x92))
    result[0, 2] = numpy.sum(x117 * (x104 * x121 * x93 + x115 * x118 + x116 * x118 * x84))
    result[0, 3] = numpy.sum(
        x146 * (x105 * x126 * x145 + x126 * x135 * x89 + x130 * x135)
    )
    result[0, 4] = numpy.sum(
        x148 * (x119 * x134 * x96 + x121 * x134 * x94 + x145 * x147 * x92)
    )
    result[0, 5] = numpy.sum(x146 * (x145 * x153 * x93 + x153 * x158 * x84 + x157 * x158))
    result[0, 6] = numpy.sum(
        x117 * (x105 * x164 * x174 + x164 * x170 * x89 + x167 * x170)
    )
    result[0, 7] = numpy.sum(
        x148 * (x119 * x126 * x174 + x119 * x130 * x169 + x121 * x126 * x169)
    )
    result[0, 8] = numpy.sum(
        x148 * (x153 * x169 * x96 + x153 * x174 * x94 + x157 * x169 * x94)
    )
    result[0, 9] = numpy.sum(x117 * (x174 * x180 * x93 + x180 * x184 * x84 + x183 * x184))
    result[0, 10] = numpy.sum(
        x91 * (x105 * x186 * x197 + x186 * x193 * x89 + x187 * x193)
    )
    result[0, 11] = numpy.sum(
        x117 * (x119 * x164 * x187 + x119 * x167 * x186 + x121 * x164 * x186)
    )
    result[0, 12] = numpy.sum(
        x146 * (x126 * x153 * x187 + x126 * x157 * x186 + x130 * x153 * x186)
    )
    result[0, 13] = numpy.sum(
        x117 * (x180 * x186 * x96 + x180 * x187 * x94 + x183 * x186 * x94)
    )
    result[0, 14] = numpy.sum(x91 * (x186 * x203 * x84 + x186 * x207 * x93 + x187 * x203))
    result[1, 0] = numpy.sum(x213 * (x105 * x210 * x73 + x211 * x82 + x212 * x82 * x89))
    result[1, 1] = numpy.sum(
        x148 * (x105 * x114 * x216 + x216 * x218 * x89 + x217 * x218)
    )
    result[1, 2] = numpy.sum(
        x148 * (x114 * x147 * x82 + x119 * x210 * x66 + x121 * x208 * x66)
    )
    result[1, 3] = numpy.sum(
        x224 * (x105 * x144 * x221 + x221 * x223 * x89 + x222 * x223)
    )
    result[1, 4] = numpy.sum(
        x225 * (x112 * x119 * x217 + x112 * x121 * x216 + x119 * x144 * x216)
    )
    result[1, 5] = numpy.sum(
        x224 * (x112 * x153 * x210 + x112 * x157 * x208 + x144 * x153 * x208)
    )
    result[1, 6] = numpy.sum(
        x148 * (x105 * x173 * x228 + x228 * x230 * x89 + x229 * x230)
    )
    result[1, 7] = numpy.sum(
        x225 * (x119 * x141 * x222 + x119 * x173 * x221 + x121 * x141 * x221)
    )
    result[1, 8] = numpy.sum(
        x225 * (x141 * x153 * x217 + x141 * x157 * x216 + x153 * x173 * x216)
    )
    result[1, 9] = numpy.sum(
        x148 * (x141 * x180 * x210 + x141 * x183 * x208 + x173 * x180 * x208)
    )
    result[1, 10] = numpy.sum(
        x213 * (x105 * x171 * x240 + x171 * x236 * x89 + x185 * x236)
    )
    result[1, 11] = numpy.sum(
        x148 * (x119 * x171 * x229 + x119 * x185 * x228 + x121 * x171 * x228)
    )
    result[1, 12] = numpy.sum(
        x224 * (x153 * x171 * x222 + x153 * x185 * x221 + x157 * x171 * x221)
    )
    result[1, 13] = numpy.sum(
        x148 * (x171 * x180 * x217 + x171 * x183 * x216 + x180 * x185 * x216)
    )
    result[1, 14] = numpy.sum(
        x213 * (x171 * x202 * x210 + x171 * x207 * x208 + x185 * x202 * x208)
    )
    result[2, 0] = numpy.sum(x213 * (x211 * x87 + x212 * x84 * x87 + x243 * x73 * x93))
    result[2, 1] = numpy.sum(
        x148 * (x114 * x244 * x92 + x241 * x66 * x96 + x243 * x66 * x94)
    )
    result[2, 2] = numpy.sum(x148 * (x114 * x247 * x93 + x247 * x249 * x84 + x248 * x249))
    result[2, 3] = numpy.sum(
        x224 * (x112 * x126 * x243 + x112 * x130 * x241 + x126 * x144 * x241)
    )
    result[2, 4] = numpy.sum(
        x225 * (x112 * x247 * x96 + x112 * x248 * x94 + x144 * x247 * x94)
    )
    result[2, 5] = numpy.sum(x224 * (x144 * x252 * x93 + x252 * x254 * x84 + x253 * x254))
    result[2, 6] = numpy.sum(
        x148 * (x141 * x164 * x243 + x141 * x167 * x241 + x164 * x173 * x241)
    )
    result[2, 7] = numpy.sum(
        x225 * (x126 * x141 * x248 + x126 * x173 * x247 + x130 * x141 * x247)
    )
    result[2, 8] = numpy.sum(
        x225 * (x141 * x252 * x96 + x141 * x253 * x94 + x173 * x252 * x94)
    )
    result[2, 9] = numpy.sum(x148 * (x173 * x257 * x93 + x257 * x259 * x84 + x258 * x259))
    result[2, 10] = numpy.sum(
        x213 * (x171 * x192 * x243 + x171 * x197 * x241 + x185 * x192 * x241)
    )
    result[2, 11] = numpy.sum(
        x148 * (x164 * x171 * x248 + x164 * x185 * x247 + x167 * x171 * x247)
    )
    result[2, 12] = numpy.sum(
        x224 * (x126 * x171 * x253 + x126 * x185 * x252 + x130 * x171 * x252)
    )
    result[2, 13] = numpy.sum(
        x148 * (x171 * x257 * x96 + x171 * x258 * x94 + x185 * x257 * x94)
    )
    result[2, 14] = numpy.sum(
        x213 * (x171 * x265 * x84 + x171 * x269 * x93 + x185 * x265)
    )
    result[3, 0] = numpy.sum(x213 * (x105 * x271 * x72 + x271 * x274 * x89 + x273 * x274))
    result[3, 1] = numpy.sum(x148 * (x105 * x282 * x59 + x278 * x59 * x89 + x278 * x60))
    result[3, 2] = numpy.sum(
        x148 * (x119 * x271 * x60 + x119 * x273 * x59 + x121 * x271 * x59)
    )
    result[3, 3] = numpy.sum(x224 * (x105 * x293 * x54 + x110 * x288 + x288 * x54 * x89))
    result[3, 4] = numpy.sum(
        x225 * (x110 * x119 * x277 + x119 * x282 * x54 + x121 * x277 * x54)
    )
    result[3, 5] = numpy.sum(
        x224 * (x110 * x153 * x271 + x153 * x273 * x54 + x157 * x271 * x54)
    )
    result[3, 6] = numpy.sum(
        x148 * (x105 * x107 * x302 + x107 * x297 * x89 + x139 * x297)
    )
    result[3, 7] = numpy.sum(
        x225 * (x107 * x119 * x293 + x107 * x121 * x287 + x119 * x139 * x287)
    )
    result[3, 8] = numpy.sum(
        x225 * (x107 * x153 * x282 + x107 * x157 * x277 + x139 * x153 * x277)
    )
    result[3, 9] = numpy.sum(
        x148 * (x107 * x180 * x273 + x107 * x183 * x271 + x139 * x180 * x271)
    )
    result[3, 10] = numpy.sum(x213 * (x105 * x137 * x303 + x303 * x307 * x89 + x306 * x6))
    result[3, 11] = numpy.sum(
        x148 * (x118 * x302 * x307 + x119 * x137 * x296 + x121 * x296 * x97)
    )
    result[3, 12] = numpy.sum(
        x224 * (x137 * x153 * x287 + x153 * x293 * x97 + x157 * x287 * x97)
    )
    result[3, 13] = numpy.sum(
        x148 * (x137 * x180 * x277 + x180 * x282 * x97 + x183 * x277 * x97)
    )
    result[3, 14] = numpy.sum(
        x213 * (x137 * x202 * x271 + x202 * x273 * x97 + x207 * x271 * x97)
    )
    result[4, 0] = numpy.sum(
        x308 * (x208 * x243 * x70 + x210 * x241 * x70 + x244 * x72 * x82)
    )
    result[4, 1] = numpy.sum(
        x309 * (x216 * x241 * x60 + x216 * x243 * x59 + x217 * x241 * x59)
    )
    result[4, 2] = numpy.sum(
        x309 * (x208 * x247 * x60 + x208 * x248 * x59 + x210 * x247 * x59)
    )
    result[4, 3] = numpy.sum(
        x310 * (x110 * x221 * x241 + x221 * x243 * x54 + x222 * x241 * x54)
    )
    result[4, 4] = numpy.sum(
        x311 * (x110 * x216 * x247 + x216 * x248 * x54 + x217 * x247 * x54)
    )
    result[4, 5] = numpy.sum(
        x310 * (x110 * x208 * x252 + x208 * x253 * x54 + x210 * x252 * x54)
    )
    result[4, 6] = numpy.sum(
        x309 * (x107 * x228 * x243 + x107 * x229 * x241 + x139 * x228 * x241)
    )
    result[4, 7] = numpy.sum(
        x311 * (x107 * x221 * x248 + x107 * x222 * x247 + x139 * x221 * x247)
    )
    result[4, 8] = numpy.sum(
        x311 * (x107 * x216 * x253 + x107 * x217 * x252 + x139 * x216 * x252)
    )
    result[4, 9] = numpy.sum(
        x309 * (x107 * x208 * x258 + x107 * x210 * x257 + x139 * x208 * x257)
    )
    result[4, 10] = numpy.sum(
        x308 * (x137 * x235 * x241 + x235 * x243 * x97 + x240 * x307 * x87)
    )
    result[4, 11] = numpy.sum(
        x309 * (x137 * x228 * x247 + x228 * x248 * x97 + x229 * x247 * x97)
    )
    result[4, 12] = numpy.sum(
        x310 * (x137 * x221 * x252 + x221 * x253 * x97 + x222 * x252 * x97)
    )
    result[4, 13] = numpy.sum(
        x309 * (x137 * x216 * x257 + x216 * x258 * x97 + x217 * x257 * x97)
    )
    result[4, 14] = numpy.sum(
        x308 * (x137 * x208 * x264 + x210 * x264 * x97 + x269 * x313 * x82)
    )
    result[5, 0] = numpy.sum(x213 * (x315 * x318 * x84 + x315 * x72 * x93 + x317 * x318))
    result[5, 1] = numpy.sum(
        x148 * (x315 * x59 * x96 + x315 * x60 * x94 + x317 * x59 * x94)
    )
    result[5, 2] = numpy.sum(x148 * (x322 * x59 * x84 + x322 * x60 + x326 * x59 * x93))
    result[5, 3] = numpy.sum(
        x224 * (x110 * x126 * x315 + x126 * x317 * x54 + x130 * x315 * x54)
    )
    result[5, 4] = numpy.sum(
        x225 * (x110 * x321 * x94 + x321 * x54 * x96 + x326 * x54 * x94)
    )
    result[5, 5] = numpy.sum(x224 * (x110 * x332 + x332 * x54 * x84 + x337 * x54 * x93))
    result[5, 6] = numpy.sum(
        x148 * (x107 * x164 * x317 + x107 * x167 * x315 + x139 * x164 * x315)
    )
    result[5, 7] = numpy.sum(
        x225 * (x107 * x126 * x326 + x107 * x130 * x321 + x126 * x139 * x321)
    )
    result[5, 8] = numpy.sum(
        x225 * (x107 * x331 * x96 + x107 * x337 * x94 + x139 * x331 * x94)
    )
    result[5, 9] = numpy.sum(x148 * (x107 * x341 * x84 + x107 * x345 * x93 + x139 * x341))
    result[5, 10] = numpy.sum(
        x213 * (x137 * x192 * x315 + x192 * x317 * x97 + x197 * x315 * x97)
    )
    result[5, 11] = numpy.sum(
        x148 * (x137 * x164 * x321 + x164 * x326 * x97 + x167 * x321 * x97)
    )
    result[5, 12] = numpy.sum(
        x224 * (x126 * x137 * x331 + x126 * x337 * x97 + x130 * x331 * x97)
    )
    result[5, 13] = numpy.sum(
        x148 * (x137 * x340 * x94 + x313 * x345 * x92 + x340 * x96 * x97)
    )
    result[5, 14] = numpy.sum(x213 * (x137 * x346 * x93 + x313 * x346 * x84 + x348 * x6))
    result[6, 0] = numpy.sum(x91 * (x105 * x349 * x50 + x349 * x351 * x89 + x350 * x351))
    result[6, 1] = numpy.sum(x117 * (x105 * x354 * x37 + x353 * x37 * x89 + x353 * x43))
    result[6, 2] = numpy.sum(
        x117 * (x119 * x349 * x43 + x119 * x350 * x37 + x121 * x349 * x37)
    )
    result[6, 3] = numpy.sum(x146 * (x105 * x28 * x358 + x28 * x357 * x89 + x32 * x357))
    result[6, 4] = numpy.sum(
        x148 * (x119 * x28 * x354 + x119 * x32 * x352 + x121 * x28 * x352)
    )
    result[6, 5] = numpy.sum(
        x146 * (x153 * x28 * x350 + x153 * x32 * x349 + x157 * x28 * x349)
    )
    result[6, 6] = numpy.sum(x117 * (x10 * x361 + x105 * x25 * x360 + x360 * x362 * x89))
    result[6, 7] = numpy.sum(
        x148 * (x118 * x358 * x362 + x119 * x25 * x356 + x121 * x16 * x356)
    )
    result[6, 8] = numpy.sum(
        x148 * (x153 * x16 * x354 + x153 * x25 * x352 + x157 * x16 * x352)
    )
    result[6, 9] = numpy.sum(
        x117 * (x16 * x180 * x350 + x16 * x183 * x349 + x180 * x25 * x349)
    )
    result[6, 10] = numpy.sum(
        x91
        * (
            x305
            * (
                x2
                * (
                    x18 * x235
                    + 2.0 * x238
                    + 2.0 * x239
                    + 4.0 * x299
                    + 4.0 * x300
                    + 4.0 * x301
                )
                + x23 * (2.0 * ax * x364 - x363)
                + x304 * x82
            )
            + x365 * x89
            + x365 * x9
        )
    )
    result[6, 11] = numpy.sum(
        x117 * (x118 * x360 * x366 + x118 * x361 + x121 * x15 * x360)
    )
    result[6, 12] = numpy.sum(x146 * (x15 * x153 * x358 + x153 * x367 * x9 + x157 * x367))
    result[6, 13] = numpy.sum(x117 * (x15 * x180 * x354 + x180 * x368 * x9 + x183 * x368))
    result[6, 14] = numpy.sum(x91 * (x15 * x207 * x349 + x349 * x369 * x9 + x350 * x369))
    result[7, 0] = numpy.sum(
        x213 * (x241 * x271 * x50 + x241 * x273 * x48 + x243 * x271 * x48)
    )
    result[7, 1] = numpy.sum(
        x148 * (x241 * x277 * x43 + x241 * x282 * x37 + x243 * x277 * x37)
    )
    result[7, 2] = numpy.sum(
        x148 * (x247 * x271 * x43 + x247 * x273 * x37 + x248 * x271 * x37)
    )
    result[7, 3] = numpy.sum(
        x224 * (x241 * x28 * x293 + x241 * x287 * x32 + x243 * x28 * x287)
    )
    result[7, 4] = numpy.sum(
        x225 * (x247 * x277 * x32 + x247 * x28 * x282 + x248 * x277 * x28)
    )
    result[7, 5] = numpy.sum(
        x224 * (x252 * x271 * x32 + x252 * x273 * x28 + x253 * x271 * x28)
    )
    result[7, 6] = numpy.sum(
        x148 * (x16 * x243 * x296 + x241 * x25 * x296 + x302 * x362 * x87)
    )
    result[7, 7] = numpy.sum(
        x225 * (x16 * x247 * x293 + x16 * x248 * x287 + x247 * x25 * x287)
    )
    result[7, 8] = numpy.sum(
        x225 * (x16 * x252 * x282 + x16 * x253 * x277 + x25 * x252 * x277)
    )
    result[7, 9] = numpy.sum(
        x148 * (x16 * x257 * x273 + x16 * x258 * x271 + x25 * x257 * x271)
    )
    result[7, 10] = numpy.sum(x213 * (x15 * x243 * x303 + x303 * x366 * x87 + x306 * x87))
    result[7, 11] = numpy.sum(x148 * (x15 * x247 * x302 + x247 * x370 * x9 + x248 * x370))
    result[7, 12] = numpy.sum(x224 * (x15 * x252 * x293 + x252 * x371 * x9 + x253 * x371))
    result[7, 13] = numpy.sum(x148 * (x15 * x257 * x282 + x257 * x372 * x9 + x258 * x372))
    result[7, 14] = numpy.sum(x213 * (x15 * x269 * x271 + x271 * x373 * x9 + x273 * x373))
    result[8, 0] = numpy.sum(
        x213 * (x208 * x315 * x50 + x208 * x317 * x48 + x210 * x315 * x48)
    )
    result[8, 1] = numpy.sum(
        x148 * (x216 * x315 * x43 + x216 * x317 * x37 + x217 * x315 * x37)
    )
    result[8, 2] = numpy.sum(
        x148 * (x208 * x321 * x43 + x208 * x326 * x37 + x210 * x321 * x37)
    )
    result[8, 3] = numpy.sum(
        x224 * (x221 * x28 * x317 + x221 * x315 * x32 + x222 * x28 * x315)
    )
    result[8, 4] = numpy.sum(
        x225 * (x216 * x28 * x326 + x216 * x32 * x321 + x217 * x28 * x321)
    )
    result[8, 5] = numpy.sum(
        x224 * (x208 * x28 * x337 + x208 * x32 * x331 + x210 * x28 * x331)
    )
    result[8, 6] = numpy.sum(
        x148 * (x16 * x228 * x317 + x16 * x229 * x315 + x228 * x25 * x315)
    )
    result[8, 7] = numpy.sum(
        x225 * (x16 * x221 * x326 + x16 * x222 * x321 + x221 * x25 * x321)
    )
    result[8, 8] = numpy.sum(
        x225 * (x16 * x216 * x337 + x16 * x217 * x331 + x216 * x25 * x331)
    )
    result[8, 9] = numpy.sum(
        x148 * (x10 * x345 * x374 + x16 * x210 * x340 + x208 * x25 * x340)
    )
    result[8, 10] = numpy.sum(x213 * (x15 * x240 * x315 + x315 * x375 * x9 + x317 * x375))
    result[8, 11] = numpy.sum(x148 * (x15 * x228 * x326 + x228 * x376 * x9 + x229 * x376))
    result[8, 12] = numpy.sum(x224 * (x15 * x221 * x337 + x221 * x377 * x9 + x222 * x377))
    result[8, 13] = numpy.sum(x148 * (x15 * x216 * x345 + x216 * x378 * x9 + x217 * x378))
    result[8, 14] = numpy.sum(x213 * (x15 * x210 * x346 + x346 * x374 * x9 + x348 * x82))
    result[9, 0] = numpy.sum(x91 * (x379 * x381 * x84 + x379 * x50 * x93 + x380 * x381))
    result[9, 1] = numpy.sum(
        x117 * (x37 * x379 * x96 + x37 * x380 * x94 + x379 * x43 * x94)
    )
    result[9, 2] = numpy.sum(x117 * (x37 * x383 * x84 + x37 * x384 * x93 + x383 * x43))
    result[9, 3] = numpy.sum(
        x146 * (x126 * x28 * x380 + x126 * x32 * x379 + x130 * x28 * x379)
    )
    result[9, 4] = numpy.sum(
        x148 * (x28 * x382 * x96 + x28 * x384 * x94 + x32 * x382 * x94)
    )
    result[9, 5] = numpy.sum(x146 * (x28 * x387 * x84 + x28 * x388 * x93 + x32 * x387))
    result[9, 6] = numpy.sum(
        x117 * (x16 * x164 * x380 + x16 * x167 * x379 + x164 * x25 * x379)
    )
    result[9, 7] = numpy.sum(
        x148 * (x126 * x16 * x384 + x126 * x25 * x382 + x130 * x16 * x382)
    )
    result[9, 8] = numpy.sum(
        x148 * (x16 * x386 * x96 + x25 * x386 * x94 + x388 * x389 * x92)
    )
    result[9, 9] = numpy.sum(x117 * (x10 * x392 + x25 * x391 * x93 + x389 * x391 * x84))
    result[9, 10] = numpy.sum(x91 * (x15 * x197 * x379 + x379 * x393 * x9 + x380 * x393))
    result[9, 11] = numpy.sum(x117 * (x15 * x164 * x384 + x164 * x394 * x9 + x167 * x394))
    result[9, 12] = numpy.sum(x146 * (x126 * x15 * x388 + x126 * x395 * x9 + x130 * x395))
    result[9, 13] = numpy.sum(
        x117 * (x15 * x391 * x96 + x312 * x391 * x9 * x92 + x392 * x92)
    )
    result[9, 14] = numpy.sum(
        x91
        * (
            x312
            * (
                x2
                * (
                    x18 * x264
                    + 2.0 * x267
                    + 2.0 * x268
                    + 4.0 * x342
                    + 4.0 * x343
                    + 4.0 * x344
                )
                + x23 * (2.0 * ax * x397 - x396)
                + x347 * x87
            )
            + x398 * x84
            + x398 * x9
        )
    )
    return result


def kinetic3d_40(ax, da, A, bx, db, B):
    """Cartesian 3D (gs) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 1), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = (ax + bx) ** (-1.0)
    x3 = x2 * (ax * A[0] + bx * B[0]) - A[0]
    x4 = -ax
    x5 = x3**2
    x6 = 2.0 * ax**2
    x7 = -x4 - x6 * (x1 + x5)
    x8 = bx * x2
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = 1.77245385090552 * numpy.sqrt(x2)
    x12 = x10 * x11
    x13 = x12 * x3
    x14 = x13 * x7
    x15 = x0 * x8
    x16 = x13 * x15 + x14
    x17 = x16 * x3
    x18 = x12 * x5
    x19 = x1 * x12
    x20 = x18 + x19
    x21 = x8 * (x0 * x20 - x12)
    x22 = x19 * x7
    x23 = 4.0 * x9
    x24 = x17 + x21 + x22
    x25 = x3 * (2.0 * x19 + x20)
    x26 = x1 * (x13 * x23 + 2.0 * x14) + x24 * x3 + x8 * (x0 * x25 - 2.0 * x13)
    x27 = 3.0 * x18 + 3.0 * x19
    x28 = x1 * x27 + x25 * x3
    x29 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x30 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x31 = 3.14159265358979 * x2 * x30
    x32 = x29 * x31
    x33 = x2 * (ax * A[1] + bx * B[1]) - A[1]
    x34 = x33**2
    x35 = -x4 - x6 * (x1 + x34)
    x36 = x28 * x32
    x37 = x2 * (ax * A[2] + bx * B[2]) - A[2]
    x38 = x37**2
    x39 = -x4 - x6 * (x1 + x38)
    x40 = 0.179587122125167 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**1.5)
    x41 = 4.41641957979107 * x40
    x42 = x11 * x29
    x43 = x33 * x42
    x44 = x35 * x43
    x45 = x15 * x43 + x44
    x46 = x11 * x30
    x47 = x45 * x46
    x48 = x26 * x32
    x49 = x25 * x32
    x50 = 11.6847478934435 * x40
    x51 = x37 * x46
    x52 = x39 * x51
    x53 = x15 * x51 + x52
    x54 = x33 * x45
    x55 = x34 * x42
    x56 = x1 * x42
    x57 = x55 + x56
    x58 = x8 * (x0 * x57 - x42)
    x59 = x35 * x56
    x60 = x54 + x58 + x59
    x61 = x20 * x46
    x62 = 15.084944665313 * x40
    x63 = 26.1278905896872 * x40
    x64 = x37 * x53
    x65 = x38 * x46
    x66 = x1 * x46
    x67 = x65 + x66
    x68 = x8 * (x0 * x67 - x46)
    x69 = x39 * x66
    x70 = x64 + x68 + x69
    x71 = x20 * x42
    x72 = x33 * (2.0 * x56 + x57)
    x73 = x1 * (x23 * x43 + 2.0 * x44) + x33 * x60 + x8 * (x0 * x72 - 2.0 * x43)
    x74 = x10 * x31
    x75 = x73 * x74
    x76 = x3 * x74
    x77 = 3.14159265358979 * x10 * x2 * x29
    x78 = x3 * x77
    x79 = x37 * (2.0 * x66 + x67)
    x80 = x1 * (x23 * x51 + 2.0 * x52) + x37 * x70 + x8 * (x0 * x79 - 2.0 * x51)
    x81 = x77 * x80
    x82 = 3.0 * x55 + 3.0 * x56
    x83 = x1 * x82 + x33 * x72
    x84 = x74 * x83
    x85 = x12 * x57
    x86 = 3.0 * x65 + 3.0 * x66
    x87 = x1 * x86 + x37 * x79
    x88 = x77 * x87

    # 15 item(s)
    result[0, 0] = numpy.sum(
        x41
        * (
            x32 * (3.0 * x1 * (x17 + x21 + x22) + x26 * x3 + x8 * (2.0 * ax * x28 - x27))
            + x35 * x36
            + x36 * x39
        )
    )
    result[1, 0] = numpy.sum(x50 * (x25 * x47 + x33 * x39 * x49 + x33 * x48))
    result[2, 0] = numpy.sum(x50 * (x25 * x42 * x53 + x35 * x37 * x49 + x37 * x48))
    result[3, 0] = numpy.sum(x62 * (x24 * x46 * x57 + x39 * x57 * x61 + x60 * x61))
    result[4, 0] = numpy.sum(
        x63 * (x20 * x37 * x47 + x20 * x43 * x53 + x24 * x32 * x33 * x37)
    )
    result[5, 0] = numpy.sum(x62 * (x24 * x42 * x67 + x35 * x67 * x71 + x70 * x71))
    result[6, 0] = numpy.sum(x50 * (x16 * x46 * x72 + x3 * x75 + x39 * x72 * x76))
    result[7, 0] = numpy.sum(x63 * (x13 * x53 * x57 + x16 * x51 * x57 + x37 * x60 * x76))
    result[8, 0] = numpy.sum(x63 * (x13 * x45 * x67 + x16 * x43 * x67 + x33 * x70 * x78))
    result[9, 0] = numpy.sum(x50 * (x16 * x42 * x79 + x3 * x81 + x35 * x78 * x79))
    result[10, 0] = numpy.sum(
        x41
        * (
            x39 * x84
            + x7 * x84
            + x74
            * (3.0 * x1 * (x54 + x58 + x59) + x33 * x73 + x8 * (2.0 * ax * x83 - x82))
        )
    )
    result[11, 0] = numpy.sum(x50 * (x12 * x53 * x72 + x37 * x7 * x72 * x74 + x37 * x75))
    result[12, 0] = numpy.sum(x62 * (x12 * x60 * x67 + x67 * x7 * x85 + x70 * x85))
    result[13, 0] = numpy.sum(x50 * (x12 * x45 * x79 + x33 * x7 * x77 * x79 + x33 * x81))
    result[14, 0] = numpy.sum(
        x41
        * (
            x35 * x88
            + x7 * x88
            + x77
            * (3.0 * x1 * (x64 + x68 + x69) + x37 * x80 + x8 * (2.0 * ax * x87 - x86))
        )
    )
    return result


def kinetic3d_41(ax, da, A, bx, db, B):
    """Cartesian 3D (gp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = x5**2
    x7 = 2.0 * ax**2
    x8 = -x2 - x7 * (x1 + x6)
    x9 = bx * x3
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.77245385090552 * numpy.sqrt(x3)
    x13 = x11 * x12
    x14 = x13 * x5
    x15 = x14 * x8
    x16 = x0 * x9
    x17 = x14 * x16 + x15
    x18 = -x4 - B[0]
    x19 = x13 * x18
    x20 = x19 * (x16 + x8)
    x21 = x1 * (x17 + x20)
    x22 = x20 * x5
    x23 = x1 * x13
    x24 = x14 * x18
    x25 = x23 + x24
    x26 = x23 * x8
    x27 = x16 * x25 + x22 + x26
    x28 = x27 * x5
    x29 = x1 * (x14 + x19)
    x30 = x25 * x5
    x31 = x29 + x30
    x32 = x9 * (x0 * x31 - x19)
    x33 = 4.0 * x10
    x34 = x17 * x5
    x35 = x13 * x6
    x36 = x23 + x35
    x37 = x9 * (x0 * x36 - x13)
    x38 = x34 + x37
    x39 = x26 + x38
    x40 = 2.0 * x23
    x41 = x5 * (x36 + x40)
    x42 = x1 * (x14 * x33 + 2.0 * x15) + x39 * x5 + x9 * (x0 * x41 - 2.0 * x14)
    x43 = 3.0 * x26
    x44 = x21 + x28 + x32
    x45 = 3.0 * x23
    x46 = 2.0 * x24
    x47 = x1 * (x35 + x45 + x46) + x31 * x5
    x48 = (
        x1 * (2.0 * x22 + x25 * x33 + x38 + x43)
        + x44 * x5
        - x9 * (-2.0 * ax * x47 + x40 + x46)
    )
    x49 = 3.0 * x29 + 3.0 * x30
    x50 = x1 * (x41 + x49) + x47 * x5
    x51 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x52 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x53 = 3.14159265358979 * x3 * x52
    x54 = x51 * x53
    x55 = -x3 * (ax * A[1] + bx * B[1])
    x56 = -x55 - A[1]
    x57 = x56**2
    x58 = -x2 - x7 * (x1 + x57)
    x59 = x50 * x54
    x60 = -x3 * (ax * A[2] + bx * B[2])
    x61 = -x60 - A[2]
    x62 = x61**2
    x63 = -x2 - x7 * (x1 + x62)
    x64 = 0.179587122125167 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**2.5)
    x65 = 8.83283915958214 * x64
    x66 = -x55 - B[1]
    x67 = x12 * x51
    x68 = x66 * x67
    x69 = x68 * (x16 + x58)
    x70 = 3.0 * x35 + x45
    x71 = x1 * x70 + x41 * x5
    x72 = x12 * x52
    x73 = x54 * (
        x1 * (3.0 * x34 + 3.0 * x37 + x43) + x42 * x5 + x9 * (2.0 * ax * x71 - x70)
    )
    x74 = x54 * x71
    x75 = -x60 - B[2]
    x76 = x72 * x75
    x77 = x76 * (x16 + x63)
    x78 = x56 * x67
    x79 = x58 * x78
    x80 = x16 * x78 + x79
    x81 = x48 * x54
    x82 = x54 * x56
    x83 = 23.3694957868871 * x64
    x84 = x56 * x69
    x85 = x1 * x67
    x86 = x66 * x78
    x87 = x85 + x86
    x88 = x58 * x85
    x89 = x16 * x87 + x84 + x88
    x90 = x41 * x72
    x91 = x61 * x72
    x92 = x63 * x91
    x93 = x16 * x91 + x92
    x94 = x54 * x61
    x95 = x61 * x77
    x96 = x1 * x72
    x97 = x75 * x91
    x98 = x96 + x97
    x99 = x63 * x96
    x100 = x16 * x98 + x95 + x99
    x101 = x41 * x67
    x102 = x56 * x80
    x103 = x57 * x67
    x104 = x103 + x85
    x105 = x9 * (x0 * x104 - x67)
    x106 = x102 + x105
    x107 = x106 + x88
    x108 = x31 * x72
    x109 = 30.169889330626 * x64
    x110 = x1 * (x68 + x78)
    x111 = x56 * x87
    x112 = x110 + x111
    x113 = x112 * x72
    x114 = x1 * (x69 + x80)
    x115 = x56 * x89
    x116 = x9 * (x0 * x112 - x68)
    x117 = x114 + x115 + x116
    x118 = 52.2557811793745 * x64
    x119 = x61 * x93
    x120 = x62 * x72
    x121 = x120 + x96
    x122 = x9 * (x0 * x121 - x72)
    x123 = x119 + x122
    x124 = x123 + x99
    x125 = x31 * x67
    x126 = x1 * (x76 + x91)
    x127 = x61 * x98
    x128 = x126 + x127
    x129 = x128 * x67
    x130 = x1 * (x77 + x93)
    x131 = x100 * x61
    x132 = x9 * (x0 * x128 - x76)
    x133 = x130 + x131 + x132
    x134 = 2.0 * x85
    x135 = x56 * (x104 + x134)
    x136 = x135 * x72
    x137 = x1 * (x33 * x78 + 2.0 * x79) + x107 * x56 + x9 * (x0 * x135 - 2.0 * x78)
    x138 = 3.0 * x85
    x139 = 2.0 * x86
    x140 = x1 * (x103 + x138 + x139) + x112 * x56
    x141 = 3.0 * x88
    x142 = (
        x1 * (x106 + x141 + x33 * x87 + 2.0 * x84)
        + x117 * x56
        - x9 * (-2.0 * ax * x140 + x134 + x139)
    )
    x143 = x11 * x53
    x144 = x142 * x143
    x145 = x143 * x5
    x146 = 3.14159265358979 * x11 * x3 * x51
    x147 = x146 * x5
    x148 = 2.0 * x96
    x149 = x61 * (x121 + x148)
    x150 = x149 * x67
    x151 = x1 * (x33 * x91 + 2.0 * x92) + x124 * x61 + x9 * (x0 * x149 - 2.0 * x91)
    x152 = 3.0 * x96
    x153 = 2.0 * x97
    x154 = x1 * (x120 + x152 + x153) + x128 * x61
    x155 = 3.0 * x99
    x156 = (
        x1 * (x123 + x155 + x33 * x98 + 2.0 * x95)
        + x133 * x61
        - x9 * (-2.0 * ax * x154 + x148 + x153)
    )
    x157 = x146 * x156
    x158 = 3.0 * x103 + x138
    x159 = x1 * x158 + x135 * x56
    x160 = x143 * (
        x1 * (3.0 * x102 + 3.0 * x105 + x141) + x137 * x56 + x9 * (2.0 * ax * x159 - x158)
    )
    x161 = x143 * x159
    x162 = 3.0 * x110 + 3.0 * x111
    x163 = x1 * (x135 + x162) + x140 * x56
    x164 = x143 * x163
    x165 = x143 * x61
    x166 = x13 * x135
    x167 = x112 * x13
    x168 = x128 * x13
    x169 = x146 * x56
    x170 = x13 * x149
    x171 = 3.0 * x120 + x152
    x172 = x1 * x171 + x149 * x61
    x173 = x146 * (
        x1 * (3.0 * x119 + 3.0 * x122 + x155) + x151 * x61 + x9 * (2.0 * ax * x172 - x171)
    )
    x174 = x146 * x172
    x175 = 3.0 * x126 + 3.0 * x127
    x176 = x1 * (x149 + x175) + x154 * x61
    x177 = x146 * x176

    # 45 item(s)
    result[0, 0] = numpy.sum(
        x65
        * (
            x54
            * (
                x1 * (3.0 * x21 + 3.0 * x28 + 3.0 * x32 + x42)
                + x48 * x5
                + x9 * (2.0 * ax * x50 - x49)
            )
            + x58 * x59
            + x59 * x63
        )
    )
    result[0, 1] = numpy.sum(x65 * (x63 * x66 * x74 + x66 * x73 + x69 * x71 * x72))
    result[0, 2] = numpy.sum(x65 * (x58 * x74 * x75 + x67 * x71 * x77 + x73 * x75))
    result[1, 0] = numpy.sum(x83 * (x47 * x63 * x82 + x47 * x72 * x80 + x56 * x81))
    result[1, 1] = numpy.sum(x83 * (x42 * x72 * x87 + x63 * x87 * x90 + x89 * x90))
    result[1, 2] = numpy.sum(x83 * (x41 * x76 * x80 + x41 * x77 * x78 + x42 * x75 * x82))
    result[2, 0] = numpy.sum(x83 * (x47 * x58 * x94 + x47 * x67 * x93 + x61 * x81))
    result[2, 1] = numpy.sum(x83 * (x41 * x68 * x93 + x41 * x69 * x91 + x42 * x66 * x94))
    result[2, 2] = numpy.sum(x83 * (x100 * x101 + x101 * x58 * x98 + x42 * x67 * x98))
    result[3, 0] = numpy.sum(x109 * (x104 * x108 * x63 + x104 * x44 * x72 + x107 * x108))
    result[3, 1] = numpy.sum(x109 * (x113 * x36 * x63 + x113 * x39 + x117 * x36 * x72))
    result[3, 2] = numpy.sum(
        x109 * (x104 * x36 * x77 + x104 * x39 * x76 + x107 * x36 * x76)
    )
    result[4, 0] = numpy.sum(x118 * (x31 * x78 * x93 + x31 * x80 * x91 + x44 * x61 * x82))
    result[4, 1] = numpy.sum(x118 * (x36 * x87 * x93 + x36 * x89 * x91 + x39 * x87 * x91))
    result[4, 2] = numpy.sum(
        x118 * (x100 * x36 * x78 + x36 * x80 * x98 + x39 * x78 * x98)
    )
    result[5, 0] = numpy.sum(x109 * (x121 * x125 * x58 + x121 * x44 * x67 + x124 * x125))
    result[5, 1] = numpy.sum(
        x109 * (x121 * x36 * x69 + x121 * x39 * x68 + x124 * x36 * x68)
    )
    result[5, 2] = numpy.sum(x109 * (x129 * x36 * x58 + x129 * x39 + x133 * x36 * x67))
    result[6, 0] = numpy.sum(x83 * (x136 * x25 * x63 + x136 * x27 + x137 * x25 * x72))
    result[6, 1] = numpy.sum(x83 * (x140 * x145 * x63 + x140 * x17 * x72 + x144 * x5))
    result[6, 2] = numpy.sum(
        x83 * (x135 * x14 * x77 + x135 * x17 * x76 + x137 * x145 * x75)
    )
    result[7, 0] = numpy.sum(
        x118 * (x104 * x25 * x93 + x104 * x27 * x91 + x107 * x25 * x91)
    )
    result[7, 1] = numpy.sum(
        x118 * (x112 * x14 * x93 + x112 * x17 * x91 + x117 * x145 * x61)
    )
    result[7, 2] = numpy.sum(
        x118 * (x100 * x104 * x14 + x104 * x17 * x98 + x107 * x14 * x98)
    )
    result[8, 0] = numpy.sum(
        x118 * (x121 * x25 * x80 + x121 * x27 * x78 + x124 * x25 * x78)
    )
    result[8, 1] = numpy.sum(
        x118 * (x121 * x14 * x89 + x121 * x17 * x87 + x124 * x14 * x87)
    )
    result[8, 2] = numpy.sum(
        x118 * (x128 * x14 * x80 + x128 * x17 * x78 + x133 * x147 * x56)
    )
    result[9, 0] = numpy.sum(x83 * (x150 * x25 * x58 + x150 * x27 + x151 * x25 * x67))
    result[9, 1] = numpy.sum(
        x83 * (x14 * x149 * x69 + x147 * x151 * x66 + x149 * x17 * x68)
    )
    result[9, 2] = numpy.sum(x83 * (x147 * x154 * x58 + x154 * x17 * x67 + x157 * x5))
    result[10, 0] = numpy.sum(x65 * (x159 * x20 * x72 + x160 * x18 + x161 * x18 * x63))
    result[10, 1] = numpy.sum(
        x65
        * (
            x143
            * (
                x1 * (3.0 * x114 + 3.0 * x115 + 3.0 * x116 + x137)
                + x142 * x56
                + x9 * (2.0 * ax * x163 - x162)
            )
            + x164 * x63
            + x164 * x8
        )
    )
    result[10, 2] = numpy.sum(x65 * (x13 * x159 * x77 + x160 * x75 + x161 * x75 * x8))
    result[11, 0] = numpy.sum(
        x83 * (x135 * x19 * x93 + x135 * x20 * x91 + x137 * x165 * x18)
    )
    result[11, 1] = numpy.sum(x83 * (x13 * x140 * x93 + x140 * x165 * x8 + x144 * x61))
    result[11, 2] = numpy.sum(x83 * (x100 * x166 + x13 * x137 * x98 + x166 * x8 * x98))
    result[12, 0] = numpy.sum(
        x109 * (x104 * x121 * x20 + x104 * x124 * x19 + x107 * x121 * x19)
    )
    result[12, 1] = numpy.sum(x109 * (x117 * x121 * x13 + x121 * x167 * x8 + x124 * x167))
    result[12, 2] = numpy.sum(x109 * (x104 * x13 * x133 + x104 * x168 * x8 + x107 * x168))
    result[13, 0] = numpy.sum(
        x83 * (x149 * x19 * x80 + x149 * x20 * x78 + x151 * x169 * x18)
    )
    result[13, 1] = numpy.sum(x83 * (x13 * x151 * x87 + x170 * x8 * x87 + x170 * x89))
    result[13, 2] = numpy.sum(x83 * (x13 * x154 * x80 + x154 * x169 * x8 + x157 * x56))
    result[14, 0] = numpy.sum(x65 * (x172 * x20 * x67 + x173 * x18 + x174 * x18 * x58))
    result[14, 1] = numpy.sum(x65 * (x13 * x172 * x69 + x173 * x66 + x174 * x66 * x8))
    result[14, 2] = numpy.sum(
        x65
        * (
            x146
            * (
                x1 * (3.0 * x130 + 3.0 * x131 + 3.0 * x132 + x151)
                + x156 * x61
                + x9 * (2.0 * ax * x176 - x175)
            )
            + x177 * x58
            + x177 * x8
        )
    )
    return result


def kinetic3d_42(ax, da, A, bx, db, B):
    """Cartesian 3D (gd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = bx * x3
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x5
    x16 = x15 * x9
    x17 = x0 * x10
    x18 = x15 * x17 + x16
    x19 = x18 * x5
    x20 = x14 * x7
    x21 = x14 * x2
    x22 = x20 + x21
    x23 = -x14
    x24 = x10 * (x0 * x22 + x23)
    x25 = x19 + x24
    x26 = x21 * x9
    x27 = 3.0 * x26
    x28 = -x4 - B[0]
    x29 = x14 * x28
    x30 = x29 * x9
    x31 = x17 * x29 + x30
    x32 = x31 * x5
    x33 = x15 * x28
    x34 = x21 + x33
    x35 = 4.0 * x11
    x36 = x27 + 2.0 * x32 + x34 * x35
    x37 = x2 * (x25 + x36)
    x38 = x2 * (x18 + x31)
    x39 = x17 * x34 + x26 + x32
    x40 = x39 * x5
    x41 = x2 * (x15 + x29)
    x42 = x34 * x5
    x43 = x41 + x42
    x44 = x0 * x43 - x29
    x45 = x10 * x44
    x46 = x38 + x40 + x45
    x47 = x46 * x5
    x48 = x14 * x28**2
    x49 = x21 + x48
    x50 = ax * x3
    x51 = x28 * x31 + x50 * (x1 * x49 + x23)
    x52 = x2 * (x36 + x51)
    x53 = x2 * (x29 * x35 + 2.0 * x30)
    x54 = x26 + x51
    x55 = x5 * x54
    x56 = x49 * x5
    x57 = 2.0 * x21
    x58 = x28 * x57 + x56
    x59 = x17 * x58 + x53 + x55
    x60 = x5 * x59
    x61 = 3.0 * x21
    x62 = 2.0 * x33
    x63 = x61 + x62
    x64 = x2 * (x20 + x63)
    x65 = x43 * x5
    x66 = x64 + x65
    x67 = 2.0 * ax * x66 - x57 - x62
    x68 = x1 * x3
    x69 = x2 * (x48 + x63)
    x70 = x5 * x58
    x71 = x69 + x70
    x72 = x10 * (2.0 * ax * x71 - x49)
    x73 = x52 + x60 + x72
    x74 = 4.0 * x21 * x28 + 2.0 * x56
    x75 = x2 * (2.0 * x41 + 2.0 * x42 + x74) + x5 * x71
    x76 = (
        x10 * (2.0 * ax * x75 - x74)
        + x2 * (x35 * x58 + 2.0 * x38 + 2.0 * x40 + x44 * x68 + 2.0 * x53 + 2.0 * x55)
        + x5 * x73
    )
    x77 = 3.0 * x69 + 3.0 * x70
    x78 = x2 * (2.0 * x64 + 2.0 * x65 + x77) + x5 * x75
    x79 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x80 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x81 = 3.14159265358979 * x3 * x80
    x82 = x79 * x81
    x83 = -x3 * (ax * A[1] + bx * B[1])
    x84 = -x83 - A[1]
    x85 = x84**2
    x86 = -x6 - x8 * (x2 + x85)
    x87 = x78 * x82
    x88 = -x3 * (ax * A[2] + bx * B[2])
    x89 = -x88 - A[2]
    x90 = x89**2
    x91 = -x6 - x8 * (x2 + x90)
    x92 = 0.179587122125167 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**3.5)
    x93 = 10.1992841329868 * x92
    x94 = -x83 - B[1]
    x95 = x13 * x79
    x96 = x94 * x95
    x97 = x86 * x96
    x98 = x17 * x96 + x97
    x99 = x5 * (x22 + x57)
    x100 = 3.0 * x41 + 3.0 * x42
    x101 = x2 * (x100 + x99) + x5 * x66
    x102 = x13 * x80
    x103 = x25 + x26
    x104 = x10 * (x0 * x99 - 2.0 * x15) + x103 * x5 + x2 * (x15 * x35 + 2.0 * x16)
    x105 = x10 * x67 + x37 + x47
    x106 = x82 * (
        x10 * (2.0 * ax * x101 - x100)
        + x105 * x5
        + x2 * (x104 + 3.0 * x38 + 3.0 * x40 + 3.0 * x45)
    )
    x107 = x101 * x82
    x108 = 17.6656783191643 * x92
    x109 = -x88 - B[2]
    x110 = x102 * x109
    x111 = x110 * x91
    x112 = x110 * x17 + x111
    x113 = x2 * x95
    x114 = x113 * x86
    x115 = x94**2 * x95
    x116 = x113 + x115
    x117 = -x95
    x118 = x50 * (x1 * x116 + x117) + x94 * x98
    x119 = x114 + x118
    x120 = 3.0 * x20 + x61
    x121 = x120 * x2 + x5 * x99
    x122 = x102 * x121
    x123 = x10 * (2.0 * ax * x121 - x120) + x104 * x5 + x2 * (3.0 * x19 + 3.0 * x24 + x27)
    x124 = x109 * x82
    x125 = x102 * x2
    x126 = x125 * x91
    x127 = x102 * x109**2
    x128 = x125 + x127
    x129 = -x102
    x130 = x109 * x112 + x50 * (x1 * x128 + x129)
    x131 = x126 + x130
    x132 = x121 * x95
    x133 = x84 * x95
    x134 = x133 * x86
    x135 = x133 * x17 + x134
    x136 = x76 * x82
    x137 = x75 * x82
    x138 = 26.9847693667702 * x92
    x139 = x84 * x98
    x140 = x133 * x94
    x141 = x113 + x140
    x142 = x114 + x139 + x141 * x17
    x143 = x102 * x66
    x144 = 46.7389915737742 * x92
    x145 = x2 * (x35 * x96 + 2.0 * x97)
    x146 = x119 * x84
    x147 = x116 * x84
    x148 = 2.0 * x113
    x149 = x147 + x148 * x94
    x150 = x145 + x146 + x149 * x17
    x151 = x102 * x99
    x152 = x102 * x89
    x153 = x152 * x91
    x154 = x152 * x17 + x153
    x155 = x82 * x89
    x156 = x112 * x89
    x157 = x109 * x152
    x158 = x125 + x157
    x159 = x126 + x156 + x158 * x17
    x160 = x66 * x95
    x161 = x2 * (x110 * x35 + 2.0 * x111)
    x162 = x131 * x89
    x163 = x128 * x89
    x164 = 2.0 * x125
    x165 = x109 * x164 + x163
    x166 = x161 + x162 + x165 * x17
    x167 = x95 * x99
    x168 = x135 * x84
    x169 = x85 * x95
    x170 = x113 + x169
    x171 = x10 * (x0 * x170 + x117)
    x172 = x168 + x171
    x173 = x114 + x172
    x174 = x102 * x71
    x175 = 34.8371874529163 * x92
    x176 = x2 * (x135 + x98)
    x177 = x142 * x84
    x178 = x2 * (x133 + x96)
    x179 = x141 * x84
    x180 = x178 + x179
    x181 = x0 * x180 - x96
    x182 = x10 * x181
    x183 = x176 + x177 + x182
    x184 = x102 * x43
    x185 = 60.3397786612521 * x92
    x186 = 3.0 * x113
    x187 = 2.0 * x140
    x188 = x186 + x187
    x189 = x2 * (x115 + x188)
    x190 = x149 * x84
    x191 = x189 + x190
    x192 = x102 * x191
    x193 = 3.0 * x114
    x194 = 2.0 * x139 + x141 * x35 + x193
    x195 = x2 * (x118 + x194)
    x196 = x150 * x84
    x197 = x10 * (2.0 * ax * x191 - x116)
    x198 = x195 + x196 + x197
    x199 = 60.3397786612521 * x92
    x200 = 104.511562358749 * x92
    x201 = x154 * x89
    x202 = x102 * x90
    x203 = x125 + x202
    x204 = x10 * (x0 * x203 + x129)
    x205 = x201 + x204
    x206 = x126 + x205
    x207 = x71 * x95
    x208 = x2 * (x112 + x154)
    x209 = x159 * x89
    x210 = x2 * (x110 + x152)
    x211 = x158 * x89
    x212 = x210 + x211
    x213 = x0 * x212 - x110
    x214 = x10 * x213
    x215 = x208 + x209 + x214
    x216 = x43 * x95
    x217 = 3.0 * x125
    x218 = 2.0 * x157
    x219 = x217 + x218
    x220 = x2 * (x127 + x219)
    x221 = x165 * x89
    x222 = x220 + x221
    x223 = x222 * x95
    x224 = 3.0 * x126
    x225 = 2.0 * x156 + x158 * x35 + x224
    x226 = x2 * (x130 + x225)
    x227 = x166 * x89
    x228 = x10 * (2.0 * ax * x222 - x128)
    x229 = x226 + x227 + x228
    x230 = x84 * (x148 + x170)
    x231 = x10 * (x0 * x230 - 2.0 * x133) + x173 * x84 + x2 * (x133 * x35 + 2.0 * x134)
    x232 = x102 * x58
    x233 = x2 * (x169 + x188)
    x234 = x180 * x84
    x235 = x233 + x234
    x236 = x102 * x235
    x237 = x2 * (x172 + x194)
    x238 = x183 * x84
    x239 = 2.0 * ax * x235 - x148 - x187
    x240 = x10 * x239 + x237 + x238
    x241 = 4.0 * x113 * x94 + 2.0 * x147
    x242 = x191 * x84 + x2 * (2.0 * x178 + 2.0 * x179 + x241)
    x243 = (
        x10 * (2.0 * ax * x242 - x241)
        + x198 * x84
        + x2
        * (2.0 * x145 + 2.0 * x146 + x149 * x35 + 2.0 * x176 + 2.0 * x177 + x181 * x68)
    )
    x244 = x12 * x81
    x245 = x243 * x244
    x246 = x244 * x5
    x247 = 3.14159265358979 * x12 * x3 * x79
    x248 = x247 * x5
    x249 = x89 * (x164 + x203)
    x250 = x10 * (x0 * x249 - 2.0 * x152) + x2 * (x152 * x35 + 2.0 * x153) + x206 * x89
    x251 = x58 * x95
    x252 = x2 * (x202 + x219)
    x253 = x212 * x89
    x254 = x252 + x253
    x255 = x254 * x95
    x256 = x2 * (x205 + x225)
    x257 = x215 * x89
    x258 = 2.0 * ax * x254 - x164 - x218
    x259 = x10 * x258 + x256 + x257
    x260 = 4.0 * x109 * x125 + 2.0 * x163
    x261 = x2 * (2.0 * x210 + 2.0 * x211 + x260) + x222 * x89
    x262 = (
        x10 * (2.0 * ax * x261 - x260)
        + x2
        * (2.0 * x161 + 2.0 * x162 + x165 * x35 + 2.0 * x208 + 2.0 * x209 + x213 * x68)
        + x229 * x89
    )
    x263 = x247 * x262
    x264 = 3.0 * x169 + x186
    x265 = x2 * x264 + x230 * x84
    x266 = x102 * x265
    x267 = (
        x10 * (2.0 * ax * x265 - x264)
        + x2 * (3.0 * x168 + 3.0 * x171 + x193)
        + x231 * x84
    )
    x268 = 3.0 * x178 + 3.0 * x179
    x269 = x2 * (x230 + x268) + x235 * x84
    x270 = x244 * (
        x10 * (2.0 * ax * x269 - x268)
        + x2 * (3.0 * x176 + 3.0 * x177 + 3.0 * x182 + x231)
        + x240 * x84
    )
    x271 = x244 * x28
    x272 = 3.0 * x189 + 3.0 * x190
    x273 = x2 * (2.0 * x233 + 2.0 * x234 + x272) + x242 * x84
    x274 = x244 * x273
    x275 = x244 * x9
    x276 = x14 * x265
    x277 = x14 * x235
    x278 = x14 * x230
    x279 = x14 * x191
    x280 = x14 * x180
    x281 = x14 * x222
    x282 = x247 * x84
    x283 = x14 * x149
    x284 = x14 * x254
    x285 = 3.0 * x202 + x217
    x286 = x2 * x285 + x249 * x89
    x287 = x286 * x95
    x288 = (
        x10 * (2.0 * ax * x286 - x285)
        + x2 * (3.0 * x201 + 3.0 * x204 + x224)
        + x250 * x89
    )
    x289 = x247 * x28
    x290 = 3.0 * x210 + 3.0 * x211
    x291 = x2 * (x249 + x290) + x254 * x89
    x292 = x247 * (
        x10 * (2.0 * ax * x291 - x290)
        + x2 * (3.0 * x208 + 3.0 * x209 + 3.0 * x214 + x250)
        + x259 * x89
    )
    x293 = x14 * x286
    x294 = 3.0 * x220 + 3.0 * x221
    x295 = x2 * (2.0 * x252 + 2.0 * x253 + x294) + x261 * x89
    x296 = x247 * x295

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x93
        * (
            x82
            * (
                x10 * (2.0 * ax * x78 - x77)
                + x2
                * (2.0 * x37 + 2.0 * x47 + 3.0 * x52 + 3.0 * x60 + x67 * x68 + 3.0 * x72)
                + x5 * x76
            )
            + x86 * x87
            + x87 * x91
        )
    )
    result[0, 1] = numpy.sum(x108 * (x101 * x102 * x98 + x106 * x94 + x107 * x91 * x94))
    result[0, 2] = numpy.sum(x108 * (x101 * x112 * x95 + x106 * x109 + x107 * x109 * x86))
    result[0, 3] = numpy.sum(x93 * (x102 * x116 * x123 + x116 * x122 * x91 + x119 * x122))
    result[0, 4] = numpy.sum(
        x108 * (x110 * x121 * x98 + x112 * x121 * x96 + x123 * x124 * x94)
    )
    result[0, 5] = numpy.sum(x93 * (x123 * x128 * x95 + x128 * x132 * x86 + x131 * x132))
    result[1, 0] = numpy.sum(x138 * (x102 * x135 * x75 + x136 * x84 + x137 * x84 * x91))
    result[1, 1] = numpy.sum(
        x144 * (x102 * x105 * x141 + x141 * x143 * x91 + x142 * x143)
    )
    result[1, 2] = numpy.sum(
        x144 * (x105 * x124 * x84 + x110 * x135 * x66 + x112 * x133 * x66)
    )
    result[1, 3] = numpy.sum(
        x138 * (x102 * x104 * x149 + x149 * x151 * x91 + x150 * x151)
    )
    result[1, 4] = numpy.sum(
        x144 * (x104 * x110 * x141 + x110 * x142 * x99 + x112 * x141 * x99)
    )
    result[1, 5] = numpy.sum(
        x138 * (x104 * x128 * x133 + x128 * x135 * x99 + x131 * x133 * x99)
    )
    result[2, 0] = numpy.sum(x138 * (x136 * x89 + x137 * x86 * x89 + x154 * x75 * x95))
    result[2, 1] = numpy.sum(
        x144 * (x105 * x155 * x94 + x152 * x66 * x98 + x154 * x66 * x96)
    )
    result[2, 2] = numpy.sum(x144 * (x105 * x158 * x95 + x158 * x160 * x86 + x159 * x160))
    result[2, 3] = numpy.sum(
        x138 * (x104 * x116 * x152 + x116 * x154 * x99 + x119 * x152 * x99)
    )
    result[2, 4] = numpy.sum(
        x144 * (x104 * x158 * x96 + x158 * x98 * x99 + x159 * x96 * x99)
    )
    result[2, 5] = numpy.sum(x138 * (x104 * x165 * x95 + x165 * x167 * x86 + x166 * x167))
    result[3, 0] = numpy.sum(x175 * (x102 * x170 * x73 + x170 * x174 * x91 + x173 * x174))
    result[3, 1] = numpy.sum(x185 * (x102 * x180 * x46 + x180 * x184 * x91 + x183 * x184))
    result[3, 2] = numpy.sum(
        x185 * (x110 * x170 * x46 + x110 * x173 * x43 + x112 * x170 * x43)
    )
    result[3, 3] = numpy.sum(x175 * (x102 * x198 * x22 + x103 * x192 + x192 * x22 * x91))
    result[3, 4] = numpy.sum(
        x185 * (x103 * x110 * x180 + x110 * x183 * x22 + x112 * x180 * x22)
    )
    result[3, 5] = numpy.sum(
        x175 * (x103 * x128 * x170 + x128 * x173 * x22 + x131 * x170 * x22)
    )
    result[4, 0] = numpy.sum(
        x199 * (x133 * x154 * x71 + x135 * x152 * x71 + x155 * x73 * x84)
    )
    result[4, 1] = numpy.sum(
        x200 * (x141 * x152 * x46 + x141 * x154 * x43 + x142 * x152 * x43)
    )
    result[4, 2] = numpy.sum(
        x200 * (x133 * x158 * x46 + x133 * x159 * x43 + x135 * x158 * x43)
    )
    result[4, 3] = numpy.sum(
        x199 * (x103 * x149 * x152 + x149 * x154 * x22 + x150 * x152 * x22)
    )
    result[4, 4] = numpy.sum(
        x200 * (x103 * x141 * x158 + x141 * x159 * x22 + x142 * x158 * x22)
    )
    result[4, 5] = numpy.sum(
        x199 * (x103 * x133 * x165 + x133 * x166 * x22 + x135 * x165 * x22)
    )
    result[5, 0] = numpy.sum(x175 * (x203 * x207 * x86 + x203 * x73 * x95 + x206 * x207))
    result[5, 1] = numpy.sum(
        x185 * (x203 * x43 * x98 + x203 * x46 * x96 + x206 * x43 * x96)
    )
    result[5, 2] = numpy.sum(x185 * (x212 * x216 * x86 + x212 * x46 * x95 + x215 * x216))
    result[5, 3] = numpy.sum(
        x175 * (x103 * x116 * x203 + x116 * x206 * x22 + x119 * x203 * x22)
    )
    result[5, 4] = numpy.sum(
        x185 * (x103 * x212 * x96 + x212 * x22 * x98 + x215 * x22 * x96)
    )
    result[5, 5] = numpy.sum(x175 * (x103 * x223 + x22 * x223 * x86 + x22 * x229 * x95))
    result[6, 0] = numpy.sum(x138 * (x102 * x230 * x59 + x230 * x232 * x91 + x231 * x232))
    result[6, 1] = numpy.sum(x144 * (x102 * x240 * x34 + x236 * x34 * x91 + x236 * x39))
    result[6, 2] = numpy.sum(
        x144 * (x110 * x230 * x39 + x110 * x231 * x34 + x112 * x230 * x34)
    )
    result[6, 3] = numpy.sum(x138 * (x102 * x18 * x242 + x242 * x246 * x91 + x245 * x5))
    result[6, 4] = numpy.sum(
        x144 * (x109 * x240 * x246 + x110 * x18 * x235 + x112 * x15 * x235)
    )
    result[6, 5] = numpy.sum(
        x138 * (x128 * x15 * x231 + x128 * x18 * x230 + x131 * x15 * x230)
    )
    result[7, 0] = numpy.sum(
        x199 * (x152 * x170 * x59 + x152 * x173 * x58 + x154 * x170 * x58)
    )
    result[7, 1] = numpy.sum(
        x200 * (x152 * x180 * x39 + x152 * x183 * x34 + x154 * x180 * x34)
    )
    result[7, 2] = numpy.sum(
        x200 * (x158 * x170 * x39 + x158 * x173 * x34 + x159 * x170 * x34)
    )
    result[7, 3] = numpy.sum(
        x199 * (x15 * x154 * x191 + x152 * x18 * x191 + x198 * x246 * x89)
    )
    result[7, 4] = numpy.sum(
        x200 * (x15 * x158 * x183 + x15 * x159 * x180 + x158 * x18 * x180)
    )
    result[7, 5] = numpy.sum(
        x199 * (x15 * x165 * x173 + x15 * x166 * x170 + x165 * x170 * x18)
    )
    result[8, 0] = numpy.sum(
        x199 * (x133 * x203 * x59 + x133 * x206 * x58 + x135 * x203 * x58)
    )
    result[8, 1] = numpy.sum(
        x200 * (x141 * x203 * x39 + x141 * x206 * x34 + x142 * x203 * x34)
    )
    result[8, 2] = numpy.sum(
        x200 * (x133 * x212 * x39 + x133 * x215 * x34 + x135 * x212 * x34)
    )
    result[8, 3] = numpy.sum(
        x199 * (x149 * x15 * x206 + x149 * x18 * x203 + x15 * x150 * x203)
    )
    result[8, 4] = numpy.sum(
        x200 * (x141 * x15 * x215 + x141 * x18 * x212 + x142 * x15 * x212)
    )
    result[8, 5] = numpy.sum(
        x199 * (x133 * x18 * x222 + x135 * x15 * x222 + x229 * x248 * x84)
    )
    result[9, 0] = numpy.sum(x138 * (x249 * x251 * x86 + x249 * x59 * x95 + x250 * x251))
    result[9, 1] = numpy.sum(
        x144 * (x249 * x34 * x98 + x249 * x39 * x96 + x250 * x34 * x96)
    )
    result[9, 2] = numpy.sum(x144 * (x255 * x34 * x86 + x255 * x39 + x259 * x34 * x95))
    result[9, 3] = numpy.sum(
        x138 * (x116 * x15 * x250 + x116 * x18 * x249 + x119 * x15 * x249)
    )
    result[9, 4] = numpy.sum(
        x144 * (x15 * x254 * x98 + x18 * x254 * x96 + x248 * x259 * x94)
    )
    result[9, 5] = numpy.sum(x138 * (x18 * x261 * x95 + x248 * x261 * x86 + x263 * x5))
    result[10, 0] = numpy.sum(x93 * (x102 * x267 * x49 + x266 * x49 * x91 + x266 * x54))
    result[10, 1] = numpy.sum(x108 * (x102 * x269 * x31 + x269 * x271 * x91 + x270 * x28))
    result[10, 2] = numpy.sum(
        x108 * (x109 * x267 * x271 + x110 * x265 * x31 + x112 * x265 * x29)
    )
    result[10, 3] = numpy.sum(
        x93
        * (
            x244
            * (
                x10 * (2.0 * ax * x273 - x272)
                + x2
                * (
                    3.0 * x195
                    + 3.0 * x196
                    + 3.0 * x197
                    + 2.0 * x237
                    + 2.0 * x238
                    + x239 * x68
                )
                + x243 * x84
            )
            + x274 * x9
            + x274 * x91
        )
    )
    result[10, 4] = numpy.sum(
        x108 * (x109 * x269 * x275 + x109 * x270 + x112 * x14 * x269)
    )
    result[10, 5] = numpy.sum(x93 * (x128 * x14 * x267 + x128 * x276 * x9 + x131 * x276))
    result[11, 0] = numpy.sum(
        x138 * (x152 * x230 * x54 + x152 * x231 * x49 + x154 * x230 * x49)
    )
    result[11, 1] = numpy.sum(
        x144 * (x152 * x235 * x31 + x154 * x235 * x29 + x240 * x271 * x89)
    )
    result[11, 2] = numpy.sum(
        x144 * (x158 * x230 * x31 + x158 * x231 * x29 + x159 * x230 * x29)
    )
    result[11, 3] = numpy.sum(x138 * (x14 * x154 * x242 + x242 * x275 * x89 + x245 * x89))
    result[11, 4] = numpy.sum(x144 * (x14 * x158 * x240 + x158 * x277 * x9 + x159 * x277))
    result[11, 5] = numpy.sum(x138 * (x14 * x165 * x231 + x165 * x278 * x9 + x166 * x278))
    result[12, 0] = numpy.sum(
        x175 * (x170 * x203 * x54 + x170 * x206 * x49 + x173 * x203 * x49)
    )
    result[12, 1] = numpy.sum(
        x185 * (x180 * x203 * x31 + x180 * x206 * x29 + x183 * x203 * x29)
    )
    result[12, 2] = numpy.sum(
        x185 * (x170 * x212 * x31 + x170 * x215 * x29 + x173 * x212 * x29)
    )
    result[12, 3] = numpy.sum(x175 * (x14 * x198 * x203 + x203 * x279 * x9 + x206 * x279))
    result[12, 4] = numpy.sum(x185 * (x14 * x183 * x212 + x212 * x280 * x9 + x215 * x280))
    result[12, 5] = numpy.sum(x175 * (x14 * x170 * x229 + x170 * x281 * x9 + x173 * x281))
    result[13, 0] = numpy.sum(
        x138 * (x133 * x249 * x54 + x133 * x250 * x49 + x135 * x249 * x49)
    )
    result[13, 1] = numpy.sum(
        x144 * (x141 * x249 * x31 + x141 * x250 * x29 + x142 * x249 * x29)
    )
    result[13, 2] = numpy.sum(
        x144 * (x133 * x254 * x31 + x135 * x254 * x29 + x259 * x28 * x282)
    )
    result[13, 3] = numpy.sum(x138 * (x14 * x150 * x249 + x249 * x283 * x9 + x250 * x283))
    result[13, 4] = numpy.sum(x144 * (x14 * x141 * x259 + x141 * x284 * x9 + x142 * x284))
    result[13, 5] = numpy.sum(x138 * (x135 * x14 * x261 + x261 * x282 * x9 + x263 * x84))
    result[14, 0] = numpy.sum(x93 * (x287 * x49 * x86 + x287 * x54 + x288 * x49 * x95))
    result[14, 1] = numpy.sum(
        x108 * (x286 * x29 * x98 + x286 * x31 * x96 + x288 * x289 * x94)
    )
    result[14, 2] = numpy.sum(x108 * (x28 * x292 + x289 * x291 * x86 + x291 * x31 * x95))
    result[14, 3] = numpy.sum(x93 * (x116 * x14 * x288 + x116 * x293 * x9 + x119 * x293))
    result[14, 4] = numpy.sum(
        x108 * (x14 * x291 * x98 + x247 * x291 * x9 * x94 + x292 * x94)
    )
    result[14, 5] = numpy.sum(
        x93
        * (
            x247
            * (
                x10 * (2.0 * ax * x295 - x294)
                + x2
                * (
                    3.0 * x226
                    + 3.0 * x227
                    + 3.0 * x228
                    + 2.0 * x256
                    + 2.0 * x257
                    + x258 * x68
                )
                + x262 * x89
            )
            + x296 * x86
            + x296 * x9
        )
    )
    return result


def kinetic3d_43(ax, da, A, bx, db, B):
    """Cartesian 3D (gf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = ax * x3
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.77245385090552 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x2
    x16 = x15 * x9
    x17 = -x4 - B[0]
    x18 = x14 * x17
    x19 = x18 * x9
    x20 = bx * x3
    x21 = x0 * x20
    x22 = x18 * x21 + x19
    x23 = x17 * x22
    x24 = x14 * x17**2
    x25 = x15 + x24
    x26 = -x14
    x27 = x10 * (x1 * x25 + x26)
    x28 = x23 + x27
    x29 = x16 + x28
    x30 = x29 * x5
    x31 = 4.0 * x11
    x32 = x2 * (x18 * x31 + 2.0 * x19)
    x33 = x25 * x5
    x34 = 2.0 * x15
    x35 = x17 * x34
    x36 = x33 + x35
    x37 = x11 * x36
    x38 = x17 * x25
    x39 = x35 + x38
    x40 = x10 * (x1 * x39 - 2.0 * x18) + x17 * x29
    x41 = x2 * (3.0 * x30 + 4.0 * x32 + 6.0 * x37 + x40)
    x42 = x14 * x5
    x43 = x42 * x9
    x44 = x21 * x42 + x43
    x45 = x2 * (x22 + x44)
    x46 = x22 * x5
    x47 = x17 * x42
    x48 = x15 + x47
    x49 = x16 + x21 * x48 + x46
    x50 = x49 * x5
    x51 = x2 * (x18 + x42)
    x52 = x48 * x5
    x53 = x51 + x52
    x54 = x0 * x53 - x18
    x55 = x1 * x3
    x56 = x2 * (2.0 * x30 + 2.0 * x32 + 4.0 * x37 + 2.0 * x45 + 2.0 * x50 + x54 * x55)
    x57 = 3.0 * x16
    x58 = x2 * (3.0 * x23 + 3.0 * x27 + x57)
    x59 = x32 + x40
    x60 = x5 * x59
    x61 = 3.0 * x15
    x62 = x2 * (3.0 * x24 + x61)
    x63 = x39 * x5
    x64 = x62 + x63
    x65 = x21 * x64 + x58 + x60
    x66 = x5 * x65
    x67 = x31 * x48 + 2.0 * x46 + x57
    x68 = x2 * (x28 + x67)
    x69 = x21 * x36 + x30 + x32
    x70 = x5 * x69
    x71 = 2.0 * x47
    x72 = x61 + x71
    x73 = x2 * (x24 + x72)
    x74 = x36 * x5
    x75 = x73 + x74
    x76 = x20 * (2.0 * ax * x75 - x25)
    x77 = x68 + x70 + x76
    x78 = x5 * x77
    x79 = x15 * x17
    x80 = x2 * (3.0 * x33 + x38 + 8.0 * x79)
    x81 = x5 * x64
    x82 = x80 + x81
    x83 = x20 * (2.0 * ax * x82 - x39)
    x84 = 2.0 * x33 + 4.0 * x79
    x85 = x2 * (2.0 * x51 + 2.0 * x52 + x84)
    x86 = x5 * x75
    x87 = x85 + x86
    x88 = x20 * (2.0 * ax * x87 - x84)
    x89 = 3.0 * x68 + 3.0 * x70 + 3.0 * x76
    x90 = x41 + x66 + x83
    x91 = 2.0 * x62 + 2.0 * x63
    x92 = 3.0 * x73 + 3.0 * x74
    x93 = x2 * (x91 + x92) + x5 * x82
    x94 = (
        x2 * (x31 * x64 + 2.0 * x58 + 2.0 * x60 + x89)
        + x20 * (2.0 * ax * x93 - x91)
        + x5 * x90
    )
    x95 = 3.0 * x80 + 3.0 * x81
    x96 = x2 * (3.0 * x85 + 3.0 * x86 + x95) + x5 * x93
    x97 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x98 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x99 = 3.14159265358979 * x3 * x98
    x100 = x97 * x99
    x101 = -x3 * (ax * A[1] + bx * B[1])
    x102 = -x101 - A[1]
    x103 = x102**2
    x104 = -x6 - x8 * (x103 + x2)
    x105 = x100 * x96
    x106 = -x3 * (ax * A[2] + bx * B[2])
    x107 = -x106 - A[2]
    x108 = x107**2
    x109 = -x6 - x8 * (x108 + x2)
    x110 = 0.179587122125167 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**4.5)
    x111 = 9.12251705727742 * x110
    x112 = -x101 - B[1]
    x113 = x13 * x97
    x114 = x112 * x113
    x115 = x104 * x114
    x116 = x114 * x21 + x115
    x117 = x14 * x7
    x118 = x2 * (x117 + x72)
    x119 = x5 * x53
    x120 = x2 * (2.0 * x118 + 2.0 * x119 + x92) + x5 * x87
    x121 = x13 * x98
    x122 = x44 * x5
    x123 = x117 + x15
    x124 = x20 * (x0 * x123 + x26)
    x125 = x122 + x124
    x126 = x2 * (x125 + x67)
    x127 = x20 * x54
    x128 = x127 + x45 + x50
    x129 = x128 * x5
    x130 = x118 + x119
    x131 = 2.0 * ax * x130 - x34 - x71
    x132 = x56 + x78 + x88
    x133 = x100 * (
        x132 * x5
        + x2 * (2.0 * x126 + 2.0 * x129 + x131 * x55 + x89)
        + x20 * (2.0 * ax * x120 - x92)
    )
    x134 = x100 * x120
    x135 = 20.3985682659737 * x110
    x136 = -x106 - B[2]
    x137 = x121 * x136
    x138 = x109 * x137
    x139 = x137 * x21 + x138
    x140 = x113 * x2
    x141 = x104 * x140
    x142 = x112 * x116
    x143 = x112**2 * x113
    x144 = x140 + x143
    x145 = -x113
    x146 = x10 * (x1 * x144 + x145)
    x147 = x142 + x146
    x148 = x141 + x147
    x149 = x5 * (x123 + x34)
    x150 = 3.0 * x51 + 3.0 * x52
    x151 = x130 * x5 + x2 * (x149 + x150)
    x152 = x121 * x151
    x153 = x125 + x16
    x154 = x153 * x5 + x2 * (x31 * x42 + 2.0 * x43) + x20 * (x0 * x149 - 2.0 * x42)
    x155 = x126 + x129 + x131 * x20
    x156 = (
        x155 * x5
        + x2 * (3.0 * x127 + x154 + 3.0 * x45 + 3.0 * x50)
        + x20 * (2.0 * ax * x151 - x150)
    )
    x157 = x100 * x136
    x158 = 35.3313566383285 * x110
    x159 = x121 * x2
    x160 = x109 * x159
    x161 = x136 * x139
    x162 = x121 * x136**2
    x163 = x159 + x162
    x164 = -x121
    x165 = x10 * (x1 * x163 + x164)
    x166 = x161 + x165
    x167 = x160 + x166
    x168 = x113 * x151
    x169 = x2 * (x114 * x31 + 2.0 * x115)
    x170 = x112 * x144
    x171 = 2.0 * x140
    x172 = x112 * x171
    x173 = x170 + x172
    x174 = x10 * (x1 * x173 - 2.0 * x114) + x112 * x148
    x175 = x169 + x174
    x176 = 3.0 * x117 + x61
    x177 = x149 * x5 + x176 * x2
    x178 = x121 * x177
    x179 = (
        x154 * x5 + x2 * (3.0 * x122 + 3.0 * x124 + x57) + x20 * (2.0 * ax * x177 - x176)
    )
    x180 = x2 * (x137 * x31 + 2.0 * x138)
    x181 = x136 * x163
    x182 = 2.0 * x159
    x183 = x136 * x182
    x184 = x181 + x183
    x185 = x10 * (x1 * x184 - 2.0 * x137) + x136 * x167
    x186 = x180 + x185
    x187 = x113 * x177
    x188 = x102 * x113
    x189 = x104 * x188
    x190 = x188 * x21 + x189
    x191 = x100 * x94
    x192 = x100 * x93
    x193 = 24.1359114645008 * x110
    x194 = x102 * x116
    x195 = x112 * x188
    x196 = x140 + x195
    x197 = x141 + x194 + x196 * x21
    x198 = x121 * x87
    x199 = 53.9695387335403 * x110
    x200 = x102 * x148
    x201 = x102 * x144
    x202 = x172 + x201
    x203 = x169 + x200 + x202 * x21
    x204 = x121 * x130
    x205 = 93.4779831475484 * x110
    x206 = 3.0 * x140
    x207 = x2 * (3.0 * x143 + x206)
    x208 = x102 * x173
    x209 = x207 + x208
    x210 = x121 * x209
    x211 = 3.0 * x141
    x212 = x2 * (3.0 * x142 + 3.0 * x146 + x211)
    x213 = x102 * x175
    x214 = x209 * x21 + x212 + x213
    x215 = x107 * x121
    x216 = x109 * x215
    x217 = x21 * x215 + x216
    x218 = x100 * x107
    x219 = x107 * x139
    x220 = x136 * x215
    x221 = x159 + x220
    x222 = x160 + x21 * x221 + x219
    x223 = x113 * x87
    x224 = x107 * x167
    x225 = x107 * x163
    x226 = x183 + x225
    x227 = x180 + x21 * x226 + x224
    x228 = x113 * x130
    x229 = 3.0 * x159
    x230 = x2 * (3.0 * x162 + x229)
    x231 = x107 * x184
    x232 = x230 + x231
    x233 = x113 * x232
    x234 = 3.0 * x160
    x235 = x2 * (3.0 * x161 + 3.0 * x165 + x234)
    x236 = x107 * x186
    x237 = x21 * x232 + x235 + x236
    x238 = x102 * x190
    x239 = x103 * x113
    x240 = x140 + x239
    x241 = x20 * (x0 * x240 + x145)
    x242 = x238 + x241
    x243 = x141 + x242
    x244 = x121 * x82
    x245 = 31.1593277158494 * x110
    x246 = x2 * (x114 + x188)
    x247 = x102 * x196
    x248 = x246 + x247
    x249 = x121 * x248
    x250 = x2 * (x116 + x190)
    x251 = x102 * x197
    x252 = x0 * x248 - x114
    x253 = x20 * x252
    x254 = x250 + x251 + x253
    x255 = 69.6743749058326 * x110
    x256 = 2.0 * x194 + x196 * x31 + x211
    x257 = x2 * (x147 + x256)
    x258 = x102 * x203
    x259 = 2.0 * x195
    x260 = x206 + x259
    x261 = x2 * (x143 + x260)
    x262 = x102 * x202
    x263 = x261 + x262
    x264 = x20 * (2.0 * ax * x263 - x144)
    x265 = x257 + x258 + x264
    x266 = x121 * x53
    x267 = 120.679557322504 * x110
    x268 = x112 * x140
    x269 = x2 * (x170 + 3.0 * x201 + 8.0 * x268)
    x270 = x102 * x209
    x271 = x269 + x270
    x272 = x121 * x271
    x273 = 6.0 * x11
    x274 = x2 * (4.0 * x169 + x174 + 3.0 * x200 + x202 * x273)
    x275 = x102 * x214
    x276 = x20 * (2.0 * ax * x271 - x173)
    x277 = x274 + x275 + x276
    x278 = 120.679557322504 * x110
    x279 = 209.023124717498 * x110
    x280 = x107 * x217
    x281 = x108 * x121
    x282 = x159 + x281
    x283 = x20 * (x0 * x282 + x164)
    x284 = x280 + x283
    x285 = x160 + x284
    x286 = x113 * x82
    x287 = x2 * (x137 + x215)
    x288 = x107 * x221
    x289 = x287 + x288
    x290 = x113 * x289
    x291 = x2 * (x139 + x217)
    x292 = x107 * x222
    x293 = x0 * x289 - x137
    x294 = x20 * x293
    x295 = x291 + x292 + x294
    x296 = 2.0 * x219 + x221 * x31 + x234
    x297 = x2 * (x166 + x296)
    x298 = x107 * x227
    x299 = 2.0 * x220
    x300 = x229 + x299
    x301 = x2 * (x162 + x300)
    x302 = x107 * x226
    x303 = x301 + x302
    x304 = x20 * (2.0 * ax * x303 - x163)
    x305 = x297 + x298 + x304
    x306 = x113 * x53
    x307 = x136 * x159
    x308 = x2 * (x181 + 3.0 * x225 + 8.0 * x307)
    x309 = x107 * x232
    x310 = x308 + x309
    x311 = x113 * x310
    x312 = x2 * (4.0 * x180 + x185 + 3.0 * x224 + x226 * x273)
    x313 = x107 * x237
    x314 = x20 * (2.0 * ax * x310 - x184)
    x315 = x312 + x313 + x314
    x316 = x102 * (x171 + x240)
    x317 = x102 * x243 + x2 * (x188 * x31 + 2.0 * x189) + x20 * (x0 * x316 - 2.0 * x188)
    x318 = x121 * x64
    x319 = x2 * (x239 + x260)
    x320 = x102 * x248
    x321 = x319 + x320
    x322 = x121 * x321
    x323 = x2 * (x242 + x256)
    x324 = x102 * x254
    x325 = 2.0 * ax * x321 - x171 - x259
    x326 = x20 * x325 + x323 + x324
    x327 = 2.0 * x201 + 4.0 * x268
    x328 = x2 * (2.0 * x246 + 2.0 * x247 + x327)
    x329 = x102 * x263
    x330 = x328 + x329
    x331 = x121 * x330
    x332 = x2 * (
        2.0 * x169 + 2.0 * x200 + x202 * x31 + 2.0 * x250 + 2.0 * x251 + x252 * x55
    )
    x333 = x102 * x265
    x334 = x20 * (2.0 * ax * x330 - x327)
    x335 = x332 + x333 + x334
    x336 = 2.0 * x207 + 2.0 * x208
    x337 = 3.0 * x261 + 3.0 * x262
    x338 = x102 * x271 + x2 * (x336 + x337)
    x339 = 3.0 * x257 + 3.0 * x258 + 3.0 * x264
    x340 = (
        x102 * x277
        + x2 * (x209 * x31 + 2.0 * x212 + 2.0 * x213 + x339)
        + x20 * (2.0 * ax * x338 - x336)
    )
    x341 = x12 * x99
    x342 = x340 * x341
    x343 = x341 * x5
    x344 = 3.14159265358979 * x12 * x3 * x97
    x345 = x344 * x5
    x346 = x107 * (x182 + x282)
    x347 = x107 * x285 + x2 * (x215 * x31 + 2.0 * x216) + x20 * (x0 * x346 - 2.0 * x215)
    x348 = x113 * x64
    x349 = x2 * (x281 + x300)
    x350 = x107 * x289
    x351 = x349 + x350
    x352 = x113 * x351
    x353 = x2 * (x284 + x296)
    x354 = x107 * x295
    x355 = 2.0 * ax * x351 - x182 - x299
    x356 = x20 * x355 + x353 + x354
    x357 = 2.0 * x225 + 4.0 * x307
    x358 = x2 * (2.0 * x287 + 2.0 * x288 + x357)
    x359 = x107 * x303
    x360 = x358 + x359
    x361 = x113 * x360
    x362 = x2 * (
        2.0 * x180 + 2.0 * x224 + x226 * x31 + 2.0 * x291 + 2.0 * x292 + x293 * x55
    )
    x363 = x107 * x305
    x364 = x20 * (2.0 * ax * x360 - x357)
    x365 = x362 + x363 + x364
    x366 = 2.0 * x230 + 2.0 * x231
    x367 = 3.0 * x301 + 3.0 * x302
    x368 = x107 * x310 + x2 * (x366 + x367)
    x369 = 3.0 * x297 + 3.0 * x298 + 3.0 * x304
    x370 = (
        x107 * x315
        + x2 * (x232 * x31 + 2.0 * x235 + 2.0 * x236 + x369)
        + x20 * (2.0 * ax * x368 - x366)
    )
    x371 = x344 * x370
    x372 = x206 + 3.0 * x239
    x373 = x102 * x316 + x2 * x372
    x374 = x121 * x373
    x375 = (
        x102 * x317
        + x2 * (x211 + 3.0 * x238 + 3.0 * x241)
        + x20 * (2.0 * ax * x373 - x372)
    )
    x376 = 3.0 * x246 + 3.0 * x247
    x377 = x102 * x321 + x2 * (x316 + x376)
    x378 = x121 * x377
    x379 = (
        x102 * x326
        + x2 * (3.0 * x250 + 3.0 * x251 + 3.0 * x253 + x317)
        + x20 * (2.0 * ax * x377 - x376)
    )
    x380 = x102 * x330 + x2 * (2.0 * x319 + 2.0 * x320 + x337)
    x381 = x341 * (
        x102 * x335
        + x2 * (2.0 * x323 + 2.0 * x324 + x325 * x55 + x339)
        + x20 * (2.0 * ax * x380 - x337)
    )
    x382 = x17 * x341
    x383 = 3.0 * x269 + 3.0 * x270
    x384 = x102 * x338 + x2 * (3.0 * x328 + 3.0 * x329 + x383)
    x385 = x341 * x384
    x386 = x341 * x9
    x387 = x14 * x377
    x388 = x14 * x373
    x389 = x14 * x330
    x390 = x14 * x321
    x391 = x14 * x232
    x392 = x14 * x271
    x393 = x14 * x289
    x394 = x14 * x248
    x395 = x14 * x310
    x396 = x102 * x344
    x397 = x14 * x209
    x398 = x14 * x351
    x399 = x14 * x360
    x400 = x229 + 3.0 * x281
    x401 = x107 * x346 + x2 * x400
    x402 = x113 * x401
    x403 = (
        x107 * x347
        + x2 * (x234 + 3.0 * x280 + 3.0 * x283)
        + x20 * (2.0 * ax * x401 - x400)
    )
    x404 = 3.0 * x287 + 3.0 * x288
    x405 = x107 * x351 + x2 * (x346 + x404)
    x406 = x113 * x405
    x407 = (
        x107 * x356
        + x2 * (3.0 * x291 + 3.0 * x292 + 3.0 * x294 + x347)
        + x20 * (2.0 * ax * x405 - x404)
    )
    x408 = x17 * x344
    x409 = x107 * x360 + x2 * (2.0 * x349 + 2.0 * x350 + x367)
    x410 = x344 * (
        x107 * x365
        + x2 * (2.0 * x353 + 2.0 * x354 + x355 * x55 + x369)
        + x20 * (2.0 * ax * x409 - x367)
    )
    x411 = x14 * x401
    x412 = x14 * x405
    x413 = 3.0 * x308 + 3.0 * x309
    x414 = x107 * x368 + x2 * (3.0 * x358 + 3.0 * x359 + x413)
    x415 = x344 * x414

    # 150 item(s)
    result[0, 0] = numpy.sum(
        x111
        * (
            x100
            * (
                3.0 * x2 * (x41 + x56 + x66 + x78 + x83 + x88)
                + x20 * (2.0 * ax * x96 - x95)
                + x5 * x94
            )
            + x104 * x105
            + x105 * x109
        )
    )
    result[0, 1] = numpy.sum(
        x135 * (x109 * x112 * x134 + x112 * x133 + x116 * x120 * x121)
    )
    result[0, 2] = numpy.sum(
        x135 * (x104 * x134 * x136 + x113 * x120 * x139 + x133 * x136)
    )
    result[0, 3] = numpy.sum(
        x135 * (x109 * x144 * x152 + x121 * x144 * x156 + x148 * x152)
    )
    result[0, 4] = numpy.sum(
        x158 * (x112 * x156 * x157 + x114 * x139 * x151 + x116 * x137 * x151)
    )
    result[0, 5] = numpy.sum(
        x135 * (x104 * x163 * x168 + x113 * x156 * x163 + x167 * x168)
    )
    result[0, 6] = numpy.sum(
        x111 * (x109 * x173 * x178 + x121 * x173 * x179 + x175 * x178)
    )
    result[0, 7] = numpy.sum(
        x135 * (x137 * x144 * x179 + x137 * x148 * x177 + x139 * x144 * x177)
    )
    result[0, 8] = numpy.sum(
        x135 * (x114 * x163 * x179 + x114 * x167 * x177 + x116 * x163 * x177)
    )
    result[0, 9] = numpy.sum(
        x111 * (x104 * x184 * x187 + x113 * x179 * x184 + x186 * x187)
    )
    result[1, 0] = numpy.sum(
        x193 * (x102 * x109 * x192 + x102 * x191 + x121 * x190 * x93)
    )
    result[1, 1] = numpy.sum(
        x199 * (x109 * x196 * x198 + x121 * x132 * x196 + x197 * x198)
    )
    result[1, 2] = numpy.sum(
        x199 * (x102 * x132 * x157 + x137 * x190 * x87 + x139 * x188 * x87)
    )
    result[1, 3] = numpy.sum(
        x199 * (x109 * x202 * x204 + x121 * x155 * x202 + x203 * x204)
    )
    result[1, 4] = numpy.sum(
        x205 * (x130 * x137 * x197 + x130 * x139 * x196 + x137 * x155 * x196)
    )
    result[1, 5] = numpy.sum(
        x199 * (x130 * x163 * x190 + x130 * x167 * x188 + x155 * x163 * x188)
    )
    result[1, 6] = numpy.sum(
        x193 * (x109 * x149 * x210 + x121 * x149 * x214 + x154 * x210)
    )
    result[1, 7] = numpy.sum(
        x199 * (x137 * x149 * x203 + x137 * x154 * x202 + x139 * x149 * x202)
    )
    result[1, 8] = numpy.sum(
        x199 * (x149 * x163 * x197 + x149 * x167 * x196 + x154 * x163 * x196)
    )
    result[1, 9] = numpy.sum(
        x193 * (x149 * x184 * x190 + x149 * x186 * x188 + x154 * x184 * x188)
    )
    result[2, 0] = numpy.sum(
        x193 * (x104 * x107 * x192 + x107 * x191 + x113 * x217 * x93)
    )
    result[2, 1] = numpy.sum(
        x199 * (x112 * x132 * x218 + x114 * x217 * x87 + x116 * x215 * x87)
    )
    result[2, 2] = numpy.sum(
        x199 * (x104 * x221 * x223 + x113 * x132 * x221 + x222 * x223)
    )
    result[2, 3] = numpy.sum(
        x199 * (x130 * x144 * x217 + x130 * x148 * x215 + x144 * x155 * x215)
    )
    result[2, 4] = numpy.sum(
        x205 * (x114 * x130 * x222 + x114 * x155 * x221 + x116 * x130 * x221)
    )
    result[2, 5] = numpy.sum(
        x199 * (x104 * x226 * x228 + x113 * x155 * x226 + x227 * x228)
    )
    result[2, 6] = numpy.sum(
        x193 * (x149 * x173 * x217 + x149 * x175 * x215 + x154 * x173 * x215)
    )
    result[2, 7] = numpy.sum(
        x199 * (x144 * x149 * x222 + x144 * x154 * x221 + x148 * x149 * x221)
    )
    result[2, 8] = numpy.sum(
        x199 * (x114 * x149 * x227 + x114 * x154 * x226 + x116 * x149 * x226)
    )
    result[2, 9] = numpy.sum(
        x193 * (x104 * x149 * x233 + x113 * x149 * x237 + x154 * x233)
    )
    result[3, 0] = numpy.sum(
        x245 * (x109 * x240 * x244 + x121 * x240 * x90 + x243 * x244)
    )
    result[3, 1] = numpy.sum(x255 * (x109 * x249 * x75 + x121 * x254 * x75 + x249 * x77))
    result[3, 2] = numpy.sum(
        x255 * (x137 * x240 * x77 + x137 * x243 * x75 + x139 * x240 * x75)
    )
    result[3, 3] = numpy.sum(
        x255 * (x109 * x263 * x266 + x121 * x128 * x263 + x265 * x266)
    )
    result[3, 4] = numpy.sum(
        x267 * (x128 * x137 * x248 + x137 * x254 * x53 + x139 * x248 * x53)
    )
    result[3, 5] = numpy.sum(
        x255 * (x128 * x163 * x240 + x163 * x243 * x53 + x167 * x240 * x53)
    )
    result[3, 6] = numpy.sum(
        x245 * (x109 * x123 * x272 + x121 * x123 * x277 + x153 * x272)
    )
    result[3, 7] = numpy.sum(
        x255 * (x123 * x137 * x265 + x123 * x139 * x263 + x137 * x153 * x263)
    )
    result[3, 8] = numpy.sum(
        x255 * (x123 * x163 * x254 + x123 * x167 * x248 + x153 * x163 * x248)
    )
    result[3, 9] = numpy.sum(
        x245 * (x123 * x184 * x243 + x123 * x186 * x240 + x153 * x184 * x240)
    )
    result[4, 0] = numpy.sum(
        x199 * (x102 * x218 * x90 + x188 * x217 * x82 + x190 * x215 * x82)
    )
    result[4, 1] = numpy.sum(
        x278 * (x196 * x215 * x77 + x196 * x217 * x75 + x197 * x215 * x75)
    )
    result[4, 2] = numpy.sum(
        x278 * (x188 * x221 * x77 + x188 * x222 * x75 + x190 * x221 * x75)
    )
    result[4, 3] = numpy.sum(
        x278 * (x128 * x202 * x215 + x202 * x217 * x53 + x203 * x215 * x53)
    )
    result[4, 4] = numpy.sum(
        x279 * (x128 * x196 * x221 + x196 * x222 * x53 + x197 * x221 * x53)
    )
    result[4, 5] = numpy.sum(
        x278 * (x128 * x188 * x226 + x188 * x227 * x53 + x190 * x226 * x53)
    )
    result[4, 6] = numpy.sum(
        x199 * (x123 * x209 * x217 + x123 * x214 * x215 + x153 * x209 * x215)
    )
    result[4, 7] = numpy.sum(
        x278 * (x123 * x202 * x222 + x123 * x203 * x221 + x153 * x202 * x221)
    )
    result[4, 8] = numpy.sum(
        x278 * (x123 * x196 * x227 + x123 * x197 * x226 + x153 * x196 * x226)
    )
    result[4, 9] = numpy.sum(
        x199 * (x123 * x188 * x237 + x123 * x190 * x232 + x153 * x188 * x232)
    )
    result[5, 0] = numpy.sum(
        x245 * (x104 * x282 * x286 + x113 * x282 * x90 + x285 * x286)
    )
    result[5, 1] = numpy.sum(
        x255 * (x114 * x282 * x77 + x114 * x285 * x75 + x116 * x282 * x75)
    )
    result[5, 2] = numpy.sum(x255 * (x104 * x290 * x75 + x113 * x295 * x75 + x290 * x77))
    result[5, 3] = numpy.sum(
        x255 * (x128 * x144 * x282 + x144 * x285 * x53 + x148 * x282 * x53)
    )
    result[5, 4] = numpy.sum(
        x267 * (x114 * x128 * x289 + x114 * x295 * x53 + x116 * x289 * x53)
    )
    result[5, 5] = numpy.sum(
        x255 * (x104 * x303 * x306 + x113 * x128 * x303 + x305 * x306)
    )
    result[5, 6] = numpy.sum(
        x245 * (x123 * x173 * x285 + x123 * x175 * x282 + x153 * x173 * x282)
    )
    result[5, 7] = numpy.sum(
        x255 * (x123 * x144 * x295 + x123 * x148 * x289 + x144 * x153 * x289)
    )
    result[5, 8] = numpy.sum(
        x255 * (x114 * x123 * x305 + x114 * x153 * x303 + x116 * x123 * x303)
    )
    result[5, 9] = numpy.sum(
        x245 * (x104 * x123 * x311 + x113 * x123 * x315 + x153 * x311)
    )
    result[6, 0] = numpy.sum(
        x193 * (x109 * x316 * x318 + x121 * x316 * x65 + x317 * x318)
    )
    result[6, 1] = numpy.sum(x199 * (x109 * x322 * x36 + x121 * x326 * x36 + x322 * x69))
    result[6, 2] = numpy.sum(
        x199 * (x137 * x316 * x69 + x137 * x317 * x36 + x139 * x316 * x36)
    )
    result[6, 3] = numpy.sum(x199 * (x109 * x331 * x48 + x121 * x335 * x48 + x331 * x49))
    result[6, 4] = numpy.sum(
        x205 * (x137 * x321 * x49 + x137 * x326 * x48 + x139 * x321 * x48)
    )
    result[6, 5] = numpy.sum(
        x199 * (x163 * x316 * x49 + x163 * x317 * x48 + x167 * x316 * x48)
    )
    result[6, 6] = numpy.sum(x193 * (x109 * x338 * x343 + x121 * x338 * x44 + x342 * x5))
    result[6, 7] = numpy.sum(
        x199 * (x136 * x335 * x343 + x137 * x330 * x44 + x139 * x330 * x42)
    )
    result[6, 8] = numpy.sum(
        x199 * (x163 * x321 * x44 + x163 * x326 * x42 + x167 * x321 * x42)
    )
    result[6, 9] = numpy.sum(
        x193 * (x184 * x316 * x44 + x184 * x317 * x42 + x186 * x316 * x42)
    )
    result[7, 0] = numpy.sum(
        x199 * (x215 * x240 * x65 + x215 * x243 * x64 + x217 * x240 * x64)
    )
    result[7, 1] = numpy.sum(
        x278 * (x215 * x248 * x69 + x215 * x254 * x36 + x217 * x248 * x36)
    )
    result[7, 2] = numpy.sum(
        x278 * (x221 * x240 * x69 + x221 * x243 * x36 + x222 * x240 * x36)
    )
    result[7, 3] = numpy.sum(
        x278 * (x215 * x263 * x49 + x215 * x265 * x48 + x217 * x263 * x48)
    )
    result[7, 4] = numpy.sum(
        x279 * (x221 * x248 * x49 + x221 * x254 * x48 + x222 * x248 * x48)
    )
    result[7, 5] = numpy.sum(
        x278 * (x226 * x240 * x49 + x226 * x243 * x48 + x227 * x240 * x48)
    )
    result[7, 6] = numpy.sum(
        x199 * (x107 * x277 * x343 + x215 * x271 * x44 + x217 * x271 * x42)
    )
    result[7, 7] = numpy.sum(
        x278 * (x221 * x263 * x44 + x221 * x265 * x42 + x222 * x263 * x42)
    )
    result[7, 8] = numpy.sum(
        x278 * (x226 * x248 * x44 + x226 * x254 * x42 + x227 * x248 * x42)
    )
    result[7, 9] = numpy.sum(
        x199 * (x232 * x240 * x44 + x232 * x243 * x42 + x237 * x240 * x42)
    )
    result[8, 0] = numpy.sum(
        x199 * (x188 * x282 * x65 + x188 * x285 * x64 + x190 * x282 * x64)
    )
    result[8, 1] = numpy.sum(
        x278 * (x196 * x282 * x69 + x196 * x285 * x36 + x197 * x282 * x36)
    )
    result[8, 2] = numpy.sum(
        x278 * (x188 * x289 * x69 + x188 * x295 * x36 + x190 * x289 * x36)
    )
    result[8, 3] = numpy.sum(
        x278 * (x202 * x282 * x49 + x202 * x285 * x48 + x203 * x282 * x48)
    )
    result[8, 4] = numpy.sum(
        x279 * (x196 * x289 * x49 + x196 * x295 * x48 + x197 * x289 * x48)
    )
    result[8, 5] = numpy.sum(
        x278 * (x188 * x303 * x49 + x188 * x305 * x48 + x190 * x303 * x48)
    )
    result[8, 6] = numpy.sum(
        x199 * (x209 * x282 * x44 + x209 * x285 * x42 + x214 * x282 * x42)
    )
    result[8, 7] = numpy.sum(
        x278 * (x202 * x289 * x44 + x202 * x295 * x42 + x203 * x289 * x42)
    )
    result[8, 8] = numpy.sum(
        x278 * (x196 * x303 * x44 + x196 * x305 * x42 + x197 * x303 * x42)
    )
    result[8, 9] = numpy.sum(
        x199 * (x102 * x315 * x345 + x188 * x310 * x44 + x190 * x310 * x42)
    )
    result[9, 0] = numpy.sum(
        x193 * (x104 * x346 * x348 + x113 * x346 * x65 + x347 * x348)
    )
    result[9, 1] = numpy.sum(
        x199 * (x114 * x346 * x69 + x114 * x347 * x36 + x116 * x346 * x36)
    )
    result[9, 2] = numpy.sum(x199 * (x104 * x352 * x36 + x113 * x356 * x36 + x352 * x69))
    result[9, 3] = numpy.sum(
        x199 * (x144 * x346 * x49 + x144 * x347 * x48 + x148 * x346 * x48)
    )
    result[9, 4] = numpy.sum(
        x205 * (x114 * x351 * x49 + x114 * x356 * x48 + x116 * x351 * x48)
    )
    result[9, 5] = numpy.sum(x199 * (x104 * x361 * x48 + x113 * x365 * x48 + x361 * x49))
    result[9, 6] = numpy.sum(
        x193 * (x173 * x346 * x44 + x173 * x347 * x42 + x175 * x346 * x42)
    )
    result[9, 7] = numpy.sum(
        x199 * (x144 * x351 * x44 + x144 * x356 * x42 + x148 * x351 * x42)
    )
    result[9, 8] = numpy.sum(
        x199 * (x112 * x345 * x365 + x114 * x360 * x44 + x116 * x360 * x42)
    )
    result[9, 9] = numpy.sum(x193 * (x104 * x345 * x368 + x113 * x368 * x44 + x371 * x5))
    result[10, 0] = numpy.sum(x111 * (x109 * x374 * x39 + x121 * x375 * x39 + x374 * x59))
    result[10, 1] = numpy.sum(x135 * (x109 * x25 * x378 + x121 * x25 * x379 + x29 * x378))
    result[10, 2] = numpy.sum(
        x135 * (x137 * x25 * x375 + x137 * x29 * x373 + x139 * x25 * x373)
    )
    result[10, 3] = numpy.sum(
        x135 * (x109 * x380 * x382 + x121 * x22 * x380 + x17 * x381)
    )
    result[10, 4] = numpy.sum(
        x158 * (x136 * x379 * x382 + x137 * x22 * x377 + x139 * x18 * x377)
    )
    result[10, 5] = numpy.sum(
        x135 * (x163 * x18 * x375 + x163 * x22 * x373 + x167 * x18 * x373)
    )
    result[10, 6] = numpy.sum(
        x111
        * (
            x109 * x385
            + x341
            * (
                x102 * x340
                + 3.0 * x2 * (x274 + x275 + x276 + x332 + x333 + x334)
                + x20 * (2.0 * ax * x384 - x383)
            )
            + x385 * x9
        )
    )
    result[10, 7] = numpy.sum(
        x135 * (x136 * x380 * x386 + x136 * x381 + x139 * x14 * x380)
    )
    result[10, 8] = numpy.sum(x135 * (x14 * x163 * x379 + x163 * x387 * x9 + x167 * x387))
    result[10, 9] = numpy.sum(x111 * (x14 * x184 * x375 + x184 * x388 * x9 + x186 * x388))
    result[11, 0] = numpy.sum(
        x193 * (x215 * x316 * x59 + x215 * x317 * x39 + x217 * x316 * x39)
    )
    result[11, 1] = numpy.sum(
        x199 * (x215 * x25 * x326 + x215 * x29 * x321 + x217 * x25 * x321)
    )
    result[11, 2] = numpy.sum(
        x199 * (x221 * x25 * x317 + x221 * x29 * x316 + x222 * x25 * x316)
    )
    result[11, 3] = numpy.sum(
        x199 * (x107 * x335 * x382 + x18 * x217 * x330 + x215 * x22 * x330)
    )
    result[11, 4] = numpy.sum(
        x205 * (x18 * x221 * x326 + x18 * x222 * x321 + x22 * x221 * x321)
    )
    result[11, 5] = numpy.sum(
        x199 * (x18 * x226 * x317 + x18 * x227 * x316 + x22 * x226 * x316)
    )
    result[11, 6] = numpy.sum(
        x193 * (x107 * x338 * x386 + x107 * x342 + x14 * x217 * x338)
    )
    result[11, 7] = numpy.sum(x199 * (x14 * x221 * x335 + x221 * x389 * x9 + x222 * x389))
    result[11, 8] = numpy.sum(x199 * (x14 * x226 * x326 + x226 * x390 * x9 + x227 * x390))
    result[11, 9] = numpy.sum(x193 * (x14 * x237 * x316 + x316 * x391 * x9 + x317 * x391))
    result[12, 0] = numpy.sum(
        x245 * (x240 * x282 * x59 + x240 * x285 * x39 + x243 * x282 * x39)
    )
    result[12, 1] = numpy.sum(
        x255 * (x248 * x25 * x285 + x248 * x282 * x29 + x25 * x254 * x282)
    )
    result[12, 2] = numpy.sum(
        x255 * (x240 * x25 * x295 + x240 * x289 * x29 + x243 * x25 * x289)
    )
    result[12, 3] = numpy.sum(
        x255 * (x18 * x263 * x285 + x18 * x265 * x282 + x22 * x263 * x282)
    )
    result[12, 4] = numpy.sum(
        x267 * (x18 * x248 * x295 + x18 * x254 * x289 + x22 * x248 * x289)
    )
    result[12, 5] = numpy.sum(
        x255 * (x18 * x240 * x305 + x18 * x243 * x303 + x22 * x240 * x303)
    )
    result[12, 6] = numpy.sum(x245 * (x14 * x277 * x282 + x282 * x392 * x9 + x285 * x392))
    result[12, 7] = numpy.sum(x255 * (x14 * x263 * x295 + x263 * x393 * x9 + x265 * x393))
    result[12, 8] = numpy.sum(x255 * (x14 * x254 * x303 + x303 * x394 * x9 + x305 * x394))
    result[12, 9] = numpy.sum(x245 * (x14 * x240 * x315 + x240 * x395 * x9 + x243 * x395))
    result[13, 0] = numpy.sum(
        x193 * (x188 * x346 * x59 + x188 * x347 * x39 + x190 * x346 * x39)
    )
    result[13, 1] = numpy.sum(
        x199 * (x196 * x25 * x347 + x196 * x29 * x346 + x197 * x25 * x346)
    )
    result[13, 2] = numpy.sum(
        x199 * (x188 * x25 * x356 + x188 * x29 * x351 + x190 * x25 * x351)
    )
    result[13, 3] = numpy.sum(
        x199 * (x18 * x202 * x347 + x18 * x203 * x346 + x202 * x22 * x346)
    )
    result[13, 4] = numpy.sum(
        x205 * (x18 * x196 * x356 + x18 * x197 * x351 + x196 * x22 * x351)
    )
    result[13, 5] = numpy.sum(
        x199 * (x17 * x365 * x396 + x18 * x190 * x360 + x188 * x22 * x360)
    )
    result[13, 6] = numpy.sum(x193 * (x14 * x214 * x346 + x346 * x397 * x9 + x347 * x397))
    result[13, 7] = numpy.sum(x199 * (x14 * x202 * x356 + x202 * x398 * x9 + x203 * x398))
    result[13, 8] = numpy.sum(x199 * (x14 * x196 * x365 + x196 * x399 * x9 + x197 * x399))
    result[13, 9] = numpy.sum(x193 * (x102 * x371 + x14 * x190 * x368 + x368 * x396 * x9))
    result[14, 0] = numpy.sum(x111 * (x104 * x39 * x402 + x113 * x39 * x403 + x402 * x59))
    result[14, 1] = numpy.sum(
        x135 * (x114 * x25 * x403 + x114 * x29 * x401 + x116 * x25 * x401)
    )
    result[14, 2] = numpy.sum(x135 * (x104 * x25 * x406 + x113 * x25 * x407 + x29 * x406))
    result[14, 3] = numpy.sum(
        x135 * (x144 * x18 * x403 + x144 * x22 * x401 + x148 * x18 * x401)
    )
    result[14, 4] = numpy.sum(
        x158 * (x112 * x407 * x408 + x114 * x22 * x405 + x116 * x18 * x405)
    )
    result[14, 5] = numpy.sum(
        x135 * (x104 * x408 * x409 + x113 * x22 * x409 + x17 * x410)
    )
    result[14, 6] = numpy.sum(x111 * (x14 * x173 * x403 + x173 * x411 * x9 + x175 * x411))
    result[14, 7] = numpy.sum(x135 * (x14 * x144 * x407 + x144 * x412 * x9 + x148 * x412))
    result[14, 8] = numpy.sum(
        x135 * (x112 * x344 * x409 * x9 + x112 * x410 + x116 * x14 * x409)
    )
    result[14, 9] = numpy.sum(
        x111
        * (
            x104 * x415
            + x344
            * (
                x107 * x370
                + 3.0 * x2 * (x312 + x313 + x314 + x362 + x363 + x364)
                + x20 * (2.0 * ax * x414 - x413)
            )
            + x415 * x9
        )
    )
    return result


def kinetic3d_44(ax, da, A, bx, db, B):
    """Cartesian 3D (gg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.77245385090552 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = 4.0 * x12
    x19 = x2 * (x16 * x18 + 2.0 * x17)
    x20 = x15 * x2
    x21 = x20 * x9
    x22 = bx * x3
    x23 = x0 * x22
    x24 = x16 * x23 + x17
    x25 = x10 * x24
    x26 = x10**2 * x15
    x27 = x20 + x26
    x28 = -x15
    x29 = x11 * (x1 * x27 + x28)
    x30 = x25 + x29
    x31 = x21 + x30
    x32 = x10 * x31
    x33 = x10 * x27
    x34 = 2.0 * x20
    x35 = x10 * x34
    x36 = x33 + x35
    x37 = x11 * (x1 * x36 - 2.0 * x16)
    x38 = x32 + x37
    x39 = x19 + x38
    x40 = x39 * x5
    x41 = 3.0 * x21
    x42 = x2 * (3.0 * x25 + 3.0 * x29 + x41)
    x43 = 3.0 * x20
    x44 = 3.0 * x26 + x43
    x45 = x2 * x44
    x46 = x36 * x5
    x47 = x45 + x46
    x48 = x12 * x47
    x49 = x10 * x36
    x50 = x45 + x49
    x51 = x10 * x39 + x11 * (2.0 * bx * x50 - x44)
    x52 = x2 * (4.0 * x40 + 5.0 * x42 + 8.0 * x48 + x51)
    x53 = 4.0 * x19
    x54 = x2 * (4.0 * x32 + 4.0 * x37 + x53)
    x55 = x42 + x51
    x56 = x5 * x55
    x57 = x10 * x20
    x58 = 8.0 * x57
    x59 = x2 * (4.0 * x33 + x58)
    x60 = x5 * x50
    x61 = x59 + x60
    x62 = x23 * x61 + x54 + x56
    x63 = x5 * x62
    x64 = x24 * x5
    x65 = x15 * x5
    x66 = x10 * x65
    x67 = x20 + x66
    x68 = x18 * x67 + x41 + 2.0 * x64
    x69 = x2 * (x30 + x68)
    x70 = x31 * x5
    x71 = x27 * x5
    x72 = x35 + x71
    x73 = x19 + x23 * x72 + x70
    x74 = x5 * x73
    x75 = 2.0 * x66
    x76 = x43 + x75
    x77 = x2 * (x26 + x76)
    x78 = x5 * x72
    x79 = x77 + x78
    x80 = x22 * (2.0 * ax * x79 - x27)
    x81 = 3.0 * x69 + 3.0 * x74 + 3.0 * x80
    x82 = x2 * (2.0 * x40 + 2.0 * x42 + 4.0 * x48 + x81)
    x83 = 6.0 * x12
    x84 = x2 * (x38 + x53 + 3.0 * x70 + x72 * x83)
    x85 = x23 * x47 + x40 + x42
    x86 = x5 * x85
    x87 = x2 * (x33 + x58 + 3.0 * x71)
    x88 = x47 * x5
    x89 = x87 + x88
    x90 = x22 * (2.0 * ax * x89 - x36)
    x91 = x84 + x86 + x90
    x92 = x5 * x91
    x93 = x2 * (5.0 * x45 + 4.0 * x46 + x49)
    x94 = x5 * x61
    x95 = x93 + x94
    x96 = x22 * (2.0 * ax * x95 - x50)
    x97 = 2.0 * x45 + 2.0 * x46
    x98 = 3.0 * x77 + 3.0 * x78
    x99 = x2 * (x97 + x98)
    x100 = x5 * x89
    x101 = x100 + x99
    x102 = x22 * (2.0 * ax * x101 - x97)
    x103 = x52 + x63 + x96
    x104 = 2.0 * x59 + 2.0 * x60
    x105 = x2 * (x104 + 4.0 * x87 + 4.0 * x88) + x5 * x95
    x106 = (
        x103 * x5
        + x2 * (x18 * x61 + 2.0 * x54 + 2.0 * x56 + 4.0 * x84 + 4.0 * x86 + 4.0 * x90)
        + x22 * (2.0 * ax * x105 - x104)
    )
    x107 = 3.0 * x93 + 3.0 * x94
    x108 = x105 * x5 + x2 * (4.0 * x100 + x107 + 4.0 * x99)
    x109 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x110 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x111 = 3.14159265358979 * x110 * x3
    x112 = x109 * x111
    x113 = -x3 * (ax * A[1] + bx * B[1])
    x114 = -x113 - A[1]
    x115 = x114**2
    x116 = -x6 - x8 * (x115 + x2)
    x117 = x108 * x112
    x118 = -x3 * (ax * A[2] + bx * B[2])
    x119 = -x118 - A[2]
    x120 = x119**2
    x121 = -x6 - x8 * (x120 + x2)
    x122 = 0.179587122125167 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**5.5)
    x123 = 6.89597470414309 * x122
    x124 = -x113 - B[1]
    x125 = x109 * x14
    x126 = x124 * x125
    x127 = x116 * x126
    x128 = x126 * x23 + x127
    x129 = x2 * (x16 + x65)
    x130 = x5 * x67
    x131 = 4.0 * x57 + 2.0 * x71
    x132 = x2 * (2.0 * x129 + 2.0 * x130 + x131)
    x133 = x5 * x79
    x134 = 3.0 * x87 + 3.0 * x88
    x135 = x101 * x5 + x2 * (3.0 * x132 + 3.0 * x133 + x134)
    x136 = x110 * x14
    x137 = x65 * x9
    x138 = x137 + x23 * x65
    x139 = x2 * (x138 + x24)
    x140 = x21 + x23 * x67 + x64
    x141 = x140 * x5
    x142 = x129 + x130
    x143 = x0 * x142 - x16
    x144 = x1 * x3
    x145 = x2 * (
        2.0 * x139 + 2.0 * x141 + x143 * x144 + x18 * x72 + 2.0 * x19 + 2.0 * x70
    )
    x146 = x69 + x74 + x80
    x147 = x146 * x5
    x148 = x132 + x133
    x149 = x22 * (2.0 * ax * x148 - x131)
    x150 = x102 + x82 + x92
    x151 = x112 * (
        x150 * x5
        + 3.0 * x2 * (x145 + x147 + x149 + x84 + x86 + x90)
        + x22 * (2.0 * ax * x135 - x134)
    )
    x152 = x112 * x135
    x153 = 18.2450341145548 * x122
    x154 = -x118 - B[2]
    x155 = x136 * x154
    x156 = x121 * x155
    x157 = x155 * x23 + x156
    x158 = x125 * x2
    x159 = x116 * x158
    x160 = x124 * x128
    x161 = x124**2 * x125
    x162 = x158 + x161
    x163 = -x125
    x164 = x11 * (x1 * x162 + x163)
    x165 = x160 + x164
    x166 = x159 + x165
    x167 = x15 * x7
    x168 = x2 * (x167 + x76)
    x169 = x142 * x5
    x170 = x148 * x5 + x2 * (2.0 * x168 + 2.0 * x169 + x98)
    x171 = x136 * x170
    x172 = x138 * x5
    x173 = x167 + x20
    x174 = x22 * (x0 * x173 + x28)
    x175 = x172 + x174
    x176 = x2 * (x175 + x68)
    x177 = x143 * x22
    x178 = x139 + x141 + x177
    x179 = x178 * x5
    x180 = x168 + x169
    x181 = 2.0 * ax * x180 - x34 - x75
    x182 = x145 + x147 + x149
    x183 = (
        x182 * x5
        + x2 * (x144 * x181 + 2.0 * x176 + 2.0 * x179 + x81)
        + x22 * (2.0 * ax * x170 - x98)
    )
    x184 = 23.5542377588857 * x122
    x185 = x112 * x154
    x186 = 40.7971365319473 * x122
    x187 = x136 * x2
    x188 = x121 * x187
    x189 = x154 * x157
    x190 = x136 * x154**2
    x191 = x187 + x190
    x192 = -x136
    x193 = x11 * (x1 * x191 + x192)
    x194 = x189 + x193
    x195 = x188 + x194
    x196 = x125 * x170
    x197 = x2 * (x126 * x18 + 2.0 * x127)
    x198 = x124 * x166
    x199 = x124 * x162
    x200 = 2.0 * x158
    x201 = x124 * x200
    x202 = x199 + x201
    x203 = x11 * (x1 * x202 - 2.0 * x126)
    x204 = x198 + x203
    x205 = x197 + x204
    x206 = x5 * (x173 + x34)
    x207 = 3.0 * x129 + 3.0 * x130
    x208 = x180 * x5 + x2 * (x206 + x207)
    x209 = x136 * x208
    x210 = x175 + x21
    x211 = x2 * (2.0 * x137 + x18 * x65) + x210 * x5 + x22 * (x0 * x206 - 2.0 * x65)
    x212 = x176 + x179 + x181 * x22
    x213 = (
        x2 * (3.0 * x139 + 3.0 * x141 + 3.0 * x177 + x211)
        + x212 * x5
        + x22 * (2.0 * ax * x208 - x207)
    )
    x214 = x2 * (x155 * x18 + 2.0 * x156)
    x215 = x154 * x195
    x216 = x154 * x191
    x217 = 2.0 * x187
    x218 = x154 * x217
    x219 = x216 + x218
    x220 = x11 * (x1 * x219 - 2.0 * x155)
    x221 = x215 + x220
    x222 = x214 + x221
    x223 = x125 * x208
    x224 = 3.0 * x159
    x225 = x2 * (3.0 * x160 + 3.0 * x164 + x224)
    x226 = 3.0 * x158
    x227 = 3.0 * x161 + x226
    x228 = x2 * x227
    x229 = x124 * x202
    x230 = x228 + x229
    x231 = x11 * (2.0 * bx * x230 - x227) + x124 * x205
    x232 = x225 + x231
    x233 = 3.0 * x167 + x43
    x234 = x2 * x233 + x206 * x5
    x235 = x136 * x234
    x236 = (
        x2 * (3.0 * x172 + 3.0 * x174 + x41) + x211 * x5 + x22 * (2.0 * ax * x234 - x233)
    )
    x237 = 3.0 * x188
    x238 = x2 * (3.0 * x189 + 3.0 * x193 + x237)
    x239 = 3.0 * x187
    x240 = 3.0 * x190 + x239
    x241 = x2 * x240
    x242 = x154 * x219
    x243 = x241 + x242
    x244 = x11 * (2.0 * bx * x243 - x240) + x154 * x222
    x245 = x238 + x244
    x246 = x125 * x234
    x247 = x114 * x125
    x248 = x116 * x247
    x249 = x23 * x247 + x248
    x250 = x106 * x112
    x251 = x105 * x112
    x252 = x114 * x128
    x253 = x124 * x247
    x254 = x158 + x253
    x255 = x159 + x23 * x254 + x252
    x256 = x101 * x136
    x257 = 48.2718229290016 * x122
    x258 = x114 * x166
    x259 = x114 * x162
    x260 = x201 + x259
    x261 = x197 + x23 * x260 + x258
    x262 = x136 * x148
    x263 = 62.3186554316989 * x122
    x264 = 107.939077467081 * x122
    x265 = x114 * x202
    x266 = x228 + x265
    x267 = x136 * x266
    x268 = x114 * x205
    x269 = x225 + x23 * x266 + x268
    x270 = x124 * x158
    x271 = 8.0 * x270
    x272 = x2 * (4.0 * x199 + x271)
    x273 = x114 * x230
    x274 = x272 + x273
    x275 = x136 * x274
    x276 = 4.0 * x197
    x277 = x2 * (4.0 * x198 + 4.0 * x203 + x276)
    x278 = x114 * x232
    x279 = x23 * x274 + x277 + x278
    x280 = x119 * x136
    x281 = x121 * x280
    x282 = x23 * x280 + x281
    x283 = x112 * x119
    x284 = x119 * x157
    x285 = x154 * x280
    x286 = x187 + x285
    x287 = x188 + x23 * x286 + x284
    x288 = x101 * x125
    x289 = x119 * x195
    x290 = x119 * x191
    x291 = x218 + x290
    x292 = x214 + x23 * x291 + x289
    x293 = x125 * x148
    x294 = x119 * x219
    x295 = x241 + x294
    x296 = x125 * x295
    x297 = x119 * x222
    x298 = x23 * x295 + x238 + x297
    x299 = x154 * x187
    x300 = 8.0 * x299
    x301 = x2 * (4.0 * x216 + x300)
    x302 = x119 * x243
    x303 = x301 + x302
    x304 = x125 * x303
    x305 = 4.0 * x214
    x306 = x2 * (4.0 * x215 + 4.0 * x220 + x305)
    x307 = x119 * x245
    x308 = x23 * x303 + x306 + x307
    x309 = x114 * x249
    x310 = x115 * x125
    x311 = x158 + x310
    x312 = x22 * (x0 * x311 + x163)
    x313 = x309 + x312
    x314 = x159 + x313
    x315 = x136 * x95
    x316 = x2 * (x126 + x247)
    x317 = x114 * x254
    x318 = x316 + x317
    x319 = x136 * x318
    x320 = x2 * (x128 + x249)
    x321 = x114 * x255
    x322 = x0 * x318 - x126
    x323 = x22 * x322
    x324 = x320 + x321 + x323
    x325 = x18 * x254 + x224 + 2.0 * x252
    x326 = x2 * (x165 + x325)
    x327 = x114 * x261
    x328 = 2.0 * x253
    x329 = x226 + x328
    x330 = x2 * (x161 + x329)
    x331 = x114 * x260
    x332 = x330 + x331
    x333 = x22 * (2.0 * ax * x332 - x162)
    x334 = x326 + x327 + x333
    x335 = x136 * x79
    x336 = 80.4530382150027 * x122
    x337 = 139.348749811665 * x122
    x338 = x2 * (x204 + 3.0 * x258 + x260 * x83 + x276)
    x339 = x114 * x269
    x340 = x2 * (x199 + 3.0 * x259 + x271)
    x341 = x114 * x266
    x342 = x340 + x341
    x343 = x22 * (2.0 * ax * x342 - x202)
    x344 = x338 + x339 + x343
    x345 = x136 * x142
    x346 = x2 * (5.0 * x228 + x229 + 4.0 * x265)
    x347 = x114 * x274
    x348 = x346 + x347
    x349 = x136 * x348
    x350 = 8.0 * x12
    x351 = x2 * (5.0 * x225 + x231 + x266 * x350 + 4.0 * x268)
    x352 = x114 * x279
    x353 = x22 * (2.0 * ax * x348 - x230)
    x354 = x351 + x352 + x353
    x355 = 241.359114645008 * x122
    x356 = x119 * x282
    x357 = x120 * x136
    x358 = x187 + x357
    x359 = x22 * (x0 * x358 + x192)
    x360 = x356 + x359
    x361 = x188 + x360
    x362 = x125 * x95
    x363 = x2 * (x155 + x280)
    x364 = x119 * x286
    x365 = x363 + x364
    x366 = x125 * x365
    x367 = x2 * (x157 + x282)
    x368 = x119 * x287
    x369 = x0 * x365 - x155
    x370 = x22 * x369
    x371 = x367 + x368 + x370
    x372 = x18 * x286 + x237 + 2.0 * x284
    x373 = x2 * (x194 + x372)
    x374 = x119 * x292
    x375 = 2.0 * x285
    x376 = x239 + x375
    x377 = x2 * (x190 + x376)
    x378 = x119 * x291
    x379 = x377 + x378
    x380 = x22 * (2.0 * ax * x379 - x191)
    x381 = x373 + x374 + x380
    x382 = x125 * x79
    x383 = x2 * (x221 + 3.0 * x289 + x291 * x83 + x305)
    x384 = x119 * x298
    x385 = x2 * (x216 + 3.0 * x290 + x300)
    x386 = x119 * x295
    x387 = x385 + x386
    x388 = x22 * (2.0 * ax * x387 - x219)
    x389 = x383 + x384 + x388
    x390 = x125 * x142
    x391 = x2 * (5.0 * x241 + x242 + 4.0 * x294)
    x392 = x119 * x303
    x393 = x391 + x392
    x394 = x125 * x393
    x395 = x2 * (5.0 * x238 + x244 + x295 * x350 + 4.0 * x297)
    x396 = x119 * x308
    x397 = x22 * (2.0 * ax * x393 - x243)
    x398 = x395 + x396 + x397
    x399 = x114 * (x200 + x311)
    x400 = x114 * x314 + x2 * (x18 * x247 + 2.0 * x248) + x22 * (x0 * x399 - 2.0 * x247)
    x401 = x136 * x61
    x402 = x2 * (x313 + x325)
    x403 = x114 * x324
    x404 = x2 * (x310 + x329)
    x405 = x114 * x318
    x406 = x404 + x405
    x407 = 2.0 * ax * x406 - x200 - x328
    x408 = x22 * x407 + x402 + x403
    x409 = x136 * x47
    x410 = 2.0 * x259 + 4.0 * x270
    x411 = x2 * (2.0 * x316 + 2.0 * x317 + x410)
    x412 = x114 * x332
    x413 = x411 + x412
    x414 = x136 * x413
    x415 = x2 * (
        x144 * x322 + x18 * x260 + 2.0 * x197 + 2.0 * x258 + 2.0 * x320 + 2.0 * x321
    )
    x416 = x114 * x334
    x417 = x22 * (2.0 * ax * x413 - x410)
    x418 = x415 + x416 + x417
    x419 = 2.0 * x228 + 2.0 * x265
    x420 = 3.0 * x330 + 3.0 * x331
    x421 = x2 * (x419 + x420)
    x422 = x114 * x342
    x423 = x421 + x422
    x424 = x136 * x423
    x425 = 3.0 * x326 + 3.0 * x327 + 3.0 * x333
    x426 = x2 * (x18 * x266 + 2.0 * x225 + 2.0 * x268 + x425)
    x427 = x114 * x344
    x428 = x22 * (2.0 * ax * x423 - x419)
    x429 = x426 + x427 + x428
    x430 = 2.0 * x272 + 2.0 * x273
    x431 = x114 * x348 + x2 * (4.0 * x340 + 4.0 * x341 + x430)
    x432 = (
        x114 * x354
        + x2
        * (x18 * x274 + 2.0 * x277 + 2.0 * x278 + 4.0 * x338 + 4.0 * x339 + 4.0 * x343)
        + x22 * (2.0 * ax * x431 - x430)
    )
    x433 = x111 * x13
    x434 = x432 * x433
    x435 = x433 * x5
    x436 = 3.14159265358979 * x109 * x13 * x3
    x437 = x436 * x5
    x438 = x119 * (x217 + x358)
    x439 = x119 * x361 + x2 * (x18 * x280 + 2.0 * x281) + x22 * (x0 * x438 - 2.0 * x280)
    x440 = x125 * x61
    x441 = x2 * (x360 + x372)
    x442 = x119 * x371
    x443 = x2 * (x357 + x376)
    x444 = x119 * x365
    x445 = x443 + x444
    x446 = 2.0 * ax * x445 - x217 - x375
    x447 = x22 * x446 + x441 + x442
    x448 = x125 * x47
    x449 = 2.0 * x290 + 4.0 * x299
    x450 = x2 * (2.0 * x363 + 2.0 * x364 + x449)
    x451 = x119 * x379
    x452 = x450 + x451
    x453 = x125 * x452
    x454 = x2 * (
        x144 * x369 + x18 * x291 + 2.0 * x214 + 2.0 * x289 + 2.0 * x367 + 2.0 * x368
    )
    x455 = x119 * x381
    x456 = x22 * (2.0 * ax * x452 - x449)
    x457 = x454 + x455 + x456
    x458 = 2.0 * x241 + 2.0 * x294
    x459 = 3.0 * x377 + 3.0 * x378
    x460 = x2 * (x458 + x459)
    x461 = x119 * x387
    x462 = x460 + x461
    x463 = x125 * x462
    x464 = 3.0 * x373 + 3.0 * x374 + 3.0 * x380
    x465 = x2 * (x18 * x295 + 2.0 * x238 + 2.0 * x297 + x464)
    x466 = x119 * x389
    x467 = x22 * (2.0 * ax * x462 - x458)
    x468 = x465 + x466 + x467
    x469 = 2.0 * x301 + 2.0 * x302
    x470 = x119 * x393 + x2 * (4.0 * x385 + 4.0 * x386 + x469)
    x471 = (
        x119 * x398
        + x2
        * (x18 * x303 + 2.0 * x306 + 2.0 * x307 + 4.0 * x383 + 4.0 * x384 + 4.0 * x388)
        + x22 * (2.0 * ax * x470 - x469)
    )
    x472 = x436 * x471
    x473 = x226 + 3.0 * x310
    x474 = x114 * x399 + x2 * x473
    x475 = x136 * x474
    x476 = (
        x114 * x400
        + x2 * (x224 + 3.0 * x309 + 3.0 * x312)
        + x22 * (2.0 * ax * x474 - x473)
    )
    x477 = 3.0 * x316 + 3.0 * x317
    x478 = x114 * x406 + x2 * (x399 + x477)
    x479 = x136 * x478
    x480 = (
        x114 * x408
        + x2 * (3.0 * x320 + 3.0 * x321 + 3.0 * x323 + x400)
        + x22 * (2.0 * ax * x478 - x477)
    )
    x481 = x114 * x413 + x2 * (2.0 * x404 + 2.0 * x405 + x420)
    x482 = x136 * x481
    x483 = (
        x114 * x418
        + x2 * (x144 * x407 + 2.0 * x402 + 2.0 * x403 + x425)
        + x22 * (2.0 * ax * x481 - x420)
    )
    x484 = 3.0 * x340 + 3.0 * x341
    x485 = x114 * x423 + x2 * (3.0 * x411 + 3.0 * x412 + x484)
    x486 = x433 * (
        x114 * x429
        + 3.0 * x2 * (x338 + x339 + x343 + x415 + x416 + x417)
        + x22 * (2.0 * ax * x485 - x484)
    )
    x487 = x10 * x433
    x488 = 3.0 * x346 + 3.0 * x347
    x489 = x114 * x431 + x2 * (4.0 * x421 + 4.0 * x422 + x488)
    x490 = x433 * x489
    x491 = x433 * x9
    x492 = x15 * x481
    x493 = x15 * x478
    x494 = x15 * x474
    x495 = x15 * x423
    x496 = x15 * x413
    x497 = x15 * x295
    x498 = x15 * x303
    x499 = x15 * x348
    x500 = x15 * x365
    x501 = x15 * x332
    x502 = x15 * x318
    x503 = x15 * x393
    x504 = x114 * x436
    x505 = x15 * x274
    x506 = x15 * x266
    x507 = x15 * x452
    x508 = x15 * x462
    x509 = x239 + 3.0 * x357
    x510 = x119 * x438 + x2 * x509
    x511 = x125 * x510
    x512 = (
        x119 * x439
        + x2 * (x237 + 3.0 * x356 + 3.0 * x359)
        + x22 * (2.0 * ax * x510 - x509)
    )
    x513 = 3.0 * x363 + 3.0 * x364
    x514 = x119 * x445 + x2 * (x438 + x513)
    x515 = x125 * x514
    x516 = (
        x119 * x447
        + x2 * (3.0 * x367 + 3.0 * x368 + 3.0 * x370 + x439)
        + x22 * (2.0 * ax * x514 - x513)
    )
    x517 = x119 * x452 + x2 * (2.0 * x443 + 2.0 * x444 + x459)
    x518 = x125 * x517
    x519 = (
        x119 * x457
        + x2 * (x144 * x446 + 2.0 * x441 + 2.0 * x442 + x464)
        + x22 * (2.0 * ax * x517 - x459)
    )
    x520 = x10 * x436
    x521 = 3.0 * x385 + 3.0 * x386
    x522 = x119 * x462 + x2 * (3.0 * x450 + 3.0 * x451 + x521)
    x523 = x436 * (
        x119 * x468
        + 3.0 * x2 * (x383 + x384 + x388 + x454 + x455 + x456)
        + x22 * (2.0 * ax * x522 - x521)
    )
    x524 = x15 * x510
    x525 = x15 * x514
    x526 = x15 * x517
    x527 = 3.0 * x391 + 3.0 * x392
    x528 = x119 * x470 + x2 * (4.0 * x460 + 4.0 * x461 + x527)
    x529 = x436 * x528

    # 225 item(s)
    result[0, 0] = numpy.sum(
        x123
        * (
            x112
            * (
                x106 * x5
                + x2
                * (4.0 * x102 + 3.0 * x52 + 3.0 * x63 + 4.0 * x82 + 4.0 * x92 + 3.0 * x96)
                + x22 * (2.0 * ax * x108 - x107)
            )
            + x116 * x117
            + x117 * x121
        )
    )
    result[0, 1] = numpy.sum(
        x153 * (x121 * x124 * x152 + x124 * x151 + x128 * x135 * x136)
    )
    result[0, 2] = numpy.sum(
        x153 * (x116 * x152 * x154 + x125 * x135 * x157 + x151 * x154)
    )
    result[0, 3] = numpy.sum(
        x184 * (x121 * x162 * x171 + x136 * x162 * x183 + x166 * x171)
    )
    result[0, 4] = numpy.sum(
        x186 * (x124 * x183 * x185 + x126 * x157 * x170 + x128 * x155 * x170)
    )
    result[0, 5] = numpy.sum(
        x184 * (x116 * x191 * x196 + x125 * x183 * x191 + x195 * x196)
    )
    result[0, 6] = numpy.sum(
        x153 * (x121 * x202 * x209 + x136 * x202 * x213 + x205 * x209)
    )
    result[0, 7] = numpy.sum(
        x186 * (x155 * x162 * x213 + x155 * x166 * x208 + x157 * x162 * x208)
    )
    result[0, 8] = numpy.sum(
        x186 * (x126 * x191 * x213 + x126 * x195 * x208 + x128 * x191 * x208)
    )
    result[0, 9] = numpy.sum(
        x153 * (x116 * x219 * x223 + x125 * x213 * x219 + x222 * x223)
    )
    result[0, 10] = numpy.sum(
        x123 * (x121 * x230 * x235 + x136 * x230 * x236 + x232 * x235)
    )
    result[0, 11] = numpy.sum(
        x153 * (x155 * x202 * x236 + x155 * x205 * x234 + x157 * x202 * x234)
    )
    result[0, 12] = numpy.sum(
        x184 * (x162 * x191 * x236 + x162 * x195 * x234 + x166 * x191 * x234)
    )
    result[0, 13] = numpy.sum(
        x153 * (x126 * x219 * x236 + x126 * x222 * x234 + x128 * x219 * x234)
    )
    result[0, 14] = numpy.sum(
        x123 * (x116 * x243 * x246 + x125 * x236 * x243 + x245 * x246)
    )
    result[1, 0] = numpy.sum(
        x153 * (x105 * x136 * x249 + x114 * x121 * x251 + x114 * x250)
    )
    result[1, 1] = numpy.sum(
        x257 * (x121 * x254 * x256 + x136 * x150 * x254 + x255 * x256)
    )
    result[1, 2] = numpy.sum(
        x257 * (x101 * x155 * x249 + x101 * x157 * x247 + x114 * x150 * x185)
    )
    result[1, 3] = numpy.sum(
        x263 * (x121 * x260 * x262 + x136 * x182 * x260 + x261 * x262)
    )
    result[1, 4] = numpy.sum(
        x264 * (x148 * x155 * x255 + x148 * x157 * x254 + x155 * x182 * x254)
    )
    result[1, 5] = numpy.sum(
        x263 * (x148 * x191 * x249 + x148 * x195 * x247 + x182 * x191 * x247)
    )
    result[1, 6] = numpy.sum(
        x257 * (x121 * x180 * x267 + x136 * x180 * x269 + x212 * x267)
    )
    result[1, 7] = numpy.sum(
        x264 * (x155 * x180 * x261 + x155 * x212 * x260 + x157 * x180 * x260)
    )
    result[1, 8] = numpy.sum(
        x264 * (x180 * x191 * x255 + x180 * x195 * x254 + x191 * x212 * x254)
    )
    result[1, 9] = numpy.sum(
        x257 * (x180 * x219 * x249 + x180 * x222 * x247 + x212 * x219 * x247)
    )
    result[1, 10] = numpy.sum(
        x153 * (x121 * x206 * x275 + x136 * x206 * x279 + x211 * x275)
    )
    result[1, 11] = numpy.sum(
        x257 * (x155 * x206 * x269 + x155 * x211 * x266 + x157 * x206 * x266)
    )
    result[1, 12] = numpy.sum(
        x263 * (x191 * x206 * x261 + x191 * x211 * x260 + x195 * x206 * x260)
    )
    result[1, 13] = numpy.sum(
        x257 * (x206 * x219 * x255 + x206 * x222 * x254 + x211 * x219 * x254)
    )
    result[1, 14] = numpy.sum(
        x153 * (x206 * x243 * x249 + x206 * x245 * x247 + x211 * x243 * x247)
    )
    result[2, 0] = numpy.sum(
        x153 * (x105 * x125 * x282 + x116 * x119 * x251 + x119 * x250)
    )
    result[2, 1] = numpy.sum(
        x257 * (x101 * x126 * x282 + x101 * x128 * x280 + x124 * x150 * x283)
    )
    result[2, 2] = numpy.sum(
        x257 * (x116 * x286 * x288 + x125 * x150 * x286 + x287 * x288)
    )
    result[2, 3] = numpy.sum(
        x263 * (x148 * x162 * x282 + x148 * x166 * x280 + x162 * x182 * x280)
    )
    result[2, 4] = numpy.sum(
        x264 * (x126 * x148 * x287 + x126 * x182 * x286 + x128 * x148 * x286)
    )
    result[2, 5] = numpy.sum(
        x263 * (x116 * x291 * x293 + x125 * x182 * x291 + x292 * x293)
    )
    result[2, 6] = numpy.sum(
        x257 * (x180 * x202 * x282 + x180 * x205 * x280 + x202 * x212 * x280)
    )
    result[2, 7] = numpy.sum(
        x264 * (x162 * x180 * x287 + x162 * x212 * x286 + x166 * x180 * x286)
    )
    result[2, 8] = numpy.sum(
        x264 * (x126 * x180 * x292 + x126 * x212 * x291 + x128 * x180 * x291)
    )
    result[2, 9] = numpy.sum(
        x257 * (x116 * x180 * x296 + x125 * x180 * x298 + x212 * x296)
    )
    result[2, 10] = numpy.sum(
        x153 * (x206 * x230 * x282 + x206 * x232 * x280 + x211 * x230 * x280)
    )
    result[2, 11] = numpy.sum(
        x257 * (x202 * x206 * x287 + x202 * x211 * x286 + x205 * x206 * x286)
    )
    result[2, 12] = numpy.sum(
        x263 * (x162 * x206 * x292 + x162 * x211 * x291 + x166 * x206 * x291)
    )
    result[2, 13] = numpy.sum(
        x257 * (x126 * x206 * x298 + x126 * x211 * x295 + x128 * x206 * x295)
    )
    result[2, 14] = numpy.sum(
        x153 * (x116 * x206 * x304 + x125 * x206 * x308 + x211 * x304)
    )
    result[3, 0] = numpy.sum(
        x184 * (x103 * x136 * x311 + x121 * x311 * x315 + x314 * x315)
    )
    result[3, 1] = numpy.sum(x263 * (x121 * x319 * x89 + x136 * x324 * x89 + x319 * x91))
    result[3, 2] = numpy.sum(
        x263 * (x155 * x311 * x91 + x155 * x314 * x89 + x157 * x311 * x89)
    )
    result[3, 3] = numpy.sum(
        x336 * (x121 * x332 * x335 + x136 * x146 * x332 + x334 * x335)
    )
    result[3, 4] = numpy.sum(
        x337 * (x146 * x155 * x318 + x155 * x324 * x79 + x157 * x318 * x79)
    )
    result[3, 5] = numpy.sum(
        x336 * (x146 * x191 * x311 + x191 * x314 * x79 + x195 * x311 * x79)
    )
    result[3, 6] = numpy.sum(
        x263 * (x121 * x342 * x345 + x136 * x178 * x342 + x344 * x345)
    )
    result[3, 7] = numpy.sum(
        x337 * (x142 * x155 * x334 + x142 * x157 * x332 + x155 * x178 * x332)
    )
    result[3, 8] = numpy.sum(
        x337 * (x142 * x191 * x324 + x142 * x195 * x318 + x178 * x191 * x318)
    )
    result[3, 9] = numpy.sum(
        x263 * (x142 * x219 * x314 + x142 * x222 * x311 + x178 * x219 * x311)
    )
    result[3, 10] = numpy.sum(
        x184 * (x121 * x173 * x349 + x136 * x173 * x354 + x210 * x349)
    )
    result[3, 11] = numpy.sum(
        x263 * (x155 * x173 * x344 + x155 * x210 * x342 + x157 * x173 * x342)
    )
    result[3, 12] = numpy.sum(
        x336 * (x173 * x191 * x334 + x173 * x195 * x332 + x191 * x210 * x332)
    )
    result[3, 13] = numpy.sum(
        x263 * (x173 * x219 * x324 + x173 * x222 * x318 + x210 * x219 * x318)
    )
    result[3, 14] = numpy.sum(
        x184 * (x173 * x243 * x314 + x173 * x245 * x311 + x210 * x243 * x311)
    )
    result[4, 0] = numpy.sum(
        x186 * (x103 * x114 * x283 + x247 * x282 * x95 + x249 * x280 * x95)
    )
    result[4, 1] = numpy.sum(
        x264 * (x254 * x280 * x91 + x254 * x282 * x89 + x255 * x280 * x89)
    )
    result[4, 2] = numpy.sum(
        x264 * (x247 * x286 * x91 + x247 * x287 * x89 + x249 * x286 * x89)
    )
    result[4, 3] = numpy.sum(
        x337 * (x146 * x260 * x280 + x260 * x282 * x79 + x261 * x280 * x79)
    )
    result[4, 4] = numpy.sum(
        x355 * (x146 * x254 * x286 + x254 * x287 * x79 + x255 * x286 * x79)
    )
    result[4, 5] = numpy.sum(
        x337 * (x146 * x247 * x291 + x247 * x292 * x79 + x249 * x291 * x79)
    )
    result[4, 6] = numpy.sum(
        x264 * (x142 * x266 * x282 + x142 * x269 * x280 + x178 * x266 * x280)
    )
    result[4, 7] = numpy.sum(
        x355 * (x142 * x260 * x287 + x142 * x261 * x286 + x178 * x260 * x286)
    )
    result[4, 8] = numpy.sum(
        x355 * (x142 * x254 * x292 + x142 * x255 * x291 + x178 * x254 * x291)
    )
    result[4, 9] = numpy.sum(
        x264 * (x142 * x247 * x298 + x142 * x249 * x295 + x178 * x247 * x295)
    )
    result[4, 10] = numpy.sum(
        x186 * (x173 * x274 * x282 + x173 * x279 * x280 + x210 * x274 * x280)
    )
    result[4, 11] = numpy.sum(
        x264 * (x173 * x266 * x287 + x173 * x269 * x286 + x210 * x266 * x286)
    )
    result[4, 12] = numpy.sum(
        x337 * (x173 * x260 * x292 + x173 * x261 * x291 + x210 * x260 * x291)
    )
    result[4, 13] = numpy.sum(
        x264 * (x173 * x254 * x298 + x173 * x255 * x295 + x210 * x254 * x295)
    )
    result[4, 14] = numpy.sum(
        x186 * (x173 * x247 * x308 + x173 * x249 * x303 + x210 * x247 * x303)
    )
    result[5, 0] = numpy.sum(
        x184 * (x103 * x125 * x358 + x116 * x358 * x362 + x361 * x362)
    )
    result[5, 1] = numpy.sum(
        x263 * (x126 * x358 * x91 + x126 * x361 * x89 + x128 * x358 * x89)
    )
    result[5, 2] = numpy.sum(x263 * (x116 * x366 * x89 + x125 * x371 * x89 + x366 * x91))
    result[5, 3] = numpy.sum(
        x336 * (x146 * x162 * x358 + x162 * x361 * x79 + x166 * x358 * x79)
    )
    result[5, 4] = numpy.sum(
        x337 * (x126 * x146 * x365 + x126 * x371 * x79 + x128 * x365 * x79)
    )
    result[5, 5] = numpy.sum(
        x336 * (x116 * x379 * x382 + x125 * x146 * x379 + x381 * x382)
    )
    result[5, 6] = numpy.sum(
        x263 * (x142 * x202 * x361 + x142 * x205 * x358 + x178 * x202 * x358)
    )
    result[5, 7] = numpy.sum(
        x337 * (x142 * x162 * x371 + x142 * x166 * x365 + x162 * x178 * x365)
    )
    result[5, 8] = numpy.sum(
        x337 * (x126 * x142 * x381 + x126 * x178 * x379 + x128 * x142 * x379)
    )
    result[5, 9] = numpy.sum(
        x263 * (x116 * x387 * x390 + x125 * x178 * x387 + x389 * x390)
    )
    result[5, 10] = numpy.sum(
        x184 * (x173 * x230 * x361 + x173 * x232 * x358 + x210 * x230 * x358)
    )
    result[5, 11] = numpy.sum(
        x263 * (x173 * x202 * x371 + x173 * x205 * x365 + x202 * x210 * x365)
    )
    result[5, 12] = numpy.sum(
        x336 * (x162 * x173 * x381 + x162 * x210 * x379 + x166 * x173 * x379)
    )
    result[5, 13] = numpy.sum(
        x263 * (x126 * x173 * x389 + x126 * x210 * x387 + x128 * x173 * x387)
    )
    result[5, 14] = numpy.sum(
        x184 * (x116 * x173 * x394 + x125 * x173 * x398 + x210 * x394)
    )
    result[6, 0] = numpy.sum(
        x153 * (x121 * x399 * x401 + x136 * x399 * x62 + x400 * x401)
    )
    result[6, 1] = numpy.sum(
        x257 * (x121 * x406 * x409 + x136 * x406 * x85 + x408 * x409)
    )
    result[6, 2] = numpy.sum(
        x257 * (x155 * x399 * x85 + x155 * x400 * x47 + x157 * x399 * x47)
    )
    result[6, 3] = numpy.sum(x263 * (x121 * x414 * x72 + x136 * x418 * x72 + x414 * x73))
    result[6, 4] = numpy.sum(
        x264 * (x155 * x406 * x73 + x155 * x408 * x72 + x157 * x406 * x72)
    )
    result[6, 5] = numpy.sum(
        x263 * (x191 * x399 * x73 + x191 * x400 * x72 + x195 * x399 * x72)
    )
    result[6, 6] = numpy.sum(x257 * (x121 * x424 * x67 + x136 * x429 * x67 + x140 * x424))
    result[6, 7] = numpy.sum(
        x264 * (x140 * x155 * x413 + x155 * x418 * x67 + x157 * x413 * x67)
    )
    result[6, 8] = numpy.sum(
        x264 * (x140 * x191 * x406 + x191 * x408 * x67 + x195 * x406 * x67)
    )
    result[6, 9] = numpy.sum(
        x257 * (x140 * x219 * x399 + x219 * x400 * x67 + x222 * x399 * x67)
    )
    result[6, 10] = numpy.sum(
        x153 * (x121 * x431 * x435 + x136 * x138 * x431 + x434 * x5)
    )
    result[6, 11] = numpy.sum(
        x257 * (x138 * x155 * x423 + x154 * x429 * x435 + x157 * x423 * x65)
    )
    result[6, 12] = numpy.sum(
        x263 * (x138 * x191 * x413 + x191 * x418 * x65 + x195 * x413 * x65)
    )
    result[6, 13] = numpy.sum(
        x257 * (x138 * x219 * x406 + x219 * x408 * x65 + x222 * x406 * x65)
    )
    result[6, 14] = numpy.sum(
        x153 * (x138 * x243 * x399 + x243 * x400 * x65 + x245 * x399 * x65)
    )
    result[7, 0] = numpy.sum(
        x186 * (x280 * x311 * x62 + x280 * x314 * x61 + x282 * x311 * x61)
    )
    result[7, 1] = numpy.sum(
        x264 * (x280 * x318 * x85 + x280 * x324 * x47 + x282 * x318 * x47)
    )
    result[7, 2] = numpy.sum(
        x264 * (x286 * x311 * x85 + x286 * x314 * x47 + x287 * x311 * x47)
    )
    result[7, 3] = numpy.sum(
        x337 * (x280 * x332 * x73 + x280 * x334 * x72 + x282 * x332 * x72)
    )
    result[7, 4] = numpy.sum(
        x355 * (x286 * x318 * x73 + x286 * x324 * x72 + x287 * x318 * x72)
    )
    result[7, 5] = numpy.sum(
        x337 * (x291 * x311 * x73 + x291 * x314 * x72 + x292 * x311 * x72)
    )
    result[7, 6] = numpy.sum(
        x264 * (x140 * x280 * x342 + x280 * x344 * x67 + x282 * x342 * x67)
    )
    result[7, 7] = numpy.sum(
        x355 * (x140 * x286 * x332 + x286 * x334 * x67 + x287 * x332 * x67)
    )
    result[7, 8] = numpy.sum(
        x355 * (x140 * x291 * x318 + x291 * x324 * x67 + x292 * x318 * x67)
    )
    result[7, 9] = numpy.sum(
        x264 * (x140 * x295 * x311 + x295 * x314 * x67 + x298 * x311 * x67)
    )
    result[7, 10] = numpy.sum(
        x186 * (x119 * x354 * x435 + x138 * x280 * x348 + x282 * x348 * x65)
    )
    result[7, 11] = numpy.sum(
        x264 * (x138 * x286 * x342 + x286 * x344 * x65 + x287 * x342 * x65)
    )
    result[7, 12] = numpy.sum(
        x337 * (x138 * x291 * x332 + x291 * x334 * x65 + x292 * x332 * x65)
    )
    result[7, 13] = numpy.sum(
        x264 * (x138 * x295 * x318 + x295 * x324 * x65 + x298 * x318 * x65)
    )
    result[7, 14] = numpy.sum(
        x186 * (x138 * x303 * x311 + x303 * x314 * x65 + x308 * x311 * x65)
    )
    result[8, 0] = numpy.sum(
        x186 * (x247 * x358 * x62 + x247 * x361 * x61 + x249 * x358 * x61)
    )
    result[8, 1] = numpy.sum(
        x264 * (x254 * x358 * x85 + x254 * x361 * x47 + x255 * x358 * x47)
    )
    result[8, 2] = numpy.sum(
        x264 * (x247 * x365 * x85 + x247 * x371 * x47 + x249 * x365 * x47)
    )
    result[8, 3] = numpy.sum(
        x337 * (x260 * x358 * x73 + x260 * x361 * x72 + x261 * x358 * x72)
    )
    result[8, 4] = numpy.sum(
        x355 * (x254 * x365 * x73 + x254 * x371 * x72 + x255 * x365 * x72)
    )
    result[8, 5] = numpy.sum(
        x337 * (x247 * x379 * x73 + x247 * x381 * x72 + x249 * x379 * x72)
    )
    result[8, 6] = numpy.sum(
        x264 * (x140 * x266 * x358 + x266 * x361 * x67 + x269 * x358 * x67)
    )
    result[8, 7] = numpy.sum(
        x355 * (x140 * x260 * x365 + x260 * x371 * x67 + x261 * x365 * x67)
    )
    result[8, 8] = numpy.sum(
        x355 * (x140 * x254 * x379 + x254 * x381 * x67 + x255 * x379 * x67)
    )
    result[8, 9] = numpy.sum(
        x264 * (x140 * x247 * x387 + x247 * x389 * x67 + x249 * x387 * x67)
    )
    result[8, 10] = numpy.sum(
        x186 * (x138 * x274 * x358 + x274 * x361 * x65 + x279 * x358 * x65)
    )
    result[8, 11] = numpy.sum(
        x264 * (x138 * x266 * x365 + x266 * x371 * x65 + x269 * x365 * x65)
    )
    result[8, 12] = numpy.sum(
        x337 * (x138 * x260 * x379 + x260 * x381 * x65 + x261 * x379 * x65)
    )
    result[8, 13] = numpy.sum(
        x264 * (x138 * x254 * x387 + x254 * x389 * x65 + x255 * x387 * x65)
    )
    result[8, 14] = numpy.sum(
        x186 * (x114 * x398 * x437 + x138 * x247 * x393 + x249 * x393 * x65)
    )
    result[9, 0] = numpy.sum(
        x153 * (x116 * x438 * x440 + x125 * x438 * x62 + x439 * x440)
    )
    result[9, 1] = numpy.sum(
        x257 * (x126 * x438 * x85 + x126 * x439 * x47 + x128 * x438 * x47)
    )
    result[9, 2] = numpy.sum(
        x257 * (x116 * x445 * x448 + x125 * x445 * x85 + x447 * x448)
    )
    result[9, 3] = numpy.sum(
        x263 * (x162 * x438 * x73 + x162 * x439 * x72 + x166 * x438 * x72)
    )
    result[9, 4] = numpy.sum(
        x264 * (x126 * x445 * x73 + x126 * x447 * x72 + x128 * x445 * x72)
    )
    result[9, 5] = numpy.sum(x263 * (x116 * x453 * x72 + x125 * x457 * x72 + x453 * x73))
    result[9, 6] = numpy.sum(
        x257 * (x140 * x202 * x438 + x202 * x439 * x67 + x205 * x438 * x67)
    )
    result[9, 7] = numpy.sum(
        x264 * (x140 * x162 * x445 + x162 * x447 * x67 + x166 * x445 * x67)
    )
    result[9, 8] = numpy.sum(
        x264 * (x126 * x140 * x452 + x126 * x457 * x67 + x128 * x452 * x67)
    )
    result[9, 9] = numpy.sum(x257 * (x116 * x463 * x67 + x125 * x468 * x67 + x140 * x463))
    result[9, 10] = numpy.sum(
        x153 * (x138 * x230 * x438 + x230 * x439 * x65 + x232 * x438 * x65)
    )
    result[9, 11] = numpy.sum(
        x257 * (x138 * x202 * x445 + x202 * x447 * x65 + x205 * x445 * x65)
    )
    result[9, 12] = numpy.sum(
        x263 * (x138 * x162 * x452 + x162 * x457 * x65 + x166 * x452 * x65)
    )
    result[9, 13] = numpy.sum(
        x257 * (x124 * x437 * x468 + x126 * x138 * x462 + x128 * x462 * x65)
    )
    result[9, 14] = numpy.sum(
        x153 * (x116 * x437 * x470 + x125 * x138 * x470 + x472 * x5)
    )
    result[10, 0] = numpy.sum(x123 * (x121 * x475 * x50 + x136 * x476 * x50 + x475 * x55))
    result[10, 1] = numpy.sum(x153 * (x121 * x36 * x479 + x136 * x36 * x480 + x39 * x479))
    result[10, 2] = numpy.sum(
        x153 * (x155 * x36 * x476 + x155 * x39 * x474 + x157 * x36 * x474)
    )
    result[10, 3] = numpy.sum(x184 * (x121 * x27 * x482 + x136 * x27 * x483 + x31 * x482))
    result[10, 4] = numpy.sum(
        x186 * (x155 * x27 * x480 + x155 * x31 * x478 + x157 * x27 * x478)
    )
    result[10, 5] = numpy.sum(
        x184 * (x191 * x27 * x476 + x191 * x31 * x474 + x195 * x27 * x474)
    )
    result[10, 6] = numpy.sum(
        x153 * (x10 * x486 + x121 * x485 * x487 + x136 * x24 * x485)
    )
    result[10, 7] = numpy.sum(
        x186 * (x154 * x483 * x487 + x155 * x24 * x481 + x157 * x16 * x481)
    )
    result[10, 8] = numpy.sum(
        x186 * (x16 * x191 * x480 + x16 * x195 * x478 + x191 * x24 * x478)
    )
    result[10, 9] = numpy.sum(
        x153 * (x16 * x219 * x476 + x16 * x222 * x474 + x219 * x24 * x474)
    )
    result[10, 10] = numpy.sum(
        x123
        * (
            x121 * x490
            + x433
            * (
                x114 * x432
                + x2
                * (
                    3.0 * x351
                    + 3.0 * x352
                    + 3.0 * x353
                    + 4.0 * x426
                    + 4.0 * x427
                    + 4.0 * x428
                )
                + x22 * (2.0 * ax * x489 - x488)
            )
            + x490 * x9
        )
    )
    result[10, 11] = numpy.sum(
        x153 * (x15 * x157 * x485 + x154 * x485 * x491 + x154 * x486)
    )
    result[10, 12] = numpy.sum(
        x184 * (x15 * x191 * x483 + x191 * x492 * x9 + x195 * x492)
    )
    result[10, 13] = numpy.sum(
        x153 * (x15 * x219 * x480 + x219 * x493 * x9 + x222 * x493)
    )
    result[10, 14] = numpy.sum(
        x123 * (x15 * x243 * x476 + x243 * x494 * x9 + x245 * x494)
    )
    result[11, 0] = numpy.sum(
        x153 * (x280 * x399 * x55 + x280 * x400 * x50 + x282 * x399 * x50)
    )
    result[11, 1] = numpy.sum(
        x257 * (x280 * x36 * x408 + x280 * x39 * x406 + x282 * x36 * x406)
    )
    result[11, 2] = numpy.sum(
        x257 * (x286 * x36 * x400 + x286 * x39 * x399 + x287 * x36 * x399)
    )
    result[11, 3] = numpy.sum(
        x263 * (x27 * x280 * x418 + x27 * x282 * x413 + x280 * x31 * x413)
    )
    result[11, 4] = numpy.sum(
        x264 * (x27 * x286 * x408 + x27 * x287 * x406 + x286 * x31 * x406)
    )
    result[11, 5] = numpy.sum(
        x263 * (x27 * x291 * x400 + x27 * x292 * x399 + x291 * x31 * x399)
    )
    result[11, 6] = numpy.sum(
        x257 * (x119 * x429 * x487 + x16 * x282 * x423 + x24 * x280 * x423)
    )
    result[11, 7] = numpy.sum(
        x264 * (x16 * x286 * x418 + x16 * x287 * x413 + x24 * x286 * x413)
    )
    result[11, 8] = numpy.sum(
        x264 * (x16 * x291 * x408 + x16 * x292 * x406 + x24 * x291 * x406)
    )
    result[11, 9] = numpy.sum(
        x257 * (x16 * x295 * x400 + x16 * x298 * x399 + x24 * x295 * x399)
    )
    result[11, 10] = numpy.sum(
        x153 * (x119 * x431 * x491 + x119 * x434 + x15 * x282 * x431)
    )
    result[11, 11] = numpy.sum(
        x257 * (x15 * x286 * x429 + x286 * x495 * x9 + x287 * x495)
    )
    result[11, 12] = numpy.sum(
        x263 * (x15 * x291 * x418 + x291 * x496 * x9 + x292 * x496)
    )
    result[11, 13] = numpy.sum(
        x257 * (x15 * x298 * x406 + x406 * x497 * x9 + x408 * x497)
    )
    result[11, 14] = numpy.sum(
        x153 * (x15 * x308 * x399 + x399 * x498 * x9 + x400 * x498)
    )
    result[12, 0] = numpy.sum(
        x184 * (x311 * x358 * x55 + x311 * x361 * x50 + x314 * x358 * x50)
    )
    result[12, 1] = numpy.sum(
        x263 * (x318 * x358 * x39 + x318 * x36 * x361 + x324 * x358 * x36)
    )
    result[12, 2] = numpy.sum(
        x263 * (x311 * x36 * x371 + x311 * x365 * x39 + x314 * x36 * x365)
    )
    result[12, 3] = numpy.sum(
        x336 * (x27 * x332 * x361 + x27 * x334 * x358 + x31 * x332 * x358)
    )
    result[12, 4] = numpy.sum(
        x337 * (x27 * x318 * x371 + x27 * x324 * x365 + x31 * x318 * x365)
    )
    result[12, 5] = numpy.sum(
        x336 * (x27 * x311 * x381 + x27 * x314 * x379 + x31 * x311 * x379)
    )
    result[12, 6] = numpy.sum(
        x263 * (x16 * x342 * x361 + x16 * x344 * x358 + x24 * x342 * x358)
    )
    result[12, 7] = numpy.sum(
        x337 * (x16 * x332 * x371 + x16 * x334 * x365 + x24 * x332 * x365)
    )
    result[12, 8] = numpy.sum(
        x337 * (x16 * x318 * x381 + x16 * x324 * x379 + x24 * x318 * x379)
    )
    result[12, 9] = numpy.sum(
        x263 * (x16 * x311 * x389 + x16 * x314 * x387 + x24 * x311 * x387)
    )
    result[12, 10] = numpy.sum(
        x184 * (x15 * x354 * x358 + x358 * x499 * x9 + x361 * x499)
    )
    result[12, 11] = numpy.sum(
        x263 * (x15 * x342 * x371 + x342 * x500 * x9 + x344 * x500)
    )
    result[12, 12] = numpy.sum(
        x336 * (x15 * x334 * x379 + x379 * x501 * x9 + x381 * x501)
    )
    result[12, 13] = numpy.sum(
        x263 * (x15 * x324 * x387 + x387 * x502 * x9 + x389 * x502)
    )
    result[12, 14] = numpy.sum(
        x184 * (x15 * x311 * x398 + x311 * x503 * x9 + x314 * x503)
    )
    result[13, 0] = numpy.sum(
        x153 * (x247 * x438 * x55 + x247 * x439 * x50 + x249 * x438 * x50)
    )
    result[13, 1] = numpy.sum(
        x257 * (x254 * x36 * x439 + x254 * x39 * x438 + x255 * x36 * x438)
    )
    result[13, 2] = numpy.sum(
        x257 * (x247 * x36 * x447 + x247 * x39 * x445 + x249 * x36 * x445)
    )
    result[13, 3] = numpy.sum(
        x263 * (x260 * x27 * x439 + x260 * x31 * x438 + x261 * x27 * x438)
    )
    result[13, 4] = numpy.sum(
        x264 * (x254 * x27 * x447 + x254 * x31 * x445 + x255 * x27 * x445)
    )
    result[13, 5] = numpy.sum(
        x263 * (x247 * x27 * x457 + x247 * x31 * x452 + x249 * x27 * x452)
    )
    result[13, 6] = numpy.sum(
        x257 * (x16 * x266 * x439 + x16 * x269 * x438 + x24 * x266 * x438)
    )
    result[13, 7] = numpy.sum(
        x264 * (x16 * x260 * x447 + x16 * x261 * x445 + x24 * x260 * x445)
    )
    result[13, 8] = numpy.sum(
        x264 * (x16 * x254 * x457 + x16 * x255 * x452 + x24 * x254 * x452)
    )
    result[13, 9] = numpy.sum(
        x257 * (x10 * x468 * x504 + x16 * x249 * x462 + x24 * x247 * x462)
    )
    result[13, 10] = numpy.sum(
        x153 * (x15 * x279 * x438 + x438 * x505 * x9 + x439 * x505)
    )
    result[13, 11] = numpy.sum(
        x257 * (x15 * x269 * x445 + x445 * x506 * x9 + x447 * x506)
    )
    result[13, 12] = numpy.sum(
        x263 * (x15 * x260 * x457 + x260 * x507 * x9 + x261 * x507)
    )
    result[13, 13] = numpy.sum(
        x257 * (x15 * x254 * x468 + x254 * x508 * x9 + x255 * x508)
    )
    result[13, 14] = numpy.sum(
        x153 * (x114 * x472 + x15 * x249 * x470 + x470 * x504 * x9)
    )
    result[14, 0] = numpy.sum(x123 * (x116 * x50 * x511 + x125 * x50 * x512 + x511 * x55))
    result[14, 1] = numpy.sum(
        x153 * (x126 * x36 * x512 + x126 * x39 * x510 + x128 * x36 * x510)
    )
    result[14, 2] = numpy.sum(x153 * (x116 * x36 * x515 + x125 * x36 * x516 + x39 * x515))
    result[14, 3] = numpy.sum(
        x184 * (x162 * x27 * x512 + x162 * x31 * x510 + x166 * x27 * x510)
    )
    result[14, 4] = numpy.sum(
        x186 * (x126 * x27 * x516 + x126 * x31 * x514 + x128 * x27 * x514)
    )
    result[14, 5] = numpy.sum(x184 * (x116 * x27 * x518 + x125 * x27 * x519 + x31 * x518))
    result[14, 6] = numpy.sum(
        x153 * (x16 * x202 * x512 + x16 * x205 * x510 + x202 * x24 * x510)
    )
    result[14, 7] = numpy.sum(
        x186 * (x16 * x162 * x516 + x16 * x166 * x514 + x162 * x24 * x514)
    )
    result[14, 8] = numpy.sum(
        x186 * (x124 * x519 * x520 + x126 * x24 * x517 + x128 * x16 * x517)
    )
    result[14, 9] = numpy.sum(
        x153 * (x10 * x523 + x116 * x520 * x522 + x125 * x24 * x522)
    )
    result[14, 10] = numpy.sum(
        x123 * (x15 * x230 * x512 + x230 * x524 * x9 + x232 * x524)
    )
    result[14, 11] = numpy.sum(
        x153 * (x15 * x202 * x516 + x202 * x525 * x9 + x205 * x525)
    )
    result[14, 12] = numpy.sum(
        x184 * (x15 * x162 * x519 + x162 * x526 * x9 + x166 * x526)
    )
    result[14, 13] = numpy.sum(
        x153 * (x124 * x436 * x522 * x9 + x124 * x523 + x128 * x15 * x522)
    )
    result[14, 14] = numpy.sum(
        x123
        * (
            x116 * x529
            + x436
            * (
                x119 * x471
                + x2
                * (
                    3.0 * x395
                    + 3.0 * x396
                    + 3.0 * x397
                    + 4.0 * x465
                    + 4.0 * x466
                    + 4.0 * x467
                )
                + x22 * (2.0 * ax * x528 - x527)
            )
            + x529 * x9
        )
    )
    return result


kinetic3d = {
    (0, 0): kinetic3d_00,
    (0, 1): kinetic3d_01,
    (0, 2): kinetic3d_02,
    (0, 3): kinetic3d_03,
    (0, 4): kinetic3d_04,
    (1, 0): kinetic3d_10,
    (1, 1): kinetic3d_11,
    (1, 2): kinetic3d_12,
    (1, 3): kinetic3d_13,
    (1, 4): kinetic3d_14,
    (2, 0): kinetic3d_20,
    (2, 1): kinetic3d_21,
    (2, 2): kinetic3d_22,
    (2, 3): kinetic3d_23,
    (2, 4): kinetic3d_24,
    (3, 0): kinetic3d_30,
    (3, 1): kinetic3d_31,
    (3, 2): kinetic3d_32,
    (3, 3): kinetic3d_33,
    (3, 4): kinetic3d_34,
    (4, 0): kinetic3d_40,
    (4, 1): kinetic3d_41,
    (4, 2): kinetic3d_42,
    (4, 3): kinetic3d_43,
    (4, 4): kinetic3d_44,
}
