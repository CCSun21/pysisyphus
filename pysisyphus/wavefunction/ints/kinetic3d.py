"""
Molecular integrals over Gaussian basis functions generated by sympleints.
See https://github.com/eljost/sympleints for more information.

sympleints version: 0.1.dev47+gf2d2a9c.d20230308
symppy version: 1.10.1

sympleints was executed with the following arguments:
	lmax = 4
	lauxmax = 6
	write = False
	out_dir = regen
	keys = ['ovlp', 'kin', 'dpm', 'qpm', 'dqpm']
	sph = False
	norm_pgto = True
	opt_basic = False
"""


import numpy


def kinetic3d_00(ax, da, A, bx, db, B):
    """Cartesian 3D (ss) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = 0.5 / (ax + bx)
    x3 = 2.0 * ax**2
    x4 = ax * bx * x1
    x5 = (
        5.568327996831708
        * x1**1.5
        * numpy.exp(-x4 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2))
    )

    # 1 item(s)
    result[0, 0] = numpy.sum(
        -0.5079490874739279
        * da
        * db
        * x5
        * (
            3.0 * x0
            + x3 * (x2 + (-x1 * (ax * A[0] + bx * B[0]) + A[0]) ** 2)
            + x3 * (x2 + (-x1 * (ax * A[1] + bx * B[1]) + A[1]) ** 2)
            + x3 * (x2 + (-x1 * (ax * A[2] + bx * B[2]) + A[2]) ** 2)
        )
        * numpy.sqrt(ax**1.5)
        * numpy.sqrt(bx**1.5)
    )
    return result


def kinetic3d_01(ax, da, A, bx, db, B):
    """Cartesian 3D (sp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = 2.0 * ax
    x4 = (2.0 * bx + x3) ** (-1.0)
    x5 = 2.0 * ax**2
    x6 = -x0 - x5 * (x4 + (x2 + A[0]) ** 2)
    x7 = numpy.sqrt(x1)
    x8 = 1.772453850905516 * x7
    x9 = bx * x1
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = -x11 * (x2 + B[0])
    x13 = x12 * x8
    x14 = x3 * x9
    x15 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x16 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x17 = 3.141592653589793 * x1 * x16
    x18 = 5.568327996831708 * x7
    x19 = x12 * x18
    x20 = -x1 * (ax * A[1] + bx * B[1])
    x21 = -x15 * (x0 + x5 * (x4 + (x20 + A[1]) ** 2))
    x22 = x1 * x16 * x21
    x23 = -x1 * (ax * A[2] + bx * B[2])
    x24 = -x16 * (x0 + x5 * (x4 + (x23 + A[2]) ** 2))
    x25 = x1 * x15
    x26 = 1.015898174947856 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**2.5)
    x27 = -x20 - B[1]
    x28 = x27 * x8
    x29 = x11 * x25
    x30 = x18 * x27 * x29
    x31 = x16 * x6
    x32 = -x23 - B[2]
    x33 = x32 * x8
    x34 = x18 * x32

    # 3 item(s)
    result[0, 0] = numpy.sum(
        x26 * (x13 * x15 * x17 * (x14 + x6) + x19 * x22 + x19 * x24 * x25)
    )
    result[0, 1] = numpy.sum(
        x26 * (x11 * x17 * x28 * (x14 * x15 + x21) + x24 * x30 + x30 * x31)
    )
    result[0, 2] = numpy.sum(
        x26
        * (
            x11 * x22 * x34
            + x29 * x31 * x34
            + 3.141592653589793 * x29 * x33 * (x14 * x16 + x24)
        )
    )
    return result


def kinetic3d_02(ax, da, A, bx, db, B):
    """Cartesian 3D (sd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = -x0 * (ax * A[0] + bx * B[0])
    x2 = -x1 - B[0]
    x3 = -ax
    x4 = 2.0 * ax
    x5 = 2.0 * bx
    x6 = (x4 + x5) ** (-1.0)
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x6 + (x1 + A[0]) ** 2)
    x9 = ax * x0
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = numpy.sqrt(x0)
    x13 = 1.772453850905516 * x12
    x14 = x11 * x13
    x15 = x14 * x2
    x16 = bx * x0 * x4
    x17 = x15 * (x16 + x8)
    x18 = x14 * x6
    x19 = x14 * x2**2 + x18
    x20 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x21 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x22 = 3.141592653589793 * x0 * x21
    x23 = x20 * x22
    x24 = -x0 * (ax * A[1] + bx * B[1])
    x25 = -x3 - x7 * (x6 + (x24 + A[1]) ** 2)
    x26 = x19 * x23
    x27 = -x0 * (ax * A[2] + bx * B[2])
    x28 = -x3 - x7 * (x6 + (x27 + A[2]) ** 2)
    x29 = 0.1795871221251666 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**3.5)
    x30 = 6.531972647421809 * x29
    x31 = -x24 - B[1]
    x32 = x13 * x20
    x33 = x31 * x32
    x34 = x33 * (x16 + x25)
    x35 = x11 * x22
    x36 = x34 * x35
    x37 = x17 * x23
    x38 = 5.568327996831708
    x39 = x0 * x11 * x20
    x40 = x12 * x2 * x21 * x38 * x39
    x41 = 11.31370849898476 * x29
    x42 = -x27 - B[2]
    x43 = x13 * x21
    x44 = x42 * x43
    x45 = x44 * (x16 + x28)
    x46 = 3.141592653589793 * x39
    x47 = x45 * x46
    x48 = x32 * x6
    x49 = x31**2 * x32 + x48
    x50 = x35 * x49
    x51 = x43 * x6
    x52 = x42**2 * x43 + x51
    x53 = x46 * x52

    # 6 item(s)
    result[0, 0] = numpy.sum(
        x30
        * (x23 * (x17 * x2 + x18 * x8 - x9 * (x14 - x19 * x5)) + x25 * x26 + x26 * x28)
    )
    result[0, 1] = numpy.sum(x41 * (x2 * x36 + x28 * x31 * x40 + x31 * x37))
    result[0, 2] = numpy.sum(x41 * (x2 * x47 + x25 * x40 * x42 + x37 * x42))
    result[0, 3] = numpy.sum(
        x30
        * (x28 * x50 + x35 * (x25 * x48 + x31 * x34 - x9 * (x32 - x49 * x5)) + x50 * x8)
    )
    result[0, 4] = numpy.sum(
        x41 * (x12 * x21 * x31 * x38 * x39 * x42 * x8 + x31 * x47 + x36 * x42)
    )
    result[0, 5] = numpy.sum(
        x30
        * (x25 * x53 + x46 * (x28 * x51 + x42 * x45 - x9 * (x43 - x5 * x52)) + x53 * x8)
    )
    return result


def kinetic3d_03(ax, da, A, bx, db, B):
    """Cartesian 3D (sf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = 2.0 * ax**2
    x7 = -x3 - x6 * (x2 + (x5 + A[0]) ** 2)
    x8 = -x5 - B[0]
    x9 = ax * x4
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.772453850905516 * numpy.sqrt(x4)
    x13 = x11 * x12
    x14 = x13 * x8
    x15 = x14 * x7
    x16 = 4.0 * x10
    x17 = bx * x0 * x4
    x18 = x14 * x17 + x15
    x19 = x13 * x2
    x20 = x13 * x8**2 + x19
    x21 = x18 * x8 + x19 * x7 + x9 * (x1 * x20 - x13)
    x22 = x8 * (2.0 * x19 + x20)
    x23 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x24 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x25 = 3.141592653589793 * x24 * x4
    x26 = x23 * x25
    x27 = -x4 * (ax * A[1] + bx * B[1])
    x28 = -x3 - x6 * (x2 + (x27 + A[1]) ** 2)
    x29 = x22 * x26
    x30 = -x4 * (ax * A[2] + bx * B[2])
    x31 = -x3 - x6 * (x2 + (x30 + A[2]) ** 2)
    x32 = 0.1795871221251666 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**4.5)
    x33 = 5.842373946721772 * x32
    x34 = -x27 - B[1]
    x35 = x12 * x23
    x36 = x34 * x35
    x37 = x28 * x36
    x38 = x17 * x36 + x37
    x39 = x12 * x24
    x40 = x21 * x26
    x41 = x20 * x26
    x42 = 13.06394529484362 * x32
    x43 = -x30 - B[2]
    x44 = x39 * x43
    x45 = x31 * x44
    x46 = x17 * x44 + x45
    x47 = x2 * x35
    x48 = x34**2 * x35 + x47
    x49 = x28 * x47 + x34 * x38 + x9 * (x1 * x48 - x35)
    x50 = x11 * x25
    x51 = x49 * x50
    x52 = x50 * x8
    x53 = 3.141592653589793 * x11 * x23 * x4
    x54 = x53 * x8
    x55 = x2 * x39
    x56 = x39 * x43**2 + x55
    x57 = x31 * x55 + x43 * x46 + x9 * (x1 * x56 - x39)
    x58 = x53 * x57
    x59 = x34 * (2.0 * x47 + x48)
    x60 = x50 * x59
    x61 = x43 * (2.0 * x55 + x56)
    x62 = x53 * x61

    # 10 item(s)
    result[0, 0] = numpy.sum(
        x33
        * (
            x26 * (x2 * (x14 * x16 + 2.0 * x15) + x21 * x8 + x9 * (x1 * x22 - 2.0 * x14))
            + x28 * x29
            + x29 * x31
        )
    )
    result[0, 1] = numpy.sum(x42 * (x20 * x38 * x39 + x31 * x34 * x41 + x34 * x40))
    result[0, 2] = numpy.sum(x42 * (x20 * x35 * x46 + x28 * x41 * x43 + x40 * x43))
    result[0, 3] = numpy.sum(x42 * (x18 * x39 * x48 + x31 * x48 * x52 + x51 * x8))
    result[0, 4] = numpy.sum(
        22.62741699796953
        * x32
        * (x18 * x26 * x34 * x43 + x34 * x46 * x54 + x38 * x43 * x52)
    )
    result[0, 5] = numpy.sum(x42 * (x18 * x35 * x56 + x28 * x54 * x56 + x58 * x8))
    result[0, 6] = numpy.sum(
        x33
        * (
            x31 * x60
            + x50
            * (x2 * (x16 * x36 + 2.0 * x37) + x34 * x49 + x9 * (x1 * x59 - 2.0 * x36))
            + x60 * x7
        )
    )
    result[0, 7] = numpy.sum(x42 * (x13 * x46 * x48 + x43 * x48 * x50 * x7 + x43 * x51))
    result[0, 8] = numpy.sum(x42 * (x13 * x38 * x56 + x34 * x53 * x56 * x7 + x34 * x58))
    result[0, 9] = numpy.sum(
        x33
        * (
            x28 * x62
            + x53
            * (x2 * (x16 * x44 + 2.0 * x45) + x43 * x57 + x9 * (x1 * x61 - 2.0 * x44))
            + x62 * x7
        )
    )
    return result


def kinetic3d_04(ax, da, A, bx, db, B):
    """Cartesian 3D (sg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = 2.0 * ax**2
    x8 = -x6 - x7 * (x2 + (x4 + A[0]) ** 2)
    x9 = ax * x3
    x10 = bx * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.772453850905516 * numpy.sqrt(x3)
    x13 = x11 * x12
    x14 = x13 * x5
    x15 = x14 * x8
    x16 = bx * x0 * x3
    x17 = x14 * x16 + x15
    x18 = x17 * x5
    x19 = x13 * x5**2
    x20 = x13 * x2
    x21 = x19 + x20
    x22 = x9 * (x1 * x21 - x13)
    x23 = x20 * x8
    x24 = 4.0 * x10
    x25 = x18 + x22 + x23
    x26 = x5 * (2.0 * x20 + x21)
    x27 = x2 * (x14 * x24 + 2.0 * x15) + x25 * x5 + x9 * (x1 * x26 - 2.0 * x14)
    x28 = 3.0 * x19 + 3.0 * x20
    x29 = x2 * x28 + x26 * x5
    x30 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x31 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x32 = 3.141592653589793 * x3 * x31
    x33 = x30 * x32
    x34 = -x3 * (ax * A[1] + bx * B[1])
    x35 = -x6 - x7 * (x2 + (x34 + A[1]) ** 2)
    x36 = x29 * x33
    x37 = -x3 * (ax * A[2] + bx * B[2])
    x38 = -x6 - x7 * (x2 + (x37 + A[2]) ** 2)
    x39 = 0.1795871221251666 * da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**5.5)
    x40 = 4.416419579791068 * x39
    x41 = -x34 - B[1]
    x42 = x12 * x30
    x43 = x41 * x42
    x44 = x35 * x43
    x45 = x16 * x43 + x44
    x46 = x12 * x31
    x47 = x45 * x46
    x48 = x27 * x33
    x49 = x26 * x33
    x50 = 11.68474789344354 * x39
    x51 = -x37 - B[2]
    x52 = x46 * x51
    x53 = x38 * x52
    x54 = x16 * x52 + x53
    x55 = x41 * x45
    x56 = x41**2 * x42
    x57 = x2 * x42
    x58 = x56 + x57
    x59 = x9 * (x1 * x58 - x42)
    x60 = x35 * x57
    x61 = x55 + x59 + x60
    x62 = x21 * x46
    x63 = 15.08494466531301 * x39
    x64 = 26.12789058968724 * x39
    x65 = x51 * x54
    x66 = x46 * x51**2
    x67 = x2 * x46
    x68 = x66 + x67
    x69 = x9 * (x1 * x68 - x46)
    x70 = x38 * x67
    x71 = x65 + x69 + x70
    x72 = x21 * x42
    x73 = x41 * (2.0 * x57 + x58)
    x74 = x2 * (x24 * x43 + 2.0 * x44) + x41 * x61 + x9 * (x1 * x73 - 2.0 * x43)
    x75 = x11 * x32
    x76 = x74 * x75
    x77 = x5 * x75
    x78 = 3.141592653589793 * x11 * x3 * x30
    x79 = x5 * x78
    x80 = x51 * (2.0 * x67 + x68)
    x81 = x2 * (x24 * x52 + 2.0 * x53) + x51 * x71 + x9 * (x1 * x80 - 2.0 * x52)
    x82 = x78 * x81
    x83 = 3.0 * x56 + 3.0 * x57
    x84 = x2 * x83 + x41 * x73
    x85 = x75 * x84
    x86 = x13 * x58
    x87 = 3.0 * x66 + 3.0 * x67
    x88 = x2 * x87 + x51 * x80
    x89 = x78 * x88

    # 15 item(s)
    result[0, 0] = numpy.sum(
        x40
        * (
            x33 * (3.0 * x2 * (x18 + x22 + x23) + x27 * x5 + x9 * (2.0 * bx * x29 - x28))
            + x35 * x36
            + x36 * x38
        )
    )
    result[0, 1] = numpy.sum(x50 * (x26 * x47 + x38 * x41 * x49 + x41 * x48))
    result[0, 2] = numpy.sum(x50 * (x26 * x42 * x54 + x35 * x49 * x51 + x48 * x51))
    result[0, 3] = numpy.sum(x63 * (x25 * x46 * x58 + x38 * x58 * x62 + x61 * x62))
    result[0, 4] = numpy.sum(
        x64 * (x21 * x43 * x54 + x21 * x47 * x51 + x25 * x33 * x41 * x51)
    )
    result[0, 5] = numpy.sum(x63 * (x25 * x42 * x68 + x35 * x68 * x72 + x71 * x72))
    result[0, 6] = numpy.sum(x50 * (x17 * x46 * x73 + x38 * x73 * x77 + x5 * x76))
    result[0, 7] = numpy.sum(x64 * (x14 * x54 * x58 + x17 * x52 * x58 + x51 * x61 * x77))
    result[0, 8] = numpy.sum(x64 * (x14 * x45 * x68 + x17 * x43 * x68 + x41 * x71 * x79))
    result[0, 9] = numpy.sum(x50 * (x17 * x42 * x80 + x35 * x79 * x80 + x5 * x82))
    result[0, 10] = numpy.sum(
        x40
        * (
            x38 * x85
            + x75
            * (3.0 * x2 * (x55 + x59 + x60) + x41 * x74 + x9 * (2.0 * bx * x84 - x83))
            + x8 * x85
        )
    )
    result[0, 11] = numpy.sum(x50 * (x13 * x54 * x73 + x51 * x73 * x75 * x8 + x51 * x76))
    result[0, 12] = numpy.sum(x63 * (x13 * x61 * x68 + x68 * x8 * x86 + x71 * x86))
    result[0, 13] = numpy.sum(x50 * (x13 * x45 * x80 + x41 * x78 * x8 * x80 + x41 * x82))
    result[0, 14] = numpy.sum(
        x40
        * (
            x35 * x89
            + x78
            * (3.0 * x2 * (x65 + x69 + x70) + x51 * x81 + x9 * (2.0 * bx * x88 - x87))
            + x8 * x89
        )
    )
    return result


def kinetic3d_10(ax, da, A, bx, db, B):
    """Cartesian 3D (ps) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1), dtype=float)

    x0 = -ax
    x1 = (ax + bx) ** (-1.0)
    x2 = x1 * (ax * A[0] + bx * B[0]) - A[0]
    x3 = 2.0 * ax
    x4 = (2.0 * bx + x3) ** (-1.0)
    x5 = 2.0 * ax**2
    x6 = -x0 - x5 * (x2**2 + x4)
    x7 = numpy.sqrt(x1)
    x8 = 1.772453850905516 * x7
    x9 = bx * x1
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = x11 * x2
    x13 = x12 * x8
    x14 = x3 * x9
    x15 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x16 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x17 = 3.141592653589793 * x1 * x16
    x18 = 5.568327996831708 * x7
    x19 = x12 * x18
    x20 = x1 * (ax * A[1] + bx * B[1]) - A[1]
    x21 = -x15 * (x0 + x5 * (x20**2 + x4))
    x22 = x1 * x16 * x21
    x23 = x1 * (ax * A[2] + bx * B[2]) - A[2]
    x24 = -x16 * (x0 + x5 * (x23**2 + x4))
    x25 = x1 * x15
    x26 = 1.015898174947856 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**1.5)
    x27 = x20 * x8
    x28 = x11 * x25
    x29 = x18 * x20 * x28
    x30 = x16 * x6
    x31 = x23 * x8
    x32 = x18 * x23

    # 3 item(s)
    result[0, 0] = numpy.sum(
        x26 * (x13 * x15 * x17 * (x14 + x6) + x19 * x22 + x19 * x24 * x25)
    )
    result[1, 0] = numpy.sum(
        x26 * (x11 * x17 * x27 * (x14 * x15 + x21) + x24 * x29 + x29 * x30)
    )
    result[2, 0] = numpy.sum(
        x26
        * (
            x11 * x22 * x32
            + x28 * x30 * x32
            + 3.141592653589793 * x28 * x31 * (x14 * x16 + x24)
        )
    )
    return result


def kinetic3d_11(ax, da, A, bx, db, B):
    """Cartesian 3D (pp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = -x0 * (ax * A[0] + bx * B[0])
    x2 = -x1 - A[0]
    x3 = -ax
    x4 = 2.0 * ax
    x5 = (2.0 * bx + x4) ** (-1.0)
    x6 = 2.0 * ax**2
    x7 = -x3 - x6 * (x2**2 + x5)
    x8 = numpy.sqrt(x0)
    x9 = 1.772453850905516 * x8
    x10 = bx * x0
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = -x12 * (x1 + B[0])
    x14 = x13 * x9
    x15 = x10 * x4
    x16 = x14 * (x15 + x7)
    x17 = x5 * x9
    x18 = x12 * x17
    x19 = x14 * x2 + x18
    x20 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x21 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x22 = 3.141592653589793 * x0 * x21
    x23 = x20 * x22
    x24 = -x0 * (ax * A[1] + bx * B[1])
    x25 = -x24 - A[1]
    x26 = -x3 - x6 * (x25**2 + x5)
    x27 = x19 * x23
    x28 = -x0 * (ax * A[2] + bx * B[2])
    x29 = -x28 - A[2]
    x30 = -x3 - x6 * (x29**2 + x5)
    x31 = 2.031796349895712 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**2.5)
    x32 = -x24 - B[1]
    x33 = x20 * x32
    x34 = x26 * x9
    x35 = x33 * x9
    x36 = x15 * x35 + x33 * x34
    x37 = x12 * x2
    x38 = x37 * x9
    x39 = x23 * x38 * (x15 + x7)
    x40 = x0 * x33
    x41 = 5.568327996831708 * x21 * x8
    x42 = x37 * x41
    x43 = -x28 - B[2]
    x44 = x21 * x9
    x45 = x30 * x44
    x46 = x43 * x44
    x47 = x15 * x46 + x43 * x45
    x48 = x0 * x20
    x49 = 3.141592653589793 * x48
    x50 = x26 * x48
    x51 = x16 * x23
    x52 = x20 * x25
    x53 = x52 * (x15 * x9 + x34)
    x54 = x0 * x52
    x55 = x41 * x54
    x56 = x17 * x20
    x57 = x25 * x35 + x56
    x58 = x12 * x22
    x59 = x57 * x58
    x60 = 3.141592653589793 * x12
    x61 = x12 * x7
    x62 = x29 * (x15 * x44 + x45)
    x63 = x29 * x41
    x64 = x17 * x21
    x65 = x29 * x46 + x64
    x66 = x12 * x49
    x67 = x65 * x66

    # 9 item(s)
    result[0, 0] = numpy.sum(
        x31 * (x23 * (x15 * x19 + x16 * x2 + x18 * x7) + x26 * x27 + x27 * x30)
    )
    result[0, 1] = numpy.sum(x31 * (x22 * x36 * x37 + x30 * x40 * x42 + x32 * x39))
    result[0, 2] = numpy.sum(x31 * (x37 * x47 * x49 + x39 * x43 + x42 * x43 * x50))
    result[1, 0] = numpy.sum(x31 * (x13 * x22 * x53 + x13 * x30 * x55 + x25 * x51))
    result[1, 1] = numpy.sum(
        x31 * (x30 * x59 + x58 * (x15 * x57 + x25 * x36 + x26 * x56) + x59 * x7)
    )
    result[1, 2] = numpy.sum(x31 * (x43 * x53 * x58 + x43 * x55 * x61 + x47 * x54 * x60))
    result[2, 0] = numpy.sum(x31 * (x13 * x49 * x62 + x13 * x50 * x63 + x29 * x51))
    result[2, 1] = numpy.sum(x31 * (x29 * x36 * x58 + x40 * x60 * x62 + x40 * x61 * x63))
    result[2, 2] = numpy.sum(
        x31 * (x26 * x67 + x66 * (x15 * x65 + x29 * x47 + x30 * x64) + x67 * x7)
    )
    return result


def kinetic3d_12(ax, da, A, bx, db, B):
    """Cartesian 3D (pd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x2 + x6**2)
    x9 = -x5 - B[0]
    x10 = ax * x4
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x4)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = bx * x0
    x17 = x16 * x4
    x18 = x15 * (x17 + x8)
    x19 = x14 * x6
    x20 = x19 * (x17 + x8)
    x21 = x14 * x2
    x22 = x19 * x9 + x21
    x23 = x22 * x4
    x24 = x21 * x8
    x25 = x16 * x23 + x18 * x6 + x24
    x26 = x2 * (x15 + x19) + x22 * x9
    x27 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x28 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x29 = 3.141592653589793 * x28 * x4
    x30 = x27 * x29
    x31 = -x4 * (ax * A[1] + bx * B[1])
    x32 = -x31 - A[1]
    x33 = -x3 - x7 * (x2 + x32**2)
    x34 = x26 * x30
    x35 = -x4 * (ax * A[2] + bx * B[2])
    x36 = -x35 - A[2]
    x37 = -x3 - x7 * (x2 + x36**2)
    x38 = 0.1795871221251666 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**3.5)
    x39 = 13.06394529484362 * x38
    x40 = -x31 - B[1]
    x41 = x13 * x27
    x42 = x40 * x41
    x43 = x42 * (x17 + x33)
    x44 = x13 * x28
    x45 = x25 * x30
    x46 = 3.141592653589793 * x27
    x47 = x23 * x28 * x46
    x48 = 22.62741699796953 * x38
    x49 = -x35 - B[2]
    x50 = x44 * x49
    x51 = x50 * (x17 + x37)
    x52 = x2 * x41
    x53 = x40**2 * x41 + x52
    x54 = x33 * x52
    x55 = x12 * x29
    x56 = x55 * (x10 * (x1 * x53 - x41) + x40 * x43 + x54)
    x57 = x55 * x6
    x58 = x12 * x4 * x46
    x59 = x58 * x6
    x60 = x30 * x49
    x61 = x2 * x44
    x62 = x44 * x49**2 + x61
    x63 = x37 * x61
    x64 = x58 * (x10 * (x1 * x62 - x44) + x49 * x51 + x63)
    x65 = x14 * x9**2 + x21
    x66 = x32 * x41
    x67 = x66 * (x17 + x33)
    x68 = x30 * (x10 * (x1 * x65 - x14) + x18 * x9 + x24)
    x69 = x30 * x65
    x70 = x40 * x66 + x52
    x71 = x17 * x70 + x32 * x43 + x54
    x72 = x55 * x71
    x73 = x55 * x9
    x74 = x32 * x58
    x75 = x2 * (x42 + x66) + x40 * x70
    x76 = x55 * x75
    x77 = x55 * x8
    x78 = x36 * x44
    x79 = x78 * (x17 + x37)
    x80 = x58 * x9
    x81 = x49 * x78 + x61
    x82 = x17 * x81 + x36 * x51 + x63
    x83 = x58 * x82
    x84 = x2 * (x50 + x78) + x49 * x81
    x85 = x58 * x84

    # 18 item(s)
    result[0, 0] = numpy.sum(
        x39
        * (
            x30 * (x10 * (x1 * x26 - x19) + x2 * (x18 + x20) + x25 * x9)
            + x33 * x34
            + x34 * x37
        )
    )
    result[0, 1] = numpy.sum(x48 * (x22 * x43 * x44 + x37 * x40 * x47 + x40 * x45))
    result[0, 2] = numpy.sum(x48 * (x22 * x41 * x51 + x33 * x47 * x49 + x45 * x49))
    result[0, 3] = numpy.sum(x39 * (x20 * x44 * x53 + x37 * x53 * x57 + x56 * x6))
    result[0, 4] = numpy.sum(x48 * (x20 * x40 * x60 + x40 * x51 * x59 + x43 * x49 * x57))
    result[0, 5] = numpy.sum(x39 * (x20 * x41 * x62 + x33 * x59 * x62 + x6 * x64))
    result[1, 0] = numpy.sum(x39 * (x32 * x37 * x69 + x32 * x68 + x44 * x65 * x67))
    result[1, 1] = numpy.sum(x48 * (x18 * x44 * x70 + x37 * x70 * x73 + x72 * x9))
    result[1, 2] = numpy.sum(x48 * (x18 * x32 * x60 + x49 * x67 * x73 + x51 * x74 * x9))
    result[1, 3] = numpy.sum(
        x39
        * (
            x37 * x76
            + x55 * (x10 * (x1 * x75 - x66) + x2 * (x43 + x67) + x40 * x71)
            + x76 * x8
        )
    )
    result[1, 4] = numpy.sum(x48 * (x14 * x51 * x70 + x49 * x70 * x77 + x49 * x72))
    result[1, 5] = numpy.sum(x39 * (x14 * x62 * x67 + x32 * x64 + x62 * x74 * x8))
    result[2, 0] = numpy.sum(x39 * (x33 * x36 * x69 + x36 * x68 + x41 * x65 * x79))
    result[2, 1] = numpy.sum(
        x48 * (x18 * x30 * x36 * x40 + x36 * x43 * x73 + x40 * x79 * x80)
    )
    result[2, 2] = numpy.sum(x48 * (x18 * x41 * x81 + x33 * x80 * x81 + x83 * x9))
    result[2, 3] = numpy.sum(x39 * (x14 * x53 * x79 + x36 * x53 * x77 + x36 * x56))
    result[2, 4] = numpy.sum(x48 * (x14 * x43 * x81 + x40 * x58 * x8 * x81 + x40 * x83))
    result[2, 5] = numpy.sum(
        x39
        * (
            x33 * x85
            + x58 * (x10 * (x1 * x84 - x78) + x2 * (x51 + x79) + x49 * x82)
            + x8 * x85
        )
    )
    return result


def kinetic3d_13(ax, da, A, bx, db, B):
    """Cartesian 3D (pf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = 2.0 * ax**2
    x8 = -x6 - x7 * (x2 + x5**2)
    x9 = -x4 - B[0]
    x10 = ax * x3
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x15 * x8
    x17 = bx * x0 * x3
    x18 = x15 * x17 + x16
    x19 = x18 * x5
    x20 = x14 * x2
    x21 = x14 * x5
    x22 = x21 * x9
    x23 = x20 + x22
    x24 = 4.0 * x11
    x25 = x20 * x8
    x26 = x14 * x9**2
    x27 = x20 + x26
    x28 = x10 * (x1 * x27 - x14) + x18 * x9
    x29 = x21 * (x17 + x8)
    x30 = x17 * x23 + x19 + x25
    x31 = x2 * (x15 + x21) + x23 * x9
    x32 = x10 * (x1 * x31 - x21) + x2 * (x18 + x29) + x30 * x9
    x33 = 2.0 * x22
    x34 = x2 * (3.0 * x20 + x26 + x33) + x31 * x9
    x35 = 2.0 * x20
    x36 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x37 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x38 = 3.141592653589793 * x3 * x37
    x39 = x36 * x38
    x40 = -x3 * (ax * A[1] + bx * B[1])
    x41 = -x40 - A[1]
    x42 = -x6 - x7 * (x2 + x41**2)
    x43 = x34 * x39
    x44 = -x3 * (ax * A[2] + bx * B[2])
    x45 = -x44 - A[2]
    x46 = -x6 - x7 * (x2 + x45**2)
    x47 = 0.1795871221251666 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**4.5)
    x48 = 11.68474789344354 * x47
    x49 = -x40 - B[1]
    x50 = x13 * x36
    x51 = x49 * x50
    x52 = x42 * x51
    x53 = x17 * x51 + x52
    x54 = x13 * x37
    x55 = x32 * x39
    x56 = x31 * x39
    x57 = 26.12789058968724 * x47
    x58 = -x44 - B[2]
    x59 = x54 * x58
    x60 = x46 * x59
    x61 = x17 * x59 + x60
    x62 = x49**2 * x50
    x63 = x2 * x50
    x64 = x62 + x63
    x65 = x54 * x64
    x66 = x42 * x63
    x67 = x10 * (x1 * x64 - x50) + x49 * x53
    x68 = x66 + x67
    x69 = x39 * x58
    x70 = 45.25483399593905 * x47
    x71 = x54 * x58**2
    x72 = x2 * x54
    x73 = x71 + x72
    x74 = x50 * x73
    x75 = x46 * x72
    x76 = x10 * (x1 * x73 - x54) + x58 * x61
    x77 = x75 + x76
    x78 = 2.0 * x63
    x79 = x49 * (x64 + x78)
    x80 = x12 * x38
    x81 = x80 * (x10 * (x1 * x79 - 2.0 * x51) + x2 * (x24 * x51 + 2.0 * x52) + x49 * x68)
    x82 = x5 * x80
    x83 = 3.141592653589793 * x12 * x3 * x36
    x84 = x5 * x83
    x85 = 2.0 * x72
    x86 = x58 * (x73 + x85)
    x87 = x83 * (x10 * (x1 * x86 - 2.0 * x59) + x2 * (x24 * x59 + 2.0 * x60) + x58 * x77)
    x88 = x9 * (x27 + x35)
    x89 = x41 * x50
    x90 = x89 * (x17 + x42)
    x91 = x25 + x28
    x92 = x39 * (x10 * (x1 * x88 - 2.0 * x15) + x2 * (x15 * x24 + 2.0 * x16) + x9 * x91)
    x93 = x39 * x88
    x94 = x41 * x53
    x95 = x49 * x89
    x96 = x63 + x95
    x97 = x17 * x96 + x66 + x94
    x98 = x27 * x54
    x99 = x2 * (x51 + x89) + x49 * x96
    x100 = x10 * (x1 * x99 - x89) + x2 * (x53 + x90) + x49 * x97
    x101 = x100 * x80
    x102 = x80 * x9
    x103 = x41 * x83
    x104 = 2.0 * x95
    x105 = x2 * (x104 + x62 + 3.0 * x63) + x49 * x99
    x106 = x105 * x80
    x107 = x8 * x80
    x108 = x14 * x73
    x109 = x45 * x54
    x110 = x109 * (x17 + x46)
    x111 = x45 * x61
    x112 = x109 * x58
    x113 = x112 + x72
    x114 = x111 + x113 * x17 + x75
    x115 = x27 * x50
    x116 = x83 * x9
    x117 = x113 * x58 + x2 * (x109 + x59)
    x118 = x10 * (x1 * x117 - x109) + x114 * x58 + x2 * (x110 + x61)
    x119 = x118 * x83
    x120 = x14 * x64
    x121 = 2.0 * x112
    x122 = x117 * x58 + x2 * (x121 + x71 + 3.0 * x72)
    x123 = x122 * x83

    # 30 item(s)
    result[0, 0] = numpy.sum(
        x48
        * (
            x39
            * (
                -x10 * (-2.0 * bx * x34 + x33 + x35)
                + x2 * (2.0 * x19 + x23 * x24 + 3.0 * x25 + x28)
                + x32 * x9
            )
            + x42 * x43
            + x43 * x46
        )
    )
    result[0, 1] = numpy.sum(x57 * (x31 * x53 * x54 + x46 * x49 * x56 + x49 * x55))
    result[0, 2] = numpy.sum(x57 * (x31 * x50 * x61 + x42 * x56 * x58 + x55 * x58))
    result[0, 3] = numpy.sum(x57 * (x23 * x46 * x65 + x23 * x54 * x68 + x30 * x65))
    result[0, 4] = numpy.sum(x70 * (x23 * x51 * x61 + x23 * x53 * x59 + x30 * x49 * x69))
    result[0, 5] = numpy.sum(x57 * (x23 * x42 * x74 + x23 * x50 * x77 + x30 * x74))
    result[0, 6] = numpy.sum(x48 * (x29 * x54 * x79 + x46 * x79 * x82 + x5 * x81))
    result[0, 7] = numpy.sum(x57 * (x21 * x61 * x64 + x29 * x59 * x64 + x58 * x68 * x82))
    result[0, 8] = numpy.sum(x57 * (x21 * x53 * x73 + x29 * x51 * x73 + x49 * x77 * x84))
    result[0, 9] = numpy.sum(x48 * (x29 * x50 * x86 + x42 * x84 * x86 + x5 * x87))
    result[1, 0] = numpy.sum(x48 * (x41 * x46 * x93 + x41 * x92 + x54 * x88 * x90))
    result[1, 1] = numpy.sum(x57 * (x46 * x96 * x98 + x54 * x91 * x96 + x97 * x98))
    result[1, 2] = numpy.sum(x57 * (x27 * x59 * x90 + x27 * x61 * x89 + x41 * x69 * x91))
    result[1, 3] = numpy.sum(x57 * (x101 * x9 + x102 * x46 * x99 + x18 * x54 * x99))
    result[1, 4] = numpy.sum(x70 * (x102 * x58 * x97 + x15 * x61 * x96 + x18 * x59 * x96))
    result[1, 5] = numpy.sum(x57 * (x103 * x77 * x9 + x15 * x73 * x90 + x18 * x73 * x89))
    result[1, 6] = numpy.sum(
        x48
        * (
            x106 * x46
            + x106 * x8
            + x80
            * (
                -x10 * (-2.0 * bx * x105 + x104 + x78)
                + x100 * x49
                + x2 * (x24 * x96 + 3.0 * x66 + x67 + 2.0 * x94)
            )
        )
    )
    result[1, 7] = numpy.sum(x57 * (x101 * x58 + x107 * x58 * x99 + x14 * x61 * x99))
    result[1, 8] = numpy.sum(x57 * (x108 * x8 * x96 + x108 * x97 + x14 * x77 * x96))
    result[1, 9] = numpy.sum(x48 * (x103 * x8 * x86 + x14 * x86 * x90 + x41 * x87))
    result[2, 0] = numpy.sum(x48 * (x110 * x50 * x88 + x42 * x45 * x93 + x45 * x92))
    result[2, 1] = numpy.sum(
        x57 * (x109 * x27 * x53 + x110 * x27 * x51 + x39 * x45 * x49 * x91)
    )
    result[2, 2] = numpy.sum(x57 * (x113 * x115 * x42 + x113 * x50 * x91 + x114 * x115))
    result[2, 3] = numpy.sum(
        x57 * (x102 * x45 * x68 + x109 * x18 * x64 + x110 * x15 * x64)
    )
    result[2, 4] = numpy.sum(
        x70 * (x113 * x15 * x53 + x113 * x18 * x51 + x114 * x116 * x49)
    )
    result[2, 5] = numpy.sum(x57 * (x116 * x117 * x42 + x117 * x18 * x50 + x119 * x9))
    result[2, 6] = numpy.sum(x48 * (x107 * x45 * x79 + x110 * x14 * x79 + x45 * x81))
    result[2, 7] = numpy.sum(x57 * (x113 * x120 * x8 + x113 * x14 * x68 + x114 * x120))
    result[2, 8] = numpy.sum(
        x57 * (x117 * x14 * x53 + x117 * x49 * x8 * x83 + x119 * x49)
    )
    result[2, 9] = numpy.sum(
        x48
        * (
            x123 * x42
            + x123 * x8
            + x83
            * (
                -x10 * (-2.0 * bx * x122 + x121 + x85)
                + x118 * x58
                + x2 * (2.0 * x111 + x113 * x24 + 3.0 * x75 + x76)
            )
        )
    )
    return result


def kinetic3d_14(ax, da, A, bx, db, B):
    """Cartesian 3D (pg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = -ax
    x4 = (ax + bx) ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = -x5 - A[0]
    x7 = 2.0 * ax**2
    x8 = -x3 - x7 * (x2 + x6**2)
    x9 = -x5 - B[0]
    x10 = ax * x4
    x11 = bx * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x4)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x15 * x8
    x17 = bx * x0 * x4
    x18 = x15 * x17 + x16
    x19 = x14 * x6
    x20 = x19 * (x17 + x8)
    x21 = x2 * (x18 + x20)
    x22 = x18 * x6
    x23 = x14 * x2
    x24 = x19 * x9
    x25 = x23 + x24
    x26 = x23 * x8
    x27 = x17 * x25 + x22 + x26
    x28 = x27 * x9
    x29 = x2 * (x15 + x19)
    x30 = x25 * x9
    x31 = x29 + x30
    x32 = x10 * (x1 * x31 - x19)
    x33 = 4.0 * x11
    x34 = x18 * x9
    x35 = x14 * x9**2
    x36 = x23 + x35
    x37 = x10 * (x1 * x36 - x14)
    x38 = x34 + x37
    x39 = x26 + x38
    x40 = 2.0 * x23
    x41 = x9 * (x36 + x40)
    x42 = x10 * (x1 * x41 - 2.0 * x15) + x2 * (x15 * x33 + 2.0 * x16) + x39 * x9
    x43 = 3.0 * x26
    x44 = x21 + x28 + x32
    x45 = 3.0 * x23
    x46 = 2.0 * x24
    x47 = x2 * (x35 + x45 + x46) + x31 * x9
    x48 = (
        -x10 * (-2.0 * bx * x47 + x40 + x46)
        + x2 * (2.0 * x22 + x25 * x33 + x38 + x43)
        + x44 * x9
    )
    x49 = 3.0 * x29 + 3.0 * x30
    x50 = x2 * (x41 + x49) + x47 * x9
    x51 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x52 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x53 = 3.141592653589793 * x4 * x52
    x54 = x51 * x53
    x55 = -x4 * (ax * A[1] + bx * B[1])
    x56 = -x55 - A[1]
    x57 = -x3 - x7 * (x2 + x56**2)
    x58 = x50 * x54
    x59 = -x4 * (ax * A[2] + bx * B[2])
    x60 = -x59 - A[2]
    x61 = -x3 - x7 * (x2 + x60**2)
    x62 = 0.1795871221251666 * da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**5.5)
    x63 = 8.832839159582136 * x62
    x64 = -x55 - B[1]
    x65 = x13 * x51
    x66 = x64 * x65
    x67 = x57 * x66
    x68 = x17 * x66 + x67
    x69 = x13 * x52
    x70 = x48 * x54
    x71 = x47 * x54
    x72 = 23.36949578688709 * x62
    x73 = -x59 - B[2]
    x74 = x69 * x73
    x75 = x61 * x74
    x76 = x17 * x74 + x75
    x77 = x2 * x65
    x78 = x57 * x77
    x79 = x64 * x68
    x80 = x64**2 * x65
    x81 = x77 + x80
    x82 = x10 * (x1 * x81 - x65)
    x83 = x79 + x82
    x84 = x78 + x83
    x85 = x31 * x69
    x86 = 30.16988933062603 * x62
    x87 = x54 * x73
    x88 = 52.25578117937447 * x62
    x89 = x2 * x69
    x90 = x61 * x89
    x91 = x73 * x76
    x92 = x69 * x73**2
    x93 = x89 + x92
    x94 = x10 * (x1 * x93 - x69)
    x95 = x91 + x94
    x96 = x90 + x95
    x97 = x31 * x65
    x98 = 2.0 * x77
    x99 = x64 * (x81 + x98)
    x100 = x69 * x99
    x101 = x10 * (x1 * x99 - 2.0 * x66) + x2 * (x33 * x66 + 2.0 * x67) + x64 * x84
    x102 = 2.0 * x89
    x103 = x73 * (x102 + x93)
    x104 = x103 * x65
    x105 = x10 * (x1 * x103 - 2.0 * x74) + x2 * (x33 * x74 + 2.0 * x75) + x73 * x96
    x106 = 3.0 * x77
    x107 = x106 + 3.0 * x80
    x108 = x107 * x2 + x64 * x99
    x109 = 3.0 * x78
    x110 = x12 * x53
    x111 = x110 * (
        x10 * (2.0 * bx * x108 - x107) + x101 * x64 + x2 * (x109 + 3.0 * x79 + 3.0 * x82)
    )
    x112 = x110 * x6
    x113 = 3.141592653589793 * x12 * x4 * x51
    x114 = x113 * x6
    x115 = 3.0 * x89
    x116 = x115 + 3.0 * x92
    x117 = x103 * x73 + x116 * x2
    x118 = 3.0 * x90
    x119 = x113 * (
        x10 * (2.0 * bx * x117 - x116) + x105 * x73 + x2 * (x118 + 3.0 * x91 + 3.0 * x94)
    )
    x120 = 3.0 * x35 + x45
    x121 = x120 * x2 + x41 * x9
    x122 = x56 * x65
    x123 = x122 * (x17 + x57)
    x124 = x54 * (
        x10 * (2.0 * bx * x121 - x120) + x2 * (3.0 * x34 + 3.0 * x37 + x43) + x42 * x9
    )
    x125 = x121 * x54
    x126 = x56 * x68
    x127 = x122 * x64
    x128 = x127 + x77
    x129 = x126 + x128 * x17 + x78
    x130 = x41 * x69
    x131 = x2 * (x122 + x66)
    x132 = x128 * x64
    x133 = x131 + x132
    x134 = x133 * x69
    x135 = x2 * (x123 + x68)
    x136 = x129 * x64
    x137 = x10 * (x1 * x133 - x122)
    x138 = x135 + x136 + x137
    x139 = 2.0 * x127
    x140 = x133 * x64 + x2 * (x106 + x139 + x80)
    x141 = (
        -x10 * (-2.0 * bx * x140 + x139 + x98)
        + x138 * x64
        + x2 * (x109 + 2.0 * x126 + x128 * x33 + x83)
    )
    x142 = x110 * x141
    x143 = x110 * x9
    x144 = x113 * x56
    x145 = 3.0 * x131 + 3.0 * x132
    x146 = x140 * x64 + x2 * (x145 + x99)
    x147 = x110 * x146
    x148 = x110 * x8
    x149 = x133 * x14
    x150 = x103 * x14
    x151 = x60 * x69
    x152 = x151 * (x17 + x61)
    x153 = x60 * x76
    x154 = x151 * x73
    x155 = x154 + x89
    x156 = x153 + x155 * x17 + x90
    x157 = x41 * x65
    x158 = x2 * (x151 + x74)
    x159 = x155 * x73
    x160 = x158 + x159
    x161 = x160 * x65
    x162 = x2 * (x152 + x76)
    x163 = x156 * x73
    x164 = x10 * (x1 * x160 - x151)
    x165 = x162 + x163 + x164
    x166 = x113 * x9
    x167 = 2.0 * x154
    x168 = x160 * x73 + x2 * (x115 + x167 + x92)
    x169 = (
        -x10 * (-2.0 * bx * x168 + x102 + x167)
        + x165 * x73
        + x2 * (x118 + 2.0 * x153 + x155 * x33 + x95)
    )
    x170 = x113 * x169
    x171 = x14 * x99
    x172 = x14 * x160
    x173 = 3.0 * x158 + 3.0 * x159
    x174 = x168 * x73 + x2 * (x103 + x173)
    x175 = x113 * x174

    # 45 item(s)
    result[0, 0] = numpy.sum(
        x63
        * (
            x54
            * (
                x10 * (2.0 * bx * x50 - x49)
                + x2 * (3.0 * x21 + 3.0 * x28 + 3.0 * x32 + x42)
                + x48 * x9
            )
            + x57 * x58
            + x58 * x61
        )
    )
    result[0, 1] = numpy.sum(x72 * (x47 * x68 * x69 + x61 * x64 * x71 + x64 * x70))
    result[0, 2] = numpy.sum(x72 * (x47 * x65 * x76 + x57 * x71 * x73 + x70 * x73))
    result[0, 3] = numpy.sum(x86 * (x44 * x69 * x81 + x61 * x81 * x85 + x84 * x85))
    result[0, 4] = numpy.sum(x88 * (x31 * x66 * x76 + x31 * x68 * x74 + x44 * x64 * x87))
    result[0, 5] = numpy.sum(x86 * (x44 * x65 * x93 + x57 * x93 * x97 + x96 * x97))
    result[0, 6] = numpy.sum(x72 * (x100 * x25 * x61 + x100 * x27 + x101 * x25 * x69))
    result[0, 7] = numpy.sum(x88 * (x25 * x74 * x84 + x25 * x76 * x81 + x27 * x74 * x81))
    result[0, 8] = numpy.sum(x88 * (x25 * x66 * x96 + x25 * x68 * x93 + x27 * x66 * x93))
    result[0, 9] = numpy.sum(x72 * (x104 * x25 * x57 + x104 * x27 + x105 * x25 * x65))
    result[0, 10] = numpy.sum(x63 * (x108 * x112 * x61 + x108 * x20 * x69 + x111 * x6))
    result[0, 11] = numpy.sum(
        x72 * (x101 * x112 * x73 + x19 * x76 * x99 + x20 * x74 * x99)
    )
    result[0, 12] = numpy.sum(x86 * (x19 * x81 * x96 + x19 * x84 * x93 + x20 * x81 * x93))
    result[0, 13] = numpy.sum(
        x72 * (x103 * x19 * x68 + x103 * x20 * x66 + x105 * x114 * x64)
    )
    result[0, 14] = numpy.sum(x63 * (x114 * x117 * x57 + x117 * x20 * x65 + x119 * x6))
    result[1, 0] = numpy.sum(x63 * (x121 * x123 * x69 + x124 * x56 + x125 * x56 * x61))
    result[1, 1] = numpy.sum(x72 * (x128 * x130 * x61 + x128 * x42 * x69 + x129 * x130))
    result[1, 2] = numpy.sum(
        x72 * (x122 * x41 * x76 + x123 * x41 * x74 + x42 * x56 * x87)
    )
    result[1, 3] = numpy.sum(x86 * (x134 * x36 * x61 + x134 * x39 + x138 * x36 * x69))
    result[1, 4] = numpy.sum(
        x88 * (x128 * x36 * x76 + x128 * x39 * x74 + x129 * x36 * x74)
    )
    result[1, 5] = numpy.sum(
        x86 * (x122 * x36 * x96 + x122 * x39 * x93 + x123 * x36 * x93)
    )
    result[1, 6] = numpy.sum(x72 * (x140 * x143 * x61 + x140 * x18 * x69 + x142 * x9))
    result[1, 7] = numpy.sum(
        x88 * (x133 * x15 * x76 + x133 * x18 * x74 + x138 * x143 * x73)
    )
    result[1, 8] = numpy.sum(
        x88 * (x128 * x15 * x96 + x128 * x18 * x93 + x129 * x15 * x93)
    )
    result[1, 9] = numpy.sum(
        x72 * (x103 * x122 * x18 + x103 * x123 * x15 + x105 * x144 * x9)
    )
    result[1, 10] = numpy.sum(
        x63
        * (
            x110
            * (
                x10 * (2.0 * bx * x146 - x145)
                + x141 * x64
                + x2 * (x101 + 3.0 * x135 + 3.0 * x136 + 3.0 * x137)
            )
            + x147 * x61
            + x147 * x8
        )
    )
    result[1, 11] = numpy.sum(x72 * (x14 * x140 * x76 + x140 * x148 * x73 + x142 * x73))
    result[1, 12] = numpy.sum(x86 * (x138 * x14 * x93 + x149 * x8 * x93 + x149 * x96))
    result[1, 13] = numpy.sum(x72 * (x105 * x128 * x14 + x128 * x150 * x8 + x129 * x150))
    result[1, 14] = numpy.sum(x63 * (x117 * x123 * x14 + x117 * x144 * x8 + x119 * x56))
    result[2, 0] = numpy.sum(x63 * (x121 * x152 * x65 + x124 * x60 + x125 * x57 * x60))
    result[2, 1] = numpy.sum(
        x72 * (x151 * x41 * x68 + x152 * x41 * x66 + x42 * x54 * x60 * x64)
    )
    result[2, 2] = numpy.sum(x72 * (x155 * x157 * x57 + x155 * x42 * x65 + x156 * x157))
    result[2, 3] = numpy.sum(
        x86 * (x151 * x36 * x84 + x151 * x39 * x81 + x152 * x36 * x81)
    )
    result[2, 4] = numpy.sum(
        x88 * (x155 * x36 * x68 + x155 * x39 * x66 + x156 * x36 * x66)
    )
    result[2, 5] = numpy.sum(x86 * (x161 * x36 * x57 + x161 * x39 + x165 * x36 * x65))
    result[2, 6] = numpy.sum(
        x72 * (x101 * x143 * x60 + x15 * x152 * x99 + x151 * x18 * x99)
    )
    result[2, 7] = numpy.sum(
        x88 * (x15 * x155 * x84 + x15 * x156 * x81 + x155 * x18 * x81)
    )
    result[2, 8] = numpy.sum(
        x88 * (x15 * x160 * x68 + x160 * x18 * x66 + x165 * x166 * x64)
    )
    result[2, 9] = numpy.sum(x72 * (x166 * x168 * x57 + x168 * x18 * x65 + x170 * x9))
    result[2, 10] = numpy.sum(x63 * (x108 * x14 * x152 + x108 * x148 * x60 + x111 * x60))
    result[2, 11] = numpy.sum(x72 * (x101 * x14 * x155 + x155 * x171 * x8 + x156 * x171))
    result[2, 12] = numpy.sum(x86 * (x14 * x165 * x81 + x172 * x8 * x81 + x172 * x84))
    result[2, 13] = numpy.sum(
        x72 * (x113 * x168 * x64 * x8 + x14 * x168 * x68 + x170 * x64)
    )
    result[2, 14] = numpy.sum(
        x63
        * (
            x113
            * (
                x10 * (2.0 * bx * x174 - x173)
                + x169 * x73
                + x2 * (x105 + 3.0 * x162 + 3.0 * x163 + 3.0 * x164)
            )
            + x175 * x57
            + x175 * x8
        )
    )
    return result


def kinetic3d_20(ax, da, A, bx, db, B):
    """Cartesian 3D (ds) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = x0 * (ax * A[0] + bx * B[0]) - A[0]
    x2 = -ax
    x3 = x1**2
    x4 = 2.0 * ax
    x5 = (2.0 * bx + x4) ** (-1.0)
    x6 = 2.0 * ax**2
    x7 = -x2 - x6 * (x3 + x5)
    x8 = bx * x0
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = numpy.sqrt(x0)
    x12 = 1.772453850905516 * x11
    x13 = x10 * x12
    x14 = x1 * x13
    x15 = x4 * x8
    x16 = x14 * (x15 + x7)
    x17 = x13 * x5
    x18 = x13 * x3 + x17
    x19 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x20 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x21 = 3.141592653589793 * x0 * x20
    x22 = x19 * x21
    x23 = x0 * (ax * A[1] + bx * B[1]) - A[1]
    x24 = x23**2
    x25 = -x2 - x6 * (x24 + x5)
    x26 = x18 * x22
    x27 = x0 * (ax * A[2] + bx * B[2]) - A[2]
    x28 = x27**2
    x29 = -x2 - x6 * (x28 + x5)
    x30 = 0.1795871221251666 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**1.5)
    x31 = 6.531972647421809 * x30
    x32 = x12 * x19
    x33 = x23 * x32
    x34 = x33 * (x15 + x25)
    x35 = x10 * x21
    x36 = x34 * x35
    x37 = x16 * x22
    x38 = 5.568327996831708
    x39 = x0 * x10 * x19
    x40 = x1 * x11 * x20 * x38 * x39
    x41 = 11.31370849898476 * x30
    x42 = x12 * x20
    x43 = x27 * x42
    x44 = x43 * (x15 + x29)
    x45 = 3.141592653589793 * x39
    x46 = x44 * x45
    x47 = x32 * x5
    x48 = x24 * x32 + x47
    x49 = x35 * x48
    x50 = x42 * x5
    x51 = x28 * x42 + x50
    x52 = x45 * x51

    # 6 item(s)
    result[0, 0] = numpy.sum(
        x31
        * (x22 * (x1 * x16 + x17 * x7 - x8 * (x13 - x18 * x4)) + x25 * x26 + x26 * x29)
    )
    result[1, 0] = numpy.sum(x41 * (x1 * x36 + x23 * x29 * x40 + x23 * x37))
    result[2, 0] = numpy.sum(x41 * (x1 * x46 + x25 * x27 * x40 + x27 * x37))
    result[3, 0] = numpy.sum(
        x31
        * (x29 * x49 + x35 * (x23 * x34 + x25 * x47 - x8 * (x32 - x4 * x48)) + x49 * x7)
    )
    result[4, 0] = numpy.sum(
        x41 * (x11 * x20 * x23 * x27 * x38 * x39 * x7 + x23 * x46 + x27 * x36)
    )
    result[5, 0] = numpy.sum(
        x31
        * (x25 * x52 + x45 * (x27 * x44 + x29 * x50 + x8 * (x4 * x51 - x42)) + x52 * x7)
    )
    return result


def kinetic3d_21(ax, da, A, bx, db, B):
    """Cartesian 3D (dp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = x5**2
    x7 = 2.0 * ax**2
    x8 = -x2 - x7 * (x1 + x6)
    x9 = -x4 - B[0]
    x10 = bx * x3
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x0 * x10
    x17 = x15 * (x16 + x8)
    x18 = x14 * x5
    x19 = x18 * (x16 + x8)
    x20 = x1 * x14
    x21 = x18 * x9 + x20
    x22 = x20 * x8
    x23 = x16 * x21 + x17 * x5 + x22
    x24 = x1 * (x15 + x18) + x21 * x5
    x25 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x26 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x27 = 3.141592653589793 * x26 * x3
    x28 = x25 * x27
    x29 = -x3 * (ax * A[1] + bx * B[1])
    x30 = -x29 - A[1]
    x31 = x30**2
    x32 = -x2 - x7 * (x1 + x31)
    x33 = x24 * x28
    x34 = -x3 * (ax * A[2] + bx * B[2])
    x35 = -x34 - A[2]
    x36 = x35**2
    x37 = -x2 - x7 * (x1 + x36)
    x38 = 0.1795871221251666 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**2.5)
    x39 = 13.06394529484362 * x38
    x40 = -x29 - B[1]
    x41 = x13 * x25
    x42 = x40 * x41
    x43 = x42 * (x16 + x32)
    x44 = x14 * x6 + x20
    x45 = x13 * x26
    x46 = x28 * (x10 * (x0 * x44 - x14) + x19 * x5 + x22)
    x47 = x28 * x44
    x48 = -x34 - B[2]
    x49 = x45 * x48
    x50 = x49 * (x16 + x37)
    x51 = x30 * x41
    x52 = x51 * (x16 + x32)
    x53 = x23 * x28
    x54 = x28 * x30
    x55 = 22.62741699796953 * x38
    x56 = x1 * x41
    x57 = x40 * x51 + x56
    x58 = x32 * x56
    x59 = x16 * x57 + x30 * x43 + x58
    x60 = x12 * x27
    x61 = x59 * x60
    x62 = x5 * x60
    x63 = 3.141592653589793 * x12 * x25 * x3
    x64 = x5 * x63
    x65 = x35 * x45
    x66 = x65 * (x16 + x37)
    x67 = x28 * x35
    x68 = x1 * x45
    x69 = x48 * x65 + x68
    x70 = x37 * x68
    x71 = x16 * x69 + x35 * x50 + x70
    x72 = x63 * x71
    x73 = x31 * x41 + x56
    x74 = x60 * (x10 * (x0 * x73 - x41) + x30 * x52 + x58)
    x75 = x60 * x73
    x76 = x1 * (x42 + x51) + x30 * x57
    x77 = x60 * x76
    x78 = x30 * x63
    x79 = x35 * x60
    x80 = x36 * x45 + x68
    x81 = x63 * (x10 * (x0 * x80 - x45) + x35 * x66 + x70)
    x82 = x63 * x80
    x83 = x1 * (x49 + x65) + x35 * x69
    x84 = x63 * x83

    # 18 item(s)
    result[0, 0] = numpy.sum(
        x39
        * (
            x28 * (x1 * (x17 + x19) + x10 * (x0 * x24 - x15) + x23 * x5)
            + x32 * x33
            + x33 * x37
        )
    )
    result[0, 1] = numpy.sum(x39 * (x37 * x40 * x47 + x40 * x46 + x43 * x44 * x45))
    result[0, 2] = numpy.sum(x39 * (x32 * x47 * x48 + x41 * x44 * x50 + x46 * x48))
    result[1, 0] = numpy.sum(x55 * (x21 * x37 * x54 + x21 * x45 * x52 + x30 * x53))
    result[1, 1] = numpy.sum(x55 * (x19 * x45 * x57 + x37 * x57 * x62 + x5 * x61))
    result[1, 2] = numpy.sum(x55 * (x19 * x48 * x54 + x30 * x50 * x64 + x48 * x52 * x62))
    result[2, 0] = numpy.sum(x55 * (x21 * x32 * x67 + x21 * x41 * x66 + x35 * x53))
    result[2, 1] = numpy.sum(x55 * (x19 * x40 * x67 + x35 * x43 * x62 + x40 * x64 * x66))
    result[2, 2] = numpy.sum(x55 * (x19 * x41 * x69 + x32 * x64 * x69 + x5 * x72))
    result[3, 0] = numpy.sum(x39 * (x17 * x45 * x73 + x37 * x75 * x9 + x74 * x9))
    result[3, 1] = numpy.sum(
        x39
        * (
            x37 * x77
            + x60 * (x1 * (x43 + x52) + x10 * (x0 * x76 - x42) + x30 * x59)
            + x77 * x8
        )
    )
    result[3, 2] = numpy.sum(x39 * (x14 * x50 * x73 + x48 * x74 + x48 * x75 * x8))
    result[4, 0] = numpy.sum(x55 * (x17 * x35 * x54 + x52 * x79 * x9 + x66 * x78 * x9))
    result[4, 1] = numpy.sum(x55 * (x14 * x57 * x66 + x35 * x61 + x57 * x79 * x8))
    result[4, 2] = numpy.sum(x55 * (x14 * x52 * x69 + x30 * x72 + x69 * x78 * x8))
    result[5, 0] = numpy.sum(x39 * (x17 * x41 * x80 + x32 * x82 * x9 + x81 * x9))
    result[5, 1] = numpy.sum(x39 * (x14 * x43 * x80 + x40 * x8 * x82 + x40 * x81))
    result[5, 2] = numpy.sum(
        x39
        * (
            x32 * x84
            + x63 * (x1 * (x50 + x66) + x10 * (x0 * x83 - x49) + x35 * x71)
            + x8 * x84
        )
    )
    return result


def kinetic3d_22(ax, da, A, bx, db, B):
    """Cartesian 3D (dd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = bx * x3
    x18 = x0 * x17
    x19 = x16 * (x18 + x9)
    x20 = x19 * x5
    x21 = x15 * x2
    x22 = x15 * x5
    x23 = x10 * x22
    x24 = x21 + x23
    x25 = 4.0 * x12
    x26 = x21 * x9
    x27 = x10**2 * x15
    x28 = x21 + x27
    x29 = -x15
    x30 = x10 * x19 + x11 * (x1 * x28 + x29)
    x31 = x22 * (x18 + x9)
    x32 = x2 * (x19 + x31)
    x33 = x18 * x24 + x20 + x26
    x34 = x2 * (x16 + x22)
    x35 = x10 * x24 + x34
    x36 = x10 * x33 + x11 * (x1 * x35 - x22) + x32
    x37 = x2 * (3.0 * x21 + 2.0 * x23 + x27) + x35 * x5
    x38 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x39 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x40 = 3.141592653589793 * x3 * x39
    x41 = x38 * x40
    x42 = -x3 * (ax * A[1] + bx * B[1])
    x43 = -x42 - A[1]
    x44 = x43**2
    x45 = -x6 - x8 * (x2 + x44)
    x46 = x37 * x41
    x47 = -x3 * (ax * A[2] + bx * B[2])
    x48 = -x47 - A[2]
    x49 = x48**2
    x50 = -x6 - x8 * (x2 + x49)
    x51 = 0.1795871221251666 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**3.5)
    x52 = 15.08494466531302 * x51
    x53 = -x42 - B[1]
    x54 = x14 * x38
    x55 = x53 * x54
    x56 = x55 * (x18 + x45)
    x57 = x24 * x5 + x34
    x58 = x14 * x39
    x59 = x41 * (x17 * (x0 * x57 - x16) + x32 + x33 * x5)
    x60 = x41 * x57
    x61 = 26.12789058968724 * x51
    x62 = -x47 - B[2]
    x63 = x58 * x62
    x64 = x63 * (x18 + x50)
    x65 = x2 * x54
    x66 = x45 * x65
    x67 = x53**2 * x54
    x68 = x65 + x67
    x69 = -x54
    x70 = x11 * (x1 * x68 + x69) + x53 * x56
    x71 = x66 + x70
    x72 = x15 * x7 + x21
    x73 = x58 * x72
    x74 = x17 * (x0 * x72 + x29) + x26 + x31 * x5
    x75 = x41 * x62
    x76 = x2 * x58
    x77 = x50 * x76
    x78 = x58 * x62**2
    x79 = x76 + x78
    x80 = -x58
    x81 = x11 * (x1 * x79 + x80) + x62 * x64
    x82 = x77 + x81
    x83 = x54 * x72
    x84 = x43 * x54
    x85 = x84 * (x18 + x45)
    x86 = x36 * x41
    x87 = x35 * x41
    x88 = x43 * x56
    x89 = x53 * x84
    x90 = x65 + x89
    x91 = x18 * x90 + x66 + x88
    x92 = x24 * x58
    x93 = 45.25483399593905 * x51
    x94 = x2 * (x55 + x84)
    x95 = x53 * x90 + x94
    x96 = x2 * (x56 + x85)
    x97 = x11 * (x1 * x95 - x84) + x53 * x91 + x96
    x98 = x13 * x40
    x99 = x97 * x98
    x100 = x5 * x98
    x101 = 3.141592653589793 * x13 * x3 * x38
    x102 = x101 * x5
    x103 = x48 * x58
    x104 = x103 * (x18 + x50)
    x105 = x41 * x48
    x106 = x48 * x64
    x107 = x103 * x62
    x108 = x107 + x76
    x109 = x106 + x108 * x18 + x77
    x110 = x24 * x54
    x111 = x2 * (x103 + x63)
    x112 = x108 * x62 + x111
    x113 = x2 * (x104 + x64)
    x114 = x109 * x62 + x11 * (x1 * x112 - x103) + x113
    x115 = x101 * x114
    x116 = x26 + x30
    x117 = x44 * x54 + x65
    x118 = x117 * x58
    x119 = x17 * (x0 * x117 + x69) + x43 * x85 + x66
    x120 = x43 * x90 + x94
    x121 = x98 * (x17 * (x0 * x120 - x55) + x43 * x91 + x96)
    x122 = x10 * x98
    x123 = x2 * (3.0 * x65 + x67 + 2.0 * x89) + x43 * x95
    x124 = x123 * x98
    x125 = x9 * x98
    x126 = x117 * x15
    x127 = x101 * x43
    x128 = x15 * x90
    x129 = x49 * x58 + x76
    x130 = x129 * x54
    x131 = x104 * x48 + x17 * (x0 * x129 + x80) + x77
    x132 = x10 * x101
    x133 = x108 * x48 + x111
    x134 = x101 * (x109 * x48 + x113 + x17 * (x0 * x133 - x63))
    x135 = x129 * x15
    x136 = x112 * x48 + x2 * (2.0 * x107 + 3.0 * x76 + x78)
    x137 = x101 * x136

    # 36 item(s)
    result[0, 0] = numpy.sum(
        x52
        * (
            x41
            * (
                x17 * (2.0 * ax * x37 - x28)
                + x2 * (2.0 * x20 + x24 * x25 + 3.0 * x26 + x30)
                + x36 * x5
            )
            + x45 * x46
            + x46 * x50
        )
    )
    result[0, 1] = numpy.sum(x61 * (x50 * x53 * x60 + x53 * x59 + x56 * x57 * x58))
    result[0, 2] = numpy.sum(x61 * (x45 * x60 * x62 + x54 * x57 * x64 + x59 * x62))
    result[0, 3] = numpy.sum(x52 * (x50 * x68 * x73 + x58 * x68 * x74 + x71 * x73))
    result[0, 4] = numpy.sum(x61 * (x53 * x74 * x75 + x55 * x64 * x72 + x56 * x63 * x72))
    result[0, 5] = numpy.sum(x52 * (x45 * x79 * x83 + x54 * x74 * x79 + x82 * x83))
    result[1, 0] = numpy.sum(x61 * (x35 * x58 * x85 + x43 * x50 * x87 + x43 * x86))
    result[1, 1] = numpy.sum(x93 * (x33 * x58 * x90 + x50 * x90 * x92 + x91 * x92))
    result[1, 2] = numpy.sum(x93 * (x24 * x63 * x85 + x24 * x64 * x84 + x33 * x43 * x75))
    result[1, 3] = numpy.sum(x61 * (x100 * x50 * x95 + x31 * x58 * x95 + x5 * x99))
    result[1, 4] = numpy.sum(x93 * (x100 * x62 * x91 + x22 * x64 * x90 + x31 * x63 * x90))
    result[1, 5] = numpy.sum(x61 * (x102 * x43 * x82 + x22 * x79 * x85 + x31 * x79 * x84))
    result[2, 0] = numpy.sum(x61 * (x104 * x35 * x54 + x45 * x48 * x87 + x48 * x86))
    result[2, 1] = numpy.sum(
        x93 * (x103 * x24 * x56 + x104 * x24 * x55 + x105 * x33 * x53)
    )
    result[2, 2] = numpy.sum(x93 * (x108 * x110 * x45 + x108 * x33 * x54 + x109 * x110))
    result[2, 3] = numpy.sum(
        x61 * (x100 * x48 * x71 + x103 * x31 * x68 + x104 * x22 * x68)
    )
    result[2, 4] = numpy.sum(
        x93 * (x102 * x109 * x53 + x108 * x22 * x56 + x108 * x31 * x55)
    )
    result[2, 5] = numpy.sum(x61 * (x102 * x112 * x45 + x112 * x31 * x54 + x115 * x5))
    result[3, 0] = numpy.sum(x52 * (x116 * x118 + x118 * x28 * x50 + x119 * x28 * x58))
    result[3, 1] = numpy.sum(x61 * (x10 * x121 + x120 * x122 * x50 + x120 * x19 * x58))
    result[3, 2] = numpy.sum(
        x61 * (x117 * x16 * x64 + x117 * x19 * x63 + x119 * x122 * x62)
    )
    result[3, 3] = numpy.sum(
        x52
        * (
            x124 * x50
            + x124 * x9
            + x98
            * (
                x17 * (2.0 * ax * x123 - x68)
                + x2 * (x25 * x90 + 3.0 * x66 + x70 + 2.0 * x88)
                + x43 * x97
            )
        )
    )
    result[3, 4] = numpy.sum(x61 * (x120 * x125 * x62 + x120 * x15 * x64 + x121 * x62))
    result[3, 5] = numpy.sum(x52 * (x119 * x15 * x79 + x126 * x79 * x9 + x126 * x82))
    result[4, 0] = numpy.sum(
        x61 * (x103 * x28 * x85 + x104 * x28 * x84 + x105 * x116 * x43)
    )
    result[4, 1] = numpy.sum(
        x93 * (x103 * x19 * x90 + x104 * x16 * x90 + x122 * x48 * x91)
    )
    result[4, 2] = numpy.sum(
        x93 * (x10 * x109 * x127 + x108 * x16 * x85 + x108 * x19 * x84)
    )
    result[4, 3] = numpy.sum(x61 * (x104 * x15 * x95 + x125 * x48 * x95 + x48 * x99))
    result[4, 4] = numpy.sum(x93 * (x108 * x128 * x9 + x108 * x15 * x91 + x109 * x128))
    result[4, 5] = numpy.sum(x61 * (x112 * x127 * x9 + x112 * x15 * x85 + x115 * x43))
    result[5, 0] = numpy.sum(x52 * (x116 * x130 + x130 * x28 * x45 + x131 * x28 * x54))
    result[5, 1] = numpy.sum(
        x61 * (x129 * x16 * x56 + x129 * x19 * x55 + x131 * x132 * x53)
    )
    result[5, 2] = numpy.sum(x61 * (x10 * x134 + x132 * x133 * x45 + x133 * x19 * x54))
    result[5, 3] = numpy.sum(x52 * (x131 * x15 * x68 + x135 * x68 * x9 + x135 * x71))
    result[5, 4] = numpy.sum(
        x61 * (x101 * x133 * x53 * x9 + x133 * x15 * x56 + x134 * x53)
    )
    result[5, 5] = numpy.sum(
        x52
        * (
            x101
            * (
                x114 * x48
                + x17 * (2.0 * ax * x136 - x79)
                + x2 * (2.0 * x106 + x108 * x25 + 3.0 * x77 + x81)
            )
            + x137 * x45
            + x137 * x9
        )
    )
    return result


def kinetic3d_23(ax, da, A, bx, db, B):
    """Cartesian 3D (df) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = x16 * x9
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x20 * x5
    x22 = x15 * x2
    x23 = x15 * x5
    x24 = x10 * x23
    x25 = x22 + x24
    x26 = x22 * x9
    x27 = x19 * x25 + x21 + x26
    x28 = x27 * x5
    x29 = x10 * x27
    x30 = x23 * (x19 + x9)
    x31 = x2 * (x20 + x30)
    x32 = x2 * (x16 + x23)
    x33 = x10 * x25
    x34 = x32 + x33
    x35 = x1 * x34 - x23
    x36 = x0 * x3
    x37 = x25 * x5
    x38 = x32 + x37
    x39 = x0 * x38 - x16
    x40 = x1 * x3
    x41 = 4.0 * x12
    x42 = x10**2 * x15
    x43 = x22 + x42
    x44 = -x15
    x45 = x10 * x20 + x11 * (x1 * x43 + x44)
    x46 = x2 * (2.0 * x21 + x25 * x41 + 3.0 * x26 + x45)
    x47 = x11 * x35 + x29 + x31
    x48 = 2.0 * x24
    x49 = x2 * (3.0 * x22 + x42 + x48)
    x50 = x34 * x5 + x49
    x51 = x18 * (2.0 * ax * x50 - x43) + x46 + x47 * x5
    x52 = 2.0 * x37
    x53 = x10 * x50 + x2 * (4.0 * x32 + 2.0 * x33 + x52)
    x54 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x55 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x56 = 3.141592653589793 * x3 * x55
    x57 = x54 * x56
    x58 = -x3 * (ax * A[1] + bx * B[1])
    x59 = -x58 - A[1]
    x60 = x59**2
    x61 = -x6 - x8 * (x2 + x60)
    x62 = x53 * x57
    x63 = -x3 * (ax * A[2] + bx * B[2])
    x64 = -x63 - A[2]
    x65 = x64**2
    x66 = -x6 - x8 * (x2 + x65)
    x67 = 0.1795871221251666 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**4.5)
    x68 = 13.49238468338508 * x67
    x69 = -x58 - B[1]
    x70 = x14 * x54
    x71 = x69 * x70
    x72 = x61 * x71
    x73 = x19 * x71 + x72
    x74 = x14 * x55
    x75 = x51 * x57
    x76 = x50 * x57
    x77 = 30.16988933062603 * x67
    x78 = -x63 - B[2]
    x79 = x74 * x78
    x80 = x66 * x79
    x81 = x19 * x79 + x80
    x82 = x2 * x70
    x83 = x61 * x82
    x84 = x69**2 * x70
    x85 = x82 + x84
    x86 = -x70
    x87 = x11 * (x1 * x85 + x86) + x69 * x73
    x88 = x83 + x87
    x89 = x38 * x74
    x90 = x18 * x39 + x28 + x31
    x91 = x57 * x78
    x92 = 52.25578117937447 * x67
    x93 = x2 * x74
    x94 = x66 * x93
    x95 = x74 * x78**2
    x96 = x93 + x95
    x97 = -x74
    x98 = x11 * (x1 * x96 + x97) + x78 * x81
    x99 = x94 + x98
    x100 = x38 * x70
    x101 = x15 * x7 + x22
    x102 = x18 * (x0 * x101 + x44) + x26 + x30 * x5
    x103 = 2.0 * x82
    x104 = x69 * (x103 + x85)
    x105 = x104 * x74
    x106 = x11 * (x1 * x104 - 2.0 * x71) + x2 * (x41 * x71 + 2.0 * x72) + x69 * x88
    x107 = 2.0 * x93
    x108 = x78 * (x107 + x96)
    x109 = x108 * x70
    x110 = x11 * (x1 * x108 - 2.0 * x79) + x2 * (x41 * x79 + 2.0 * x80) + x78 * x99
    x111 = x59 * x70
    x112 = x111 * (x19 + x61)
    x113 = x10 * x34 + x49
    x114 = 2.0 * x22
    x115 = x57 * (x10 * x47 - x11 * (-2.0 * bx * x113 + x114 + x48) + x46)
    x116 = x113 * x57
    x117 = 23.36949578688709 * x67
    x118 = x59 * x73
    x119 = x111 * x69
    x120 = x119 + x82
    x121 = x118 + x120 * x19 + x83
    x122 = x34 * x74
    x123 = x2 * (x111 + x71)
    x124 = x120 * x69
    x125 = x123 + x124
    x126 = x125 * x74
    x127 = x2 * (x112 + x73)
    x128 = x121 * x69
    x129 = x1 * x125 - x111
    x130 = x11 * x129 + x127 + x128
    x131 = 90.5096679918781 * x67
    x132 = 2.0 * x119
    x133 = x2 * (x132 + 3.0 * x82 + x84)
    x134 = x125 * x69 + x133
    x135 = x2 * (2.0 * x118 + x120 * x41 + 3.0 * x83 + x87)
    x136 = x13 * x56
    x137 = x136 * (-x11 * (-2.0 * bx * x134 + x103 + x132) + x130 * x69 + x135)
    x138 = x136 * x5
    x139 = 3.141592653589793 * x13 * x3 * x54
    x140 = x139 * x5
    x141 = x64 * x74
    x142 = x141 * (x19 + x66)
    x143 = x57 * x64
    x144 = x64 * x81
    x145 = x141 * x78
    x146 = x145 + x93
    x147 = x144 + x146 * x19 + x94
    x148 = x34 * x70
    x149 = x2 * (x141 + x79)
    x150 = x146 * x78
    x151 = x149 + x150
    x152 = x151 * x70
    x153 = x2 * (x142 + x81)
    x154 = x147 * x78
    x155 = x1 * x151 - x141
    x156 = x11 * x155 + x153 + x154
    x157 = 2.0 * x145
    x158 = x2 * (x157 + 3.0 * x93 + x95)
    x159 = x151 * x78 + x158
    x160 = x2 * (2.0 * x144 + x146 * x41 + 3.0 * x94 + x98)
    x161 = x139 * (-x11 * (-2.0 * bx * x159 + x107 + x157) + x156 * x78 + x160)
    x162 = x60 * x70 + x82
    x163 = x112 * x59 + x18 * (x0 * x162 + x86) + x83
    x164 = x10 * (x114 + x43)
    x165 = x164 * x74
    x166 = x26 + x45
    x167 = x10 * x166 + x11 * (x1 * x164 - 2.0 * x16) + x2 * (x16 * x41 + 2.0 * x17)
    x168 = x120 * x59
    x169 = x123 + x168
    x170 = x169 * x74
    x171 = x121 * x59
    x172 = x0 * x169 - x71
    x173 = x127 + x171 + x172 * x18
    x174 = x125 * x59 + x133
    x175 = x130 * x59 + x135 + x18 * (2.0 * ax * x174 - x85)
    x176 = x136 * x175
    x177 = x10 * x136
    x178 = 2.0 * x168
    x179 = x174 * x69 + x2 * (4.0 * x123 + 2.0 * x124 + x178)
    x180 = x136 * x179
    x181 = x136 * x9
    x182 = x15 * x169
    x183 = x108 * x15
    x184 = x139 * x59
    x185 = x125 * x15
    x186 = x15 * x151
    x187 = x65 * x74 + x93
    x188 = x142 * x64 + x18 * (x0 * x187 + x97) + x94
    x189 = x164 * x70
    x190 = x146 * x64
    x191 = x149 + x190
    x192 = x191 * x70
    x193 = x147 * x64
    x194 = x0 * x191 - x79
    x195 = x153 + x18 * x194 + x193
    x196 = x10 * x139
    x197 = x151 * x64 + x158
    x198 = x156 * x64 + x160 + x18 * (2.0 * ax * x197 - x96)
    x199 = x139 * x198
    x200 = x104 * x15
    x201 = x15 * x191
    x202 = 2.0 * x190
    x203 = x197 * x78 + x2 * (4.0 * x149 + 2.0 * x150 + x202)
    x204 = x139 * x203

    # 60 item(s)
    result[0, 0] = numpy.sum(
        x68
        * (
            x57
            * (
                x10 * x51
                - x11 * (-2.0 * bx * x53 + 2.0 * x32 + x52)
                + x2 * (2.0 * x28 + 2.0 * x29 + 4.0 * x31 + x35 * x36 + x39 * x40)
            )
            + x61 * x62
            + x62 * x66
        )
    )
    result[0, 1] = numpy.sum(x77 * (x50 * x73 * x74 + x66 * x69 * x76 + x69 * x75))
    result[0, 2] = numpy.sum(x77 * (x50 * x70 * x81 + x61 * x76 * x78 + x75 * x78))
    result[0, 3] = numpy.sum(x77 * (x66 * x85 * x89 + x74 * x85 * x90 + x88 * x89))
    result[0, 4] = numpy.sum(x92 * (x38 * x71 * x81 + x38 * x73 * x79 + x69 * x90 * x91))
    result[0, 5] = numpy.sum(x77 * (x100 * x61 * x96 + x100 * x99 + x70 * x90 * x96))
    result[0, 6] = numpy.sum(x68 * (x101 * x105 * x66 + x101 * x106 * x74 + x102 * x105))
    result[0, 7] = numpy.sum(
        x77 * (x101 * x79 * x88 + x101 * x81 * x85 + x102 * x79 * x85)
    )
    result[0, 8] = numpy.sum(
        x77 * (x101 * x71 * x99 + x101 * x73 * x96 + x102 * x71 * x96)
    )
    result[0, 9] = numpy.sum(x68 * (x101 * x109 * x61 + x101 * x110 * x70 + x102 * x109))
    result[1, 0] = numpy.sum(x117 * (x112 * x113 * x74 + x115 * x59 + x116 * x59 * x66))
    result[1, 1] = numpy.sum(x92 * (x120 * x122 * x66 + x120 * x47 * x74 + x121 * x122))
    result[1, 2] = numpy.sum(
        x92 * (x111 * x34 * x81 + x112 * x34 * x79 + x47 * x59 * x91)
    )
    result[1, 3] = numpy.sum(x92 * (x126 * x25 * x66 + x126 * x27 + x130 * x25 * x74))
    result[1, 4] = numpy.sum(
        x131 * (x120 * x25 * x81 + x120 * x27 * x79 + x121 * x25 * x79)
    )
    result[1, 5] = numpy.sum(
        x92 * (x111 * x25 * x99 + x111 * x27 * x96 + x112 * x25 * x96)
    )
    result[1, 6] = numpy.sum(x117 * (x134 * x138 * x66 + x134 * x30 * x74 + x137 * x5))
    result[1, 7] = numpy.sum(
        x92 * (x125 * x23 * x81 + x125 * x30 * x79 + x130 * x138 * x78)
    )
    result[1, 8] = numpy.sum(
        x92 * (x120 * x23 * x99 + x120 * x30 * x96 + x121 * x23 * x96)
    )
    result[1, 9] = numpy.sum(
        x117 * (x108 * x111 * x30 + x108 * x112 * x23 + x110 * x140 * x59)
    )
    result[2, 0] = numpy.sum(x117 * (x113 * x142 * x70 + x115 * x64 + x116 * x61 * x64))
    result[2, 1] = numpy.sum(
        x92 * (x141 * x34 * x73 + x142 * x34 * x71 + x143 * x47 * x69)
    )
    result[2, 2] = numpy.sum(x92 * (x146 * x148 * x61 + x146 * x47 * x70 + x147 * x148))
    result[2, 3] = numpy.sum(
        x92 * (x141 * x25 * x88 + x141 * x27 * x85 + x142 * x25 * x85)
    )
    result[2, 4] = numpy.sum(
        x131 * (x146 * x25 * x73 + x146 * x27 * x71 + x147 * x25 * x71)
    )
    result[2, 5] = numpy.sum(x92 * (x152 * x25 * x61 + x152 * x27 + x156 * x25 * x70))
    result[2, 6] = numpy.sum(
        x117 * (x104 * x141 * x30 + x104 * x142 * x23 + x106 * x138 * x64)
    )
    result[2, 7] = numpy.sum(
        x92 * (x146 * x23 * x88 + x146 * x30 * x85 + x147 * x23 * x85)
    )
    result[2, 8] = numpy.sum(
        x92 * (x140 * x156 * x69 + x151 * x23 * x73 + x151 * x30 * x71)
    )
    result[2, 9] = numpy.sum(x117 * (x140 * x159 * x61 + x159 * x30 * x70 + x161 * x5))
    result[3, 0] = numpy.sum(x68 * (x162 * x165 * x66 + x162 * x167 * x74 + x163 * x165))
    result[3, 1] = numpy.sum(x77 * (x166 * x170 + x170 * x43 * x66 + x173 * x43 * x74))
    result[3, 2] = numpy.sum(
        x77 * (x162 * x166 * x79 + x162 * x43 * x81 + x163 * x43 * x79)
    )
    result[3, 3] = numpy.sum(x77 * (x10 * x176 + x174 * x177 * x66 + x174 * x20 * x74))
    result[3, 4] = numpy.sum(
        x92 * (x16 * x169 * x81 + x169 * x20 * x79 + x173 * x177 * x78)
    )
    result[3, 5] = numpy.sum(
        x77 * (x16 * x162 * x99 + x16 * x163 * x96 + x162 * x20 * x96)
    )
    result[3, 6] = numpy.sum(
        x68
        * (
            x136
            * (
                -x11 * (-2.0 * bx * x179 + 2.0 * x123 + x178)
                + x175 * x69
                + x2 * (4.0 * x127 + 2.0 * x128 + x129 * x36 + 2.0 * x171 + x172 * x40)
            )
            + x180 * x66
            + x180 * x9
        )
    )
    result[3, 7] = numpy.sum(x77 * (x15 * x174 * x81 + x174 * x181 * x78 + x176 * x78))
    result[3, 8] = numpy.sum(x77 * (x15 * x173 * x96 + x182 * x9 * x96 + x182 * x99))
    result[3, 9] = numpy.sum(x68 * (x110 * x15 * x162 + x162 * x183 * x9 + x163 * x183))
    result[4, 0] = numpy.sum(
        x117 * (x111 * x142 * x164 + x112 * x141 * x164 + x143 * x167 * x59)
    )
    result[4, 1] = numpy.sum(
        x92 * (x120 * x141 * x166 + x120 * x142 * x43 + x121 * x141 * x43)
    )
    result[4, 2] = numpy.sum(
        x92 * (x111 * x146 * x166 + x111 * x147 * x43 + x112 * x146 * x43)
    )
    result[4, 3] = numpy.sum(
        x92 * (x125 * x141 * x20 + x125 * x142 * x16 + x130 * x177 * x64)
    )
    result[4, 4] = numpy.sum(
        x131 * (x120 * x146 * x20 + x120 * x147 * x16 + x121 * x146 * x16)
    )
    result[4, 5] = numpy.sum(
        x92 * (x10 * x156 * x184 + x111 * x151 * x20 + x112 * x151 * x16)
    )
    result[4, 6] = numpy.sum(x117 * (x134 * x142 * x15 + x134 * x181 * x64 + x137 * x64))
    result[4, 7] = numpy.sum(x92 * (x130 * x146 * x15 + x146 * x185 * x9 + x147 * x185))
    result[4, 8] = numpy.sum(x92 * (x120 * x15 * x156 + x120 * x186 * x9 + x121 * x186))
    result[4, 9] = numpy.sum(x117 * (x112 * x15 * x159 + x159 * x184 * x9 + x161 * x59))
    result[5, 0] = numpy.sum(x68 * (x167 * x187 * x70 + x187 * x189 * x61 + x188 * x189))
    result[5, 1] = numpy.sum(
        x77 * (x166 * x187 * x71 + x187 * x43 * x73 + x188 * x43 * x71)
    )
    result[5, 2] = numpy.sum(x77 * (x166 * x192 + x192 * x43 * x61 + x195 * x43 * x70))
    result[5, 3] = numpy.sum(
        x77 * (x16 * x187 * x88 + x16 * x188 * x85 + x187 * x20 * x85)
    )
    result[5, 4] = numpy.sum(
        x92 * (x16 * x191 * x73 + x191 * x20 * x71 + x195 * x196 * x69)
    )
    result[5, 5] = numpy.sum(x77 * (x10 * x199 + x196 * x197 * x61 + x197 * x20 * x70))
    result[5, 6] = numpy.sum(x68 * (x106 * x15 * x187 + x187 * x200 * x9 + x188 * x200))
    result[5, 7] = numpy.sum(x77 * (x15 * x195 * x85 + x201 * x85 * x9 + x201 * x88))
    result[5, 8] = numpy.sum(
        x77 * (x139 * x197 * x69 * x9 + x15 * x197 * x73 + x199 * x69)
    )
    result[5, 9] = numpy.sum(
        x68
        * (
            x139
            * (
                -x11 * (-2.0 * bx * x203 + 2.0 * x149 + x202)
                + x198 * x78
                + x2 * (4.0 * x153 + 2.0 * x154 + x155 * x36 + 2.0 * x193 + x194 * x40)
            )
            + x204 * x61
            + x204 * x9
        )
    )
    return result


def kinetic3d_24(ax, da, A, bx, db, B):
    """Cartesian 3D (dg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = -x4 - A[0]
    x8 = x7**2
    x9 = 2.0 * ax**2
    x10 = -x6 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x5
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x15 * x7
    x22 = x21 * (x10 + x19)
    x23 = x2 * (x20 + x22)
    x24 = x20 * x7
    x25 = x15 * x2
    x26 = x21 * x5
    x27 = x25 + x26
    x28 = x10 * x25
    x29 = x19 * x27 + x24 + x28
    x30 = x29 * x5
    x31 = x2 * (x16 + x21)
    x32 = x27 * x5
    x33 = x31 + x32
    x34 = x1 * x33 - x21
    x35 = x11 * x34
    x36 = x23 + x30 + x35
    x37 = x36 * x5
    x38 = x36 * x7
    x39 = 3.0 * x28
    x40 = 4.0 * x12
    x41 = x20 * x5
    x42 = x15 * x5**2
    x43 = x25 + x42
    x44 = -x15
    x45 = x11 * (x1 * x43 + x44)
    x46 = x41 + x45
    x47 = x2 * (2.0 * x24 + x27 * x40 + x39 + x46)
    x48 = 3.0 * x25
    x49 = 2.0 * x26
    x50 = x2 * (x42 + x48 + x49)
    x51 = x33 * x5
    x52 = x50 + x51
    x53 = 2.0 * x25
    x54 = 2.0 * bx * x52 - x49 - x53
    x55 = x0 * x3
    x56 = x33 * x7
    x57 = x50 + x56
    x58 = x18 * (2.0 * ax * x57 - x43)
    x59 = x29 * x7
    x60 = x27 * x7
    x61 = x31 + x60
    x62 = x0 * x61 - x16
    x63 = x1 * x3
    x64 = x38 + x47 + x58
    x65 = 2.0 * x60
    x66 = x2 * (4.0 * x31 + 2.0 * x32 + x65) + x5 * x57
    x67 = (
        -x11 * (-2.0 * bx * x66 + 2.0 * x31 + x65)
        + x2 * (4.0 * x23 + 2.0 * x30 + x34 * x55 + 2.0 * x59 + x62 * x63)
        + x5 * x64
    )
    x68 = 3.0 * x56
    x69 = x2 * (5.0 * x50 + 2.0 * x51 + x68) + x5 * x66
    x70 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x71 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x72 = 3.141592653589793 * x3 * x71
    x73 = x70 * x72
    x74 = -x3 * (ax * A[1] + bx * B[1])
    x75 = -x74 - A[1]
    x76 = x75**2
    x77 = -x6 - x9 * (x2 + x76)
    x78 = x69 * x73
    x79 = -x3 * (ax * A[2] + bx * B[2])
    x80 = -x79 - A[2]
    x81 = x80**2
    x82 = -x6 - x9 * (x2 + x81)
    x83 = 0.1795871221251666 * da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**5.5)
    x84 = 10.19928413298683 * x83
    x85 = -x74 - B[1]
    x86 = x14 * x70
    x87 = x85 * x86
    x88 = x77 * x87
    x89 = x19 * x87 + x88
    x90 = x14 * x71
    x91 = x67 * x73
    x92 = x66 * x73
    x93 = 26.98476936677017 * x83
    x94 = -x79 - B[2]
    x95 = x90 * x94
    x96 = x82 * x95
    x97 = x19 * x95 + x96
    x98 = x2 * x86
    x99 = x77 * x98
    x100 = x85 * x89
    x101 = x85**2 * x86
    x102 = x101 + x98
    x103 = -x86
    x104 = x11 * (x1 * x102 + x103)
    x105 = x100 + x104
    x106 = x105 + x99
    x107 = x57 * x90
    x108 = 34.83718745291631 * x83
    x109 = x73 * x94
    x110 = 60.33977866125206 * x83
    x111 = x2 * x90
    x112 = x111 * x82
    x113 = x94 * x97
    x114 = x90 * x94**2
    x115 = x111 + x114
    x116 = -x90
    x117 = x11 * (x1 * x115 + x116)
    x118 = x113 + x117
    x119 = x112 + x118
    x120 = x57 * x86
    x121 = 2.0 * x98
    x122 = x85 * (x102 + x121)
    x123 = x106 * x85 + x11 * (x1 * x122 - 2.0 * x87) + x2 * (x40 * x87 + 2.0 * x88)
    x124 = x61 * x90
    x125 = x18 * x62 + x23 + x59
    x126 = 2.0 * x111
    x127 = x94 * (x115 + x126)
    x128 = x11 * (x1 * x127 - 2.0 * x95) + x119 * x94 + x2 * (x40 * x95 + 2.0 * x96)
    x129 = x61 * x86
    x130 = x15 * x8 + x25
    x131 = x18 * (x0 * x130 + x44) + x22 * x7 + x28
    x132 = 3.0 * x98
    x133 = 3.0 * x101 + x132
    x134 = x122 * x85 + x133 * x2
    x135 = x134 * x90
    x136 = 3.0 * x99
    x137 = (
        x11 * (2.0 * bx * x134 - x133)
        + x123 * x85
        + x2 * (3.0 * x100 + 3.0 * x104 + x136)
    )
    x138 = 3.0 * x111
    x139 = 3.0 * x114 + x138
    x140 = x127 * x94 + x139 * x2
    x141 = x140 * x86
    x142 = 3.0 * x112
    x143 = (
        x11 * (2.0 * bx * x140 - x139)
        + x128 * x94
        + x2 * (3.0 * x113 + 3.0 * x117 + x142)
    )
    x144 = x75 * x86
    x145 = x144 * (x19 + x77)
    x146 = x5 * (x43 + x53)
    x147 = 3.0 * x31 + 3.0 * x32
    x148 = x2 * (x146 + x147) + x5 * x52
    x149 = x28 + x46
    x150 = x11 * (x1 * x146 - 2.0 * x16) + x149 * x5 + x2 * (x16 * x40 + 2.0 * x17)
    x151 = x11 * x54 + x37 + x47
    x152 = x73 * (
        x11 * (2.0 * bx * x148 - x147)
        + x151 * x5
        + x2 * (x150 + 3.0 * x23 + 3.0 * x30 + 3.0 * x35)
    )
    x153 = x148 * x73
    x154 = 17.66567831916427 * x83
    x155 = x75 * x89
    x156 = x144 * x85
    x157 = x156 + x98
    x158 = x155 + x157 * x19 + x99
    x159 = x52 * x90
    x160 = 46.73899157377418 * x83
    x161 = x2 * (x145 + x89)
    x162 = x158 * x85
    x163 = x2 * (x144 + x87)
    x164 = x157 * x85
    x165 = x163 + x164
    x166 = x1 * x165 - x144
    x167 = x11 * x166
    x168 = x161 + x162 + x167
    x169 = x33 * x90
    x170 = 60.33977866125205 * x83
    x171 = 104.5115623587489 * x83
    x172 = 2.0 * x156
    x173 = x2 * (x101 + x132 + x172)
    x174 = x165 * x85
    x175 = x173 + x174
    x176 = x175 * x90
    x177 = x2 * (x105 + x136 + 2.0 * x155 + x157 * x40)
    x178 = x168 * x85
    x179 = 2.0 * bx * x175 - x121 - x172
    x180 = x11 * x179 + x177 + x178
    x181 = 3.0 * x163 + 3.0 * x164
    x182 = x175 * x85 + x2 * (x122 + x181)
    x183 = x13 * x72
    x184 = x183 * (
        x11 * (2.0 * bx * x182 - x181)
        + x180 * x85
        + x2 * (x123 + 3.0 * x161 + 3.0 * x162 + 3.0 * x167)
    )
    x185 = x183 * x7
    x186 = 3.141592653589793 * x13 * x3 * x70
    x187 = x186 * x7
    x188 = x80 * x90
    x189 = x188 * (x19 + x82)
    x190 = x73 * x80
    x191 = x80 * x97
    x192 = x188 * x94
    x193 = x111 + x192
    x194 = x112 + x19 * x193 + x191
    x195 = x52 * x86
    x196 = x2 * (x189 + x97)
    x197 = x194 * x94
    x198 = x2 * (x188 + x95)
    x199 = x193 * x94
    x200 = x198 + x199
    x201 = x1 * x200 - x188
    x202 = x11 * x201
    x203 = x196 + x197 + x202
    x204 = x33 * x86
    x205 = 2.0 * x192
    x206 = x2 * (x114 + x138 + x205)
    x207 = x200 * x94
    x208 = x206 + x207
    x209 = x208 * x86
    x210 = x2 * (x118 + x142 + 2.0 * x191 + x193 * x40)
    x211 = x203 * x94
    x212 = 2.0 * bx * x208 - x126 - x205
    x213 = x11 * x212 + x210 + x211
    x214 = 3.0 * x198 + 3.0 * x199
    x215 = x2 * (x127 + x214) + x208 * x94
    x216 = x186 * (
        x11 * (2.0 * bx * x215 - x214)
        + x2 * (x128 + 3.0 * x196 + 3.0 * x197 + 3.0 * x202)
        + x213 * x94
    )
    x217 = x76 * x86 + x98
    x218 = x145 * x75 + x18 * (x0 * x217 + x103) + x99
    x219 = 3.0 * x42 + x48
    x220 = x146 * x5 + x2 * x219
    x221 = x220 * x90
    x222 = x11 * (2.0 * bx * x220 - x219) + x150 * x5 + x2 * (x39 + 3.0 * x41 + 3.0 * x45)
    x223 = x157 * x75
    x224 = x163 + x223
    x225 = x224 * x90
    x226 = x158 * x75
    x227 = x0 * x224 - x87
    x228 = x161 + x18 * x227 + x226
    x229 = x165 * x75
    x230 = x173 + x229
    x231 = x230 * x90
    x232 = x168 * x75
    x233 = x18 * (2.0 * ax * x230 - x102)
    x234 = x177 + x232 + x233
    x235 = 2.0 * x223
    x236 = x2 * (4.0 * x163 + 2.0 * x164 + x235) + x230 * x85
    x237 = (
        -x11 * (-2.0 * bx * x236 + 2.0 * x163 + x235)
        + x2 * (4.0 * x161 + 2.0 * x162 + x166 * x55 + 2.0 * x226 + x227 * x63)
        + x234 * x85
    )
    x238 = x183 * x237
    x239 = x183 * x5
    x240 = 3.0 * x229
    x241 = x2 * (5.0 * x173 + 2.0 * x174 + x240) + x236 * x85
    x242 = x183 * x241
    x243 = x10 * x183
    x244 = x15 * x230
    x245 = x15 * x224
    x246 = x140 * x15
    x247 = x186 * x75
    x248 = x15 * x175
    x249 = x15 * x165
    x250 = x15 * x208
    x251 = x111 + x81 * x90
    x252 = x112 + x18 * (x0 * x251 + x116) + x189 * x80
    x253 = x220 * x86
    x254 = x193 * x80
    x255 = x198 + x254
    x256 = x255 * x86
    x257 = x194 * x80
    x258 = x0 * x255 - x95
    x259 = x18 * x258 + x196 + x257
    x260 = x200 * x80
    x261 = x206 + x260
    x262 = x261 * x86
    x263 = x203 * x80
    x264 = x18 * (2.0 * ax * x261 - x115)
    x265 = x210 + x263 + x264
    x266 = x186 * x5
    x267 = 2.0 * x254
    x268 = x2 * (4.0 * x198 + 2.0 * x199 + x267) + x261 * x94
    x269 = (
        -x11 * (-2.0 * bx * x268 + 2.0 * x198 + x267)
        + x2 * (4.0 * x196 + 2.0 * x197 + x201 * x55 + 2.0 * x257 + x258 * x63)
        + x265 * x94
    )
    x270 = x186 * x269
    x271 = x134 * x15
    x272 = x15 * x255
    x273 = x15 * x261
    x274 = 3.0 * x260
    x275 = x2 * (5.0 * x206 + 2.0 * x207 + x274) + x268 * x94
    x276 = x186 * x275

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x84
        * (
            x73
            * (
                -x11 * (-2.0 * bx * x69 + 3.0 * x50 + x68)
                + x2 * (2.0 * x37 + 3.0 * x38 + 5.0 * x47 + x54 * x55 + 3.0 * x58)
                + x5 * x67
            )
            + x77 * x78
            + x78 * x82
        )
    )
    result[0, 1] = numpy.sum(x93 * (x66 * x89 * x90 + x82 * x85 * x92 + x85 * x91))
    result[0, 2] = numpy.sum(x93 * (x66 * x86 * x97 + x77 * x92 * x94 + x91 * x94))
    result[0, 3] = numpy.sum(x108 * (x102 * x107 * x82 + x102 * x64 * x90 + x106 * x107))
    result[0, 4] = numpy.sum(
        x110 * (x109 * x64 * x85 + x57 * x87 * x97 + x57 * x89 * x95)
    )
    result[0, 5] = numpy.sum(x108 * (x115 * x120 * x77 + x115 * x64 * x86 + x119 * x120))
    result[0, 6] = numpy.sum(x93 * (x122 * x124 * x82 + x122 * x125 * x90 + x123 * x124))
    result[0, 7] = numpy.sum(
        x110 * (x102 * x125 * x95 + x102 * x61 * x97 + x106 * x61 * x95)
    )
    result[0, 8] = numpy.sum(
        x110 * (x115 * x125 * x87 + x115 * x61 * x89 + x119 * x61 * x87)
    )
    result[0, 9] = numpy.sum(x93 * (x125 * x127 * x86 + x127 * x129 * x77 + x128 * x129))
    result[0, 10] = numpy.sum(x84 * (x130 * x135 * x82 + x130 * x137 * x90 + x131 * x135))
    result[0, 11] = numpy.sum(
        x93 * (x122 * x130 * x97 + x122 * x131 * x95 + x123 * x130 * x95)
    )
    result[0, 12] = numpy.sum(
        x108 * (x102 * x115 * x131 + x102 * x119 * x130 + x106 * x115 * x130)
    )
    result[0, 13] = numpy.sum(
        x93 * (x127 * x130 * x89 + x127 * x131 * x87 + x128 * x130 * x87)
    )
    result[0, 14] = numpy.sum(x84 * (x130 * x141 * x77 + x130 * x143 * x86 + x131 * x141))
    result[1, 0] = numpy.sum(x154 * (x145 * x148 * x90 + x152 * x75 + x153 * x75 * x82))
    result[1, 1] = numpy.sum(x160 * (x151 * x157 * x90 + x157 * x159 * x82 + x158 * x159))
    result[1, 2] = numpy.sum(
        x160 * (x109 * x151 * x75 + x144 * x52 * x97 + x145 * x52 * x95)
    )
    result[1, 3] = numpy.sum(x170 * (x165 * x169 * x82 + x165 * x36 * x90 + x168 * x169))
    result[1, 4] = numpy.sum(
        x171 * (x157 * x33 * x97 + x157 * x36 * x95 + x158 * x33 * x95)
    )
    result[1, 5] = numpy.sum(
        x170 * (x115 * x144 * x36 + x115 * x145 * x33 + x119 * x144 * x33)
    )
    result[1, 6] = numpy.sum(x160 * (x176 * x27 * x82 + x176 * x29 + x180 * x27 * x90))
    result[1, 7] = numpy.sum(
        x171 * (x165 * x27 * x97 + x165 * x29 * x95 + x168 * x27 * x95)
    )
    result[1, 8] = numpy.sum(
        x171 * (x115 * x157 * x29 + x115 * x158 * x27 + x119 * x157 * x27)
    )
    result[1, 9] = numpy.sum(
        x160 * (x127 * x144 * x29 + x127 * x145 * x27 + x128 * x144 * x27)
    )
    result[1, 10] = numpy.sum(x154 * (x182 * x185 * x82 + x182 * x22 * x90 + x184 * x7))
    result[1, 11] = numpy.sum(
        x160 * (x175 * x21 * x97 + x175 * x22 * x95 + x180 * x185 * x94)
    )
    result[1, 12] = numpy.sum(
        x170 * (x115 * x165 * x22 + x115 * x168 * x21 + x119 * x165 * x21)
    )
    result[1, 13] = numpy.sum(
        x160 * (x127 * x157 * x22 + x127 * x158 * x21 + x128 * x157 * x21)
    )
    result[1, 14] = numpy.sum(
        x154 * (x140 * x144 * x22 + x140 * x145 * x21 + x143 * x187 * x75)
    )
    result[2, 0] = numpy.sum(x154 * (x148 * x189 * x86 + x152 * x80 + x153 * x77 * x80))
    result[2, 1] = numpy.sum(
        x160 * (x151 * x190 * x85 + x188 * x52 * x89 + x189 * x52 * x87)
    )
    result[2, 2] = numpy.sum(x160 * (x151 * x193 * x86 + x193 * x195 * x77 + x194 * x195))
    result[2, 3] = numpy.sum(
        x170 * (x102 * x188 * x36 + x102 * x189 * x33 + x106 * x188 * x33)
    )
    result[2, 4] = numpy.sum(
        x171 * (x193 * x33 * x89 + x193 * x36 * x87 + x194 * x33 * x87)
    )
    result[2, 5] = numpy.sum(x170 * (x200 * x204 * x77 + x200 * x36 * x86 + x203 * x204))
    result[2, 6] = numpy.sum(
        x160 * (x122 * x188 * x29 + x122 * x189 * x27 + x123 * x188 * x27)
    )
    result[2, 7] = numpy.sum(
        x171 * (x102 * x193 * x29 + x102 * x194 * x27 + x106 * x193 * x27)
    )
    result[2, 8] = numpy.sum(
        x171 * (x200 * x27 * x89 + x200 * x29 * x87 + x203 * x27 * x87)
    )
    result[2, 9] = numpy.sum(x160 * (x209 * x27 * x77 + x209 * x29 + x213 * x27 * x86))
    result[2, 10] = numpy.sum(
        x154 * (x134 * x188 * x22 + x134 * x189 * x21 + x137 * x185 * x80)
    )
    result[2, 11] = numpy.sum(
        x160 * (x122 * x193 * x22 + x122 * x194 * x21 + x123 * x193 * x21)
    )
    result[2, 12] = numpy.sum(
        x170 * (x102 * x200 * x22 + x102 * x203 * x21 + x106 * x200 * x21)
    )
    result[2, 13] = numpy.sum(
        x160 * (x187 * x213 * x85 + x208 * x21 * x89 + x208 * x22 * x87)
    )
    result[2, 14] = numpy.sum(x154 * (x187 * x215 * x77 + x215 * x22 * x86 + x216 * x7))
    result[3, 0] = numpy.sum(x84 * (x217 * x221 * x82 + x217 * x222 * x90 + x218 * x221))
    result[3, 1] = numpy.sum(x93 * (x146 * x225 * x82 + x146 * x228 * x90 + x150 * x225))
    result[3, 2] = numpy.sum(
        x93 * (x146 * x217 * x97 + x146 * x218 * x95 + x150 * x217 * x95)
    )
    result[3, 3] = numpy.sum(x108 * (x149 * x231 + x231 * x43 * x82 + x234 * x43 * x90))
    result[3, 4] = numpy.sum(
        x110 * (x149 * x224 * x95 + x224 * x43 * x97 + x228 * x43 * x95)
    )
    result[3, 5] = numpy.sum(
        x108 * (x115 * x149 * x217 + x115 * x218 * x43 + x119 * x217 * x43)
    )
    result[3, 6] = numpy.sum(x93 * (x20 * x236 * x90 + x236 * x239 * x82 + x238 * x5))
    result[3, 7] = numpy.sum(
        x110 * (x16 * x230 * x97 + x20 * x230 * x95 + x234 * x239 * x94)
    )
    result[3, 8] = numpy.sum(
        x110 * (x115 * x16 * x228 + x115 * x20 * x224 + x119 * x16 * x224)
    )
    result[3, 9] = numpy.sum(
        x93 * (x127 * x16 * x218 + x127 * x20 * x217 + x128 * x16 * x217)
    )
    result[3, 10] = numpy.sum(
        x84
        * (
            x10 * x242
            + x183
            * (
                -x11 * (-2.0 * bx * x241 + 3.0 * x173 + x240)
                + x2 * (5.0 * x177 + 2.0 * x178 + x179 * x55 + 3.0 * x232 + 3.0 * x233)
                + x237 * x85
            )
            + x242 * x82
        )
    )
    result[3, 11] = numpy.sum(x93 * (x15 * x236 * x97 + x236 * x243 * x94 + x238 * x94))
    result[3, 12] = numpy.sum(
        x108 * (x10 * x115 * x244 + x115 * x15 * x234 + x119 * x244)
    )
    result[3, 13] = numpy.sum(x93 * (x10 * x127 * x245 + x127 * x15 * x228 + x128 * x245))
    result[3, 14] = numpy.sum(x84 * (x10 * x217 * x246 + x143 * x15 * x217 + x218 * x246))
    result[4, 0] = numpy.sum(
        x154 * (x144 * x189 * x220 + x145 * x188 * x220 + x190 * x222 * x75)
    )
    result[4, 1] = numpy.sum(
        x160 * (x146 * x157 * x189 + x146 * x158 * x188 + x150 * x157 * x188)
    )
    result[4, 2] = numpy.sum(
        x160 * (x144 * x146 * x194 + x144 * x150 * x193 + x145 * x146 * x193)
    )
    result[4, 3] = numpy.sum(
        x170 * (x149 * x165 * x188 + x165 * x189 * x43 + x168 * x188 * x43)
    )
    result[4, 4] = numpy.sum(
        x171 * (x149 * x157 * x193 + x157 * x194 * x43 + x158 * x193 * x43)
    )
    result[4, 5] = numpy.sum(
        x170 * (x144 * x149 * x200 + x144 * x203 * x43 + x145 * x200 * x43)
    )
    result[4, 6] = numpy.sum(
        x160 * (x16 * x175 * x189 + x175 * x188 * x20 + x180 * x239 * x80)
    )
    result[4, 7] = numpy.sum(
        x171 * (x16 * x165 * x194 + x16 * x168 * x193 + x165 * x193 * x20)
    )
    result[4, 8] = numpy.sum(
        x171 * (x157 * x16 * x203 + x157 * x20 * x200 + x158 * x16 * x200)
    )
    result[4, 9] = numpy.sum(
        x160 * (x144 * x20 * x208 + x145 * x16 * x208 + x213 * x247 * x5)
    )
    result[4, 10] = numpy.sum(x154 * (x15 * x182 * x189 + x182 * x243 * x80 + x184 * x80))
    result[4, 11] = numpy.sum(
        x160 * (x10 * x193 * x248 + x15 * x180 * x193 + x194 * x248)
    )
    result[4, 12] = numpy.sum(
        x170 * (x10 * x200 * x249 + x15 * x168 * x200 + x203 * x249)
    )
    result[4, 13] = numpy.sum(
        x160 * (x10 * x157 * x250 + x15 * x157 * x213 + x158 * x250)
    )
    result[4, 14] = numpy.sum(x154 * (x10 * x215 * x247 + x145 * x15 * x215 + x216 * x75))
    result[5, 0] = numpy.sum(x84 * (x222 * x251 * x86 + x251 * x253 * x77 + x252 * x253))
    result[5, 1] = numpy.sum(
        x93 * (x146 * x251 * x89 + x146 * x252 * x87 + x150 * x251 * x87)
    )
    result[5, 2] = numpy.sum(x93 * (x146 * x256 * x77 + x146 * x259 * x86 + x150 * x256))
    result[5, 3] = numpy.sum(
        x108 * (x102 * x149 * x251 + x102 * x252 * x43 + x106 * x251 * x43)
    )
    result[5, 4] = numpy.sum(
        x110 * (x149 * x255 * x87 + x255 * x43 * x89 + x259 * x43 * x87)
    )
    result[5, 5] = numpy.sum(x108 * (x149 * x262 + x262 * x43 * x77 + x265 * x43 * x86))
    result[5, 6] = numpy.sum(
        x93 * (x122 * x16 * x252 + x122 * x20 * x251 + x123 * x16 * x251)
    )
    result[5, 7] = numpy.sum(
        x110 * (x102 * x16 * x259 + x102 * x20 * x255 + x106 * x16 * x255)
    )
    result[5, 8] = numpy.sum(
        x110 * (x16 * x261 * x89 + x20 * x261 * x87 + x265 * x266 * x85)
    )
    result[5, 9] = numpy.sum(x93 * (x20 * x268 * x86 + x266 * x268 * x77 + x270 * x5))
    result[5, 10] = numpy.sum(x84 * (x10 * x251 * x271 + x137 * x15 * x251 + x252 * x271))
    result[5, 11] = numpy.sum(x93 * (x10 * x122 * x272 + x122 * x15 * x259 + x123 * x272))
    result[5, 12] = numpy.sum(
        x108 * (x10 * x102 * x273 + x102 * x15 * x265 + x106 * x273)
    )
    result[5, 13] = numpy.sum(
        x93 * (x10 * x186 * x268 * x85 + x15 * x268 * x89 + x270 * x85)
    )
    result[5, 14] = numpy.sum(
        x84
        * (
            x10 * x276
            + x186
            * (
                -x11 * (-2.0 * bx * x275 + 3.0 * x206 + x274)
                + x2 * (5.0 * x210 + 2.0 * x211 + x212 * x55 + 3.0 * x263 + 3.0 * x264)
                + x269 * x94
            )
            + x276 * x77
        )
    )
    return result


def kinetic3d_30(ax, da, A, bx, db, B):
    """Cartesian 3D (fs) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = x3 * (ax * A[0] + bx * B[0]) - A[0]
    x5 = x4**2
    x6 = 2.0 * ax**2
    x7 = -x2 - x6 * (x1 + x5)
    x8 = bx * x3
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = 1.772453850905516 * numpy.sqrt(x3)
    x12 = x10 * x11
    x13 = x12 * x4
    x14 = x13 * x7
    x15 = 4.0 * x9
    x16 = x0 * x8
    x17 = x13 * x16 + x14
    x18 = x1 * x12
    x19 = x12 * x5 + x18
    x20 = x17 * x4 + x18 * x7 + x8 * (x0 * x19 - x12)
    x21 = x4 * (2.0 * x18 + x19)
    x22 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x23 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x24 = 3.141592653589793 * x23 * x3
    x25 = x22 * x24
    x26 = x3 * (ax * A[1] + bx * B[1]) - A[1]
    x27 = x26**2
    x28 = -x2 - x6 * (x1 + x27)
    x29 = x21 * x25
    x30 = x3 * (ax * A[2] + bx * B[2]) - A[2]
    x31 = x30**2
    x32 = -x2 - x6 * (x1 + x31)
    x33 = 0.1795871221251666 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**1.5)
    x34 = 5.842373946721772 * x33
    x35 = x11 * x22
    x36 = x26 * x35
    x37 = x28 * x36
    x38 = x16 * x36 + x37
    x39 = x11 * x23
    x40 = x20 * x25
    x41 = x19 * x25
    x42 = 13.06394529484362 * x33
    x43 = x30 * x39
    x44 = x32 * x43
    x45 = x16 * x43 + x44
    x46 = x1 * x35
    x47 = x27 * x35 + x46
    x48 = x26 * x38 + x28 * x46 + x8 * (x0 * x47 - x35)
    x49 = x10 * x24
    x50 = x48 * x49
    x51 = x4 * x49
    x52 = 3.141592653589793 * x10 * x22 * x3
    x53 = x4 * x52
    x54 = x1 * x39
    x55 = x31 * x39 + x54
    x56 = x30 * x45 + x32 * x54 + x8 * (x0 * x55 - x39)
    x57 = x52 * x56
    x58 = x26 * (2.0 * x46 + x47)
    x59 = x49 * x58
    x60 = x30 * (2.0 * x54 + x55)
    x61 = x52 * x60

    # 10 item(s)
    result[0, 0] = numpy.sum(
        x34
        * (
            x25 * (x1 * (x13 * x15 + 2.0 * x14) + x20 * x4 + x8 * (x0 * x21 - 2.0 * x13))
            + x28 * x29
            + x29 * x32
        )
    )
    result[1, 0] = numpy.sum(x42 * (x19 * x38 * x39 + x26 * x32 * x41 + x26 * x40))
    result[2, 0] = numpy.sum(x42 * (x19 * x35 * x45 + x28 * x30 * x41 + x30 * x40))
    result[3, 0] = numpy.sum(x42 * (x17 * x39 * x47 + x32 * x47 * x51 + x4 * x50))
    result[4, 0] = numpy.sum(
        22.62741699796953
        * x33
        * (x17 * x25 * x26 * x30 + x26 * x45 * x53 + x30 * x38 * x51)
    )
    result[5, 0] = numpy.sum(x42 * (x17 * x35 * x55 + x28 * x53 * x55 + x4 * x57))
    result[6, 0] = numpy.sum(
        x34
        * (
            x32 * x59
            + x49
            * (x1 * (x15 * x36 + 2.0 * x37) + x26 * x48 + x8 * (x0 * x58 - 2.0 * x36))
            + x59 * x7
        )
    )
    result[7, 0] = numpy.sum(x42 * (x12 * x45 * x47 + x30 * x47 * x49 * x7 + x30 * x50))
    result[8, 0] = numpy.sum(x42 * (x12 * x38 * x55 + x26 * x52 * x55 * x7 + x26 * x57))
    result[9, 0] = numpy.sum(
        x34
        * (
            x28 * x61
            + x52
            * (x1 * (x15 * x43 + 2.0 * x44) + x30 * x56 + x8 * (x0 * x60 - 2.0 * x43))
            + x61 * x7
        )
    )
    return result


def kinetic3d_31(ax, da, A, bx, db, B):
    """Cartesian 3D (fp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = (ax + bx) ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = -ax
    x6 = x4**2
    x7 = 2.0 * ax**2
    x8 = -x5 - x7 * (x1 + x6)
    x9 = -x3 - B[0]
    x10 = bx * x2
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x2)
    x14 = x12 * x13
    x15 = x14 * x9
    x16 = x0 * x10
    x17 = x15 * (x16 + x8)
    x18 = x17 * x4
    x19 = x1 * x14
    x20 = x14 * x4
    x21 = x20 * x9
    x22 = x19 + x21
    x23 = 4.0 * x11
    x24 = x19 * x8
    x25 = x20 * x8
    x26 = x16 * x20 + x25
    x27 = x14 * x6
    x28 = x19 + x27
    x29 = x10 * (x0 * x28 - x14) + x26 * x4
    x30 = x16 * x22 + x18 + x24
    x31 = x1 * (x15 + x20) + x22 * x4
    x32 = x1 * (x17 + x26) + x10 * (x0 * x31 - x15) + x30 * x4
    x33 = 2.0 * x21
    x34 = x1 * (3.0 * x19 + x27 + x33) + x31 * x4
    x35 = 2.0 * x19
    x36 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x37 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x38 = 3.141592653589793 * x2 * x37
    x39 = x36 * x38
    x40 = -x2 * (ax * A[1] + bx * B[1])
    x41 = -x40 - A[1]
    x42 = x41**2
    x43 = -x5 - x7 * (x1 + x42)
    x44 = x34 * x39
    x45 = -x2 * (ax * A[2] + bx * B[2])
    x46 = -x45 - A[2]
    x47 = x46**2
    x48 = -x5 - x7 * (x1 + x47)
    x49 = 0.1795871221251666 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**2.5)
    x50 = 11.68474789344354 * x49
    x51 = -x40 - B[1]
    x52 = x13 * x36
    x53 = x51 * x52
    x54 = x53 * (x16 + x43)
    x55 = x4 * (x28 + x35)
    x56 = x13 * x37
    x57 = x24 + x29
    x58 = x39 * (x1 * (x20 * x23 + 2.0 * x25) + x10 * (x0 * x55 - 2.0 * x20) + x4 * x57)
    x59 = x39 * x55
    x60 = -x45 - B[2]
    x61 = x56 * x60
    x62 = x61 * (x16 + x48)
    x63 = x41 * x52
    x64 = x43 * x63
    x65 = x16 * x63 + x64
    x66 = x32 * x39
    x67 = x39 * x41
    x68 = 26.12789058968724 * x49
    x69 = x41 * x54
    x70 = x1 * x52
    x71 = x51 * x63
    x72 = x70 + x71
    x73 = x43 * x70
    x74 = x16 * x72 + x69 + x73
    x75 = x28 * x56
    x76 = x46 * x56
    x77 = x48 * x76
    x78 = x16 * x76 + x77
    x79 = x39 * x46
    x80 = x46 * x62
    x81 = x1 * x56
    x82 = x60 * x76
    x83 = x81 + x82
    x84 = x48 * x81
    x85 = x16 * x83 + x80 + x84
    x86 = x28 * x52
    x87 = x42 * x52
    x88 = x70 + x87
    x89 = x56 * x88
    x90 = x10 * (x0 * x88 - x52) + x41 * x65
    x91 = x73 + x90
    x92 = x1 * (x53 + x63) + x41 * x72
    x93 = x1 * (x54 + x65) + x10 * (x0 * x92 - x53) + x41 * x74
    x94 = x12 * x38
    x95 = x93 * x94
    x96 = x4 * x94
    x97 = 45.25483399593905 * x49
    x98 = 3.141592653589793 * x12 * x2 * x36
    x99 = x4 * x98
    x100 = x47 * x56
    x101 = x100 + x81
    x102 = x101 * x52
    x103 = x10 * (x0 * x101 - x56) + x46 * x78
    x104 = x103 + x84
    x105 = x1 * (x61 + x76) + x46 * x83
    x106 = x1 * (x62 + x78) + x10 * (x0 * x105 - x61) + x46 * x85
    x107 = x106 * x98
    x108 = 2.0 * x70
    x109 = x41 * (x108 + x88)
    x110 = x94 * (
        x1 * (x23 * x63 + 2.0 * x64) + x10 * (x0 * x109 - 2.0 * x63) + x41 * x91
    )
    x111 = x109 * x94
    x112 = 2.0 * x71
    x113 = x1 * (x112 + 3.0 * x70 + x87) + x41 * x92
    x114 = x113 * x94
    x115 = x46 * x94
    x116 = x14 * x88
    x117 = x41 * x98
    x118 = x101 * x14
    x119 = 2.0 * x81
    x120 = x46 * (x101 + x119)
    x121 = x98 * (
        x1 * (x23 * x76 + 2.0 * x77) + x10 * (x0 * x120 - 2.0 * x76) + x104 * x46
    )
    x122 = x120 * x98
    x123 = 2.0 * x82
    x124 = x1 * (x100 + x123 + 3.0 * x81) + x105 * x46
    x125 = x124 * x98

    # 30 item(s)
    result[0, 0] = numpy.sum(
        x50
        * (
            x39
            * (
                x1 * (2.0 * x18 + x22 * x23 + 3.0 * x24 + x29)
                - x10 * (-2.0 * ax * x34 + x33 + x35)
                + x32 * x4
            )
            + x43 * x44
            + x44 * x48
        )
    )
    result[0, 1] = numpy.sum(x50 * (x48 * x51 * x59 + x51 * x58 + x54 * x55 * x56))
    result[0, 2] = numpy.sum(x50 * (x43 * x59 * x60 + x52 * x55 * x62 + x58 * x60))
    result[1, 0] = numpy.sum(x68 * (x31 * x48 * x67 + x31 * x56 * x65 + x41 * x66))
    result[1, 1] = numpy.sum(x68 * (x48 * x72 * x75 + x56 * x57 * x72 + x74 * x75))
    result[1, 2] = numpy.sum(x68 * (x28 * x61 * x65 + x28 * x62 * x63 + x57 * x60 * x67))
    result[2, 0] = numpy.sum(x68 * (x31 * x43 * x79 + x31 * x52 * x78 + x46 * x66))
    result[2, 1] = numpy.sum(x68 * (x28 * x53 * x78 + x28 * x54 * x76 + x51 * x57 * x79))
    result[2, 2] = numpy.sum(x68 * (x43 * x83 * x86 + x52 * x57 * x83 + x85 * x86))
    result[3, 0] = numpy.sum(x68 * (x22 * x48 * x89 + x22 * x56 * x91 + x30 * x89))
    result[3, 1] = numpy.sum(x68 * (x26 * x56 * x92 + x4 * x95 + x48 * x92 * x96))
    result[3, 2] = numpy.sum(x68 * (x20 * x62 * x88 + x26 * x61 * x88 + x60 * x91 * x96))
    result[4, 0] = numpy.sum(x97 * (x22 * x63 * x78 + x22 * x65 * x76 + x30 * x46 * x67))
    result[4, 1] = numpy.sum(x97 * (x20 * x72 * x78 + x26 * x72 * x76 + x46 * x74 * x96))
    result[4, 2] = numpy.sum(x97 * (x20 * x65 * x83 + x26 * x63 * x83 + x41 * x85 * x99))
    result[5, 0] = numpy.sum(x68 * (x102 * x22 * x43 + x102 * x30 + x104 * x22 * x52))
    result[5, 1] = numpy.sum(
        x68 * (x101 * x20 * x54 + x101 * x26 * x53 + x104 * x51 * x99)
    )
    result[5, 2] = numpy.sum(x68 * (x105 * x26 * x52 + x105 * x43 * x99 + x107 * x4))
    result[6, 0] = numpy.sum(x50 * (x109 * x17 * x56 + x110 * x9 + x111 * x48 * x9))
    result[6, 1] = numpy.sum(
        x50
        * (
            x114 * x48
            + x114 * x8
            + x94
            * (
                x1 * (x23 * x72 + 2.0 * x69 + 3.0 * x73 + x90)
                - x10 * (-2.0 * ax * x113 + x108 + x112)
                + x41 * x93
            )
        )
    )
    result[6, 2] = numpy.sum(x50 * (x109 * x14 * x62 + x110 * x60 + x111 * x60 * x8))
    result[7, 0] = numpy.sum(x68 * (x115 * x9 * x91 + x15 * x78 * x88 + x17 * x76 * x88))
    result[7, 1] = numpy.sum(x68 * (x115 * x8 * x92 + x14 * x78 * x92 + x46 * x95))
    result[7, 2] = numpy.sum(x68 * (x116 * x8 * x83 + x116 * x85 + x14 * x83 * x91))
    result[8, 0] = numpy.sum(
        x68 * (x101 * x15 * x65 + x101 * x17 * x63 + x104 * x117 * x9)
    )
    result[8, 1] = numpy.sum(x68 * (x104 * x14 * x72 + x118 * x72 * x8 + x118 * x74))
    result[8, 2] = numpy.sum(x68 * (x105 * x117 * x8 + x105 * x14 * x65 + x107 * x41))
    result[9, 0] = numpy.sum(x50 * (x120 * x17 * x52 + x121 * x9 + x122 * x43 * x9))
    result[9, 1] = numpy.sum(x50 * (x120 * x14 * x54 + x121 * x51 + x122 * x51 * x8))
    result[9, 2] = numpy.sum(
        x50
        * (
            x125 * x43
            + x125 * x8
            + x98
            * (
                x1 * (x103 + x23 * x83 + 2.0 * x80 + 3.0 * x84)
                - x10 * (-2.0 * ax * x124 + x119 + x123)
                + x106 * x46
            )
        )
    )
    return result


def kinetic3d_32(ax, da, A, bx, db, B):
    """Cartesian 3D (fd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = -x4 - B[0]
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x10 * x15
    x17 = bx * x3
    x18 = x0 * x17
    x19 = x16 * (x18 + x9)
    x20 = x19 * x5
    x21 = x15 * x2
    x22 = x15 * x5
    x23 = x10 * x22
    x24 = x21 + x23
    x25 = x21 * x9
    x26 = x18 * x24 + x20 + x25
    x27 = x26 * x5
    x28 = x10 * x26
    x29 = x22 * x9
    x30 = x18 * x22 + x29
    x31 = x2 * (x19 + x30)
    x32 = x2 * (x16 + x22)
    x33 = x10 * x24
    x34 = x32 + x33
    x35 = x1 * x34 - x22
    x36 = x0 * x3
    x37 = x24 * x5
    x38 = x32 + x37
    x39 = x0 * x38 - x16
    x40 = x1 * x3
    x41 = x10**2 * x15
    x42 = x21 + x41
    x43 = -x15
    x44 = x10 * x19 + x11 * (x1 * x42 + x43)
    x45 = 4.0 * x12
    x46 = 2.0 * x20 + x24 * x45 + 3.0 * x25
    x47 = x11 * x35 + x28 + x31
    x48 = 2.0 * x23
    x49 = 3.0 * x21 + x48
    x50 = x2 * (x41 + x49) + x34 * x5
    x51 = x17 * (2.0 * ax * x50 - x42) + x2 * (x44 + x46) + x47 * x5
    x52 = 2.0 * x33
    x53 = x2 * (4.0 * x32 + 2.0 * x37 + x52) + x5 * x50
    x54 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x55 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x56 = 3.141592653589793 * x3 * x55
    x57 = x54 * x56
    x58 = -x3 * (ax * A[1] + bx * B[1])
    x59 = -x58 - A[1]
    x60 = x59**2
    x61 = -x6 - x8 * (x2 + x60)
    x62 = x53 * x57
    x63 = -x3 * (ax * A[2] + bx * B[2])
    x64 = -x63 - A[2]
    x65 = x64**2
    x66 = -x6 - x8 * (x2 + x65)
    x67 = 0.1795871221251666 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**3.5)
    x68 = 13.49238468338508 * x67
    x69 = -x58 - B[1]
    x70 = x14 * x54
    x71 = x69 * x70
    x72 = x71 * (x18 + x61)
    x73 = x15 * x7
    x74 = x2 * (x49 + x73) + x38 * x5
    x75 = x14 * x55
    x76 = x21 + x73
    x77 = x17 * (x0 * x76 + x43) + x30 * x5
    x78 = x17 * x39 + x27 + x31
    x79 = 2.0 * x21
    x80 = x57 * (-x17 * (-2.0 * ax * x74 + x48 + x79) + x2 * (x46 + x77) + x5 * x78)
    x81 = x57 * x74
    x82 = 23.36949578688709 * x67
    x83 = -x63 - B[2]
    x84 = x75 * x83
    x85 = x84 * (x18 + x66)
    x86 = x2 * x70
    x87 = x61 * x86
    x88 = x69**2 * x70
    x89 = x86 + x88
    x90 = -x70
    x91 = x11 * (x1 * x89 + x90) + x69 * x72
    x92 = x87 + x91
    x93 = x5 * (x76 + x79)
    x94 = x75 * x93
    x95 = x25 + x77
    x96 = x17 * (x0 * x93 - 2.0 * x22) + x2 * (x22 * x45 + 2.0 * x29) + x5 * x95
    x97 = x57 * x83
    x98 = x2 * x75
    x99 = x66 * x98
    x100 = x75 * x83**2
    x101 = x100 + x98
    x102 = -x75
    x103 = x11 * (x1 * x101 + x102) + x83 * x85
    x104 = x103 + x99
    x105 = x70 * x93
    x106 = x59 * x70
    x107 = x106 * x61
    x108 = x106 * x18 + x107
    x109 = x51 * x57
    x110 = x50 * x57
    x111 = 30.16988933062603 * x67
    x112 = x59 * x72
    x113 = x106 * x69
    x114 = x113 + x86
    x115 = x112 + x114 * x18 + x87
    x116 = x38 * x75
    x117 = 52.25578117937447 * x67
    x118 = x2 * (x106 + x71)
    x119 = x114 * x69
    x120 = x118 + x119
    x121 = x120 * x75
    x122 = x2 * (x108 + x72)
    x123 = x115 * x69
    x124 = x1 * x120 - x106
    x125 = x11 * x124 + x122 + x123
    x126 = x64 * x75
    x127 = x126 * x66
    x128 = x126 * x18 + x127
    x129 = x57 * x64
    x130 = x64 * x85
    x131 = x126 * x83
    x132 = x131 + x98
    x133 = x130 + x132 * x18 + x99
    x134 = x38 * x70
    x135 = x2 * (x126 + x84)
    x136 = x132 * x83
    x137 = x135 + x136
    x138 = x137 * x70
    x139 = x2 * (x128 + x85)
    x140 = x133 * x83
    x141 = x1 * x137 - x126
    x142 = x11 * x141 + x139 + x140
    x143 = x60 * x70
    x144 = x143 + x86
    x145 = x108 * x59 + x17 * (x0 * x144 + x90)
    x146 = x145 + x87
    x147 = x34 * x75
    x148 = x114 * x59
    x149 = x118 + x148
    x150 = x149 * x75
    x151 = x115 * x59
    x152 = x0 * x149 - x71
    x153 = x122 + x151 + x152 * x17
    x154 = 2.0 * x113
    x155 = x154 + 3.0 * x86
    x156 = x120 * x59 + x2 * (x155 + x88)
    x157 = 2.0 * x112 + x114 * x45 + 3.0 * x87
    x158 = x125 * x59 + x17 * (2.0 * ax * x156 - x89) + x2 * (x157 + x91)
    x159 = x13 * x56
    x160 = x158 * x159
    x161 = x159 * x5
    x162 = 90.5096679918781 * x67
    x163 = 3.141592653589793 * x13 * x3 * x54
    x164 = x163 * x5
    x165 = x65 * x75
    x166 = x165 + x98
    x167 = x128 * x64 + x17 * (x0 * x166 + x102)
    x168 = x167 + x99
    x169 = x34 * x70
    x170 = x132 * x64
    x171 = x135 + x170
    x172 = x171 * x70
    x173 = x133 * x64
    x174 = x0 * x171 - x84
    x175 = x139 + x17 * x174 + x173
    x176 = 2.0 * x131
    x177 = x176 + 3.0 * x98
    x178 = x137 * x64 + x2 * (x100 + x177)
    x179 = 2.0 * x130 + x132 * x45 + 3.0 * x99
    x180 = x142 * x64 + x17 * (2.0 * ax * x178 - x101) + x2 * (x103 + x179)
    x181 = x163 * x180
    x182 = x25 + x44
    x183 = 2.0 * x86
    x184 = x59 * (x144 + x183)
    x185 = x184 * x75
    x186 = x146 * x59 + x17 * (x0 * x184 - 2.0 * x106) + x2 * (x106 * x45 + 2.0 * x107)
    x187 = x149 * x59 + x2 * (x143 + x155)
    x188 = x159 * (
        x153 * x59 - x17 * (-2.0 * ax * x187 + x154 + x183) + x2 * (x145 + x157)
    )
    x189 = x10 * x159
    x190 = 2.0 * x119
    x191 = x156 * x59 + x2 * (4.0 * x118 + 2.0 * x148 + x190)
    x192 = x159 * x191
    x193 = x159 * x9
    x194 = x15 * x184
    x195 = x149 * x15
    x196 = x137 * x15
    x197 = x163 * x59
    x198 = x120 * x15
    x199 = x15 * x171
    x200 = 2.0 * x98
    x201 = x64 * (x166 + x200)
    x202 = x201 * x70
    x203 = x168 * x64 + x17 * (x0 * x201 - 2.0 * x126) + x2 * (x126 * x45 + 2.0 * x127)
    x204 = x10 * x163
    x205 = x171 * x64 + x2 * (x165 + x177)
    x206 = x163 * (
        -x17 * (-2.0 * ax * x205 + x176 + x200) + x175 * x64 + x2 * (x167 + x179)
    )
    x207 = x15 * x201
    x208 = 2.0 * x136
    x209 = x178 * x64 + x2 * (4.0 * x135 + 2.0 * x170 + x208)
    x210 = x163 * x209

    # 60 item(s)
    result[0, 0] = numpy.sum(
        x68
        * (
            x57
            * (
                -x17 * (-2.0 * ax * x53 + 2.0 * x32 + x52)
                + x2 * (2.0 * x27 + 2.0 * x28 + 4.0 * x31 + x35 * x36 + x39 * x40)
                + x5 * x51
            )
            + x61 * x62
            + x62 * x66
        )
    )
    result[0, 1] = numpy.sum(x82 * (x66 * x69 * x81 + x69 * x80 + x72 * x74 * x75))
    result[0, 2] = numpy.sum(x82 * (x61 * x81 * x83 + x70 * x74 * x85 + x80 * x83))
    result[0, 3] = numpy.sum(x68 * (x66 * x89 * x94 + x75 * x89 * x96 + x92 * x94))
    result[0, 4] = numpy.sum(x82 * (x69 * x96 * x97 + x71 * x85 * x93 + x72 * x84 * x93))
    result[0, 5] = numpy.sum(x68 * (x101 * x105 * x61 + x101 * x70 * x96 + x104 * x105))
    result[1, 0] = numpy.sum(x111 * (x108 * x50 * x75 + x109 * x59 + x110 * x59 * x66))
    result[1, 1] = numpy.sum(x117 * (x114 * x116 * x66 + x114 * x75 * x78 + x115 * x116))
    result[1, 2] = numpy.sum(
        x117 * (x106 * x38 * x85 + x108 * x38 * x84 + x59 * x78 * x97)
    )
    result[1, 3] = numpy.sum(x111 * (x121 * x66 * x76 + x121 * x95 + x125 * x75 * x76))
    result[1, 4] = numpy.sum(
        x117 * (x114 * x76 * x85 + x114 * x84 * x95 + x115 * x76 * x84)
    )
    result[1, 5] = numpy.sum(
        x111 * (x101 * x106 * x95 + x101 * x108 * x76 + x104 * x106 * x76)
    )
    result[2, 0] = numpy.sum(x111 * (x109 * x64 + x110 * x61 * x64 + x128 * x50 * x70))
    result[2, 1] = numpy.sum(
        x117 * (x126 * x38 * x72 + x128 * x38 * x71 + x129 * x69 * x78)
    )
    result[2, 2] = numpy.sum(x117 * (x132 * x134 * x61 + x132 * x70 * x78 + x133 * x134))
    result[2, 3] = numpy.sum(
        x111 * (x126 * x76 * x92 + x126 * x89 * x95 + x128 * x76 * x89)
    )
    result[2, 4] = numpy.sum(
        x117 * (x132 * x71 * x95 + x132 * x72 * x76 + x133 * x71 * x76)
    )
    result[2, 5] = numpy.sum(x111 * (x138 * x61 * x76 + x138 * x95 + x142 * x70 * x76))
    result[3, 0] = numpy.sum(x111 * (x144 * x147 * x66 + x144 * x47 * x75 + x146 * x147))
    result[3, 1] = numpy.sum(x117 * (x150 * x24 * x66 + x150 * x26 + x153 * x24 * x75))
    result[3, 2] = numpy.sum(
        x117 * (x144 * x24 * x85 + x144 * x26 * x84 + x146 * x24 * x84)
    )
    result[3, 3] = numpy.sum(x111 * (x156 * x161 * x66 + x156 * x30 * x75 + x160 * x5))
    result[3, 4] = numpy.sum(
        x117 * (x149 * x22 * x85 + x149 * x30 * x84 + x153 * x161 * x83)
    )
    result[3, 5] = numpy.sum(
        x111 * (x101 * x144 * x30 + x101 * x146 * x22 + x104 * x144 * x22)
    )
    result[4, 0] = numpy.sum(
        x117 * (x106 * x128 * x34 + x108 * x126 * x34 + x129 * x47 * x59)
    )
    result[4, 1] = numpy.sum(
        x162 * (x114 * x126 * x26 + x114 * x128 * x24 + x115 * x126 * x24)
    )
    result[4, 2] = numpy.sum(
        x162 * (x106 * x132 * x26 + x106 * x133 * x24 + x108 * x132 * x24)
    )
    result[4, 3] = numpy.sum(
        x117 * (x120 * x126 * x30 + x120 * x128 * x22 + x125 * x161 * x64)
    )
    result[4, 4] = numpy.sum(
        x162 * (x114 * x132 * x30 + x114 * x133 * x22 + x115 * x132 * x22)
    )
    result[4, 5] = numpy.sum(
        x117 * (x106 * x137 * x30 + x108 * x137 * x22 + x142 * x164 * x59)
    )
    result[5, 0] = numpy.sum(x111 * (x166 * x169 * x61 + x166 * x47 * x70 + x168 * x169))
    result[5, 1] = numpy.sum(
        x117 * (x166 * x24 * x72 + x166 * x26 * x71 + x168 * x24 * x71)
    )
    result[5, 2] = numpy.sum(x117 * (x172 * x24 * x61 + x172 * x26 + x175 * x24 * x70))
    result[5, 3] = numpy.sum(
        x111 * (x166 * x22 * x92 + x166 * x30 * x89 + x168 * x22 * x89)
    )
    result[5, 4] = numpy.sum(
        x117 * (x164 * x175 * x69 + x171 * x22 * x72 + x171 * x30 * x71)
    )
    result[5, 5] = numpy.sum(x111 * (x164 * x178 * x61 + x178 * x30 * x70 + x181 * x5))
    result[6, 0] = numpy.sum(x68 * (x182 * x185 + x185 * x42 * x66 + x186 * x42 * x75))
    result[6, 1] = numpy.sum(x82 * (x10 * x188 + x187 * x189 * x66 + x187 * x19 * x75))
    result[6, 2] = numpy.sum(
        x82 * (x16 * x184 * x85 + x184 * x19 * x84 + x186 * x189 * x83)
    )
    result[6, 3] = numpy.sum(
        x68
        * (
            x159
            * (
                x158 * x59
                - x17 * (-2.0 * ax * x191 + 2.0 * x118 + x190)
                + x2 * (4.0 * x122 + 2.0 * x123 + x124 * x36 + 2.0 * x151 + x152 * x40)
            )
            + x192 * x66
            + x192 * x9
        )
    )
    result[6, 4] = numpy.sum(x82 * (x15 * x187 * x85 + x187 * x193 * x83 + x188 * x83))
    result[6, 5] = numpy.sum(x68 * (x101 * x15 * x186 + x101 * x194 * x9 + x104 * x194))
    result[7, 0] = numpy.sum(
        x111 * (x126 * x144 * x182 + x126 * x146 * x42 + x128 * x144 * x42)
    )
    result[7, 1] = numpy.sum(
        x117 * (x126 * x149 * x19 + x128 * x149 * x16 + x153 * x189 * x64)
    )
    result[7, 2] = numpy.sum(
        x117 * (x132 * x144 * x19 + x132 * x146 * x16 + x133 * x144 * x16)
    )
    result[7, 3] = numpy.sum(x111 * (x128 * x15 * x156 + x156 * x193 * x64 + x160 * x64))
    result[7, 4] = numpy.sum(x117 * (x132 * x15 * x153 + x132 * x195 * x9 + x133 * x195))
    result[7, 5] = numpy.sum(x111 * (x142 * x144 * x15 + x144 * x196 * x9 + x146 * x196))
    result[8, 0] = numpy.sum(
        x111 * (x106 * x166 * x182 + x106 * x168 * x42 + x108 * x166 * x42)
    )
    result[8, 1] = numpy.sum(
        x117 * (x114 * x16 * x168 + x114 * x166 * x19 + x115 * x16 * x166)
    )
    result[8, 2] = numpy.sum(
        x117 * (x10 * x175 * x197 + x106 * x171 * x19 + x108 * x16 * x171)
    )
    result[8, 3] = numpy.sum(x111 * (x125 * x15 * x166 + x166 * x198 * x9 + x168 * x198))
    result[8, 4] = numpy.sum(x117 * (x114 * x15 * x175 + x114 * x199 * x9 + x115 * x199))
    result[8, 5] = numpy.sum(x111 * (x108 * x15 * x178 + x178 * x197 * x9 + x181 * x59))
    result[9, 0] = numpy.sum(x68 * (x182 * x202 + x202 * x42 * x61 + x203 * x42 * x70))
    result[9, 1] = numpy.sum(
        x82 * (x16 * x201 * x72 + x19 * x201 * x71 + x203 * x204 * x69)
    )
    result[9, 2] = numpy.sum(x82 * (x10 * x206 + x19 * x205 * x70 + x204 * x205 * x61))
    result[9, 3] = numpy.sum(x68 * (x15 * x203 * x89 + x207 * x89 * x9 + x207 * x92))
    result[9, 4] = numpy.sum(
        x82 * (x15 * x205 * x72 + x163 * x205 * x69 * x9 + x206 * x69)
    )
    result[9, 5] = numpy.sum(
        x68
        * (
            x163
            * (
                -x17 * (-2.0 * ax * x209 + 2.0 * x135 + x208)
                + x180 * x64
                + x2 * (4.0 * x139 + 2.0 * x140 + x141 * x36 + 2.0 * x173 + x174 * x40)
            )
            + x210 * x61
            + x210 * x9
        )
    )
    return result


def kinetic3d_33(ax, da, A, bx, db, B):
    """Cartesian 3D (ff) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -ax
    x7 = -x4 - A[0]
    x8 = x7**2
    x9 = 2.0 * ax**2
    x10 = -x6 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x5
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x15 * x7
    x22 = x10 * x21
    x23 = x19 * x21 + x22
    x24 = x2 * (x20 + x23)
    x25 = x20 * x7
    x26 = x15 * x2
    x27 = x21 * x5
    x28 = x26 + x27
    x29 = x10 * x26
    x30 = x19 * x28 + x25 + x29
    x31 = x30 * x5
    x32 = x2 * (x16 + x21)
    x33 = x28 * x5
    x34 = x32 + x33
    x35 = x1 * x34 - x21
    x36 = x11 * x35 + x24 + x31
    x37 = x36 * x5
    x38 = x36 * x7
    x39 = x15 * x5**2
    x40 = x26 + x39
    x41 = -x15
    x42 = x11 * (x1 * x40 + x41) + x20 * x5
    x43 = 4.0 * x12
    x44 = 2.0 * x25 + x28 * x43 + 3.0 * x29
    x45 = x2 * (x42 + x44)
    x46 = 2.0 * x27
    x47 = 3.0 * x26 + x46
    x48 = x2 * (x39 + x47)
    x49 = x34 * x5
    x50 = x48 + x49
    x51 = 2.0 * x26
    x52 = x46 + x51
    x53 = 2.0 * bx * x50 - x52
    x54 = x0 * x3
    x55 = x34 * x7
    x56 = x48 + x55
    x57 = x18 * (2.0 * ax * x56 - x40)
    x58 = x30 * x7
    x59 = x28 * x7
    x60 = x32 + x59
    x61 = x0 * x60 - x16
    x62 = x1 * x3
    x63 = x2 * (4.0 * x24 + 2.0 * x31 + x35 * x54 + 2.0 * x58 + x61 * x62)
    x64 = x38 + x45 + x57
    x65 = 2.0 * x59
    x66 = 2.0 * x33
    x67 = x2 * (4.0 * x32 + x65 + x66)
    x68 = x5 * x56 + x67
    x69 = 2.0 * x32
    x70 = -x11 * (-2.0 * bx * x68 + x65 + x69) + x5 * x64 + x63
    x71 = 2.0 * x49
    x72 = x2 * (5.0 * x48 + 3.0 * x55 + x71) + x68 * x7
    x73 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x74 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x75 = 3.141592653589793 * x3 * x74
    x76 = x73 * x75
    x77 = -x3 * (ax * A[1] + bx * B[1])
    x78 = -x77 - A[1]
    x79 = x78**2
    x80 = -x6 - x9 * (x2 + x79)
    x81 = x72 * x76
    x82 = -x3 * (ax * A[2] + bx * B[2])
    x83 = -x82 - A[2]
    x84 = x83**2
    x85 = -x6 - x9 * (x2 + x84)
    x86 = 0.1795871221251666 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**4.5)
    x87 = 12.06795573225041 * x86
    x88 = -x77 - B[1]
    x89 = x14 * x73
    x90 = x88 * x89
    x91 = x80 * x90
    x92 = x19 * x90 + x91
    x93 = x56 * x7 + x67
    x94 = x14 * x74
    x95 = x76 * (-x18 * (-2.0 * ax * x93 + x66 + x69) + x63 + x64 * x7)
    x96 = x76 * x93
    x97 = 26.98476936677017 * x86
    x98 = -x82 - B[2]
    x99 = x94 * x98
    x100 = x85 * x99
    x101 = x100 + x19 * x99
    x102 = x2 * x89
    x103 = x102 * x80
    x104 = x88**2 * x89
    x105 = x102 + x104
    x106 = -x89
    x107 = x11 * (x1 * x105 + x106) + x88 * x92
    x108 = x103 + x107
    x109 = x15 * x8
    x110 = x2 * (x109 + x47) + x60 * x7
    x111 = x110 * x94
    x112 = x109 + x26
    x113 = x18 * (x0 * x112 + x41) + x23 * x7
    x114 = x18 * x61 + x24 + x58
    x115 = x114 * x7 + x18 * (2.0 * ax * x110 - x52) + x2 * (x113 + x44)
    x116 = x76 * x98
    x117 = 46.73899157377418 * x86
    x118 = x2 * x94
    x119 = x118 * x85
    x120 = x94 * x98**2
    x121 = x118 + x120
    x122 = -x94
    x123 = x101 * x98 + x11 * (x1 * x121 + x122)
    x124 = x119 + x123
    x125 = x110 * x89
    x126 = 2.0 * x102
    x127 = x88 * (x105 + x126)
    x128 = x108 * x88 + x11 * (x1 * x127 - 2.0 * x90) + x2 * (x43 * x90 + 2.0 * x91)
    x129 = x7 * (x112 + x51)
    x130 = x129 * x94
    x131 = x113 + x29
    x132 = x131 * x7 + x18 * (x0 * x129 - 2.0 * x21) + x2 * (x21 * x43 + 2.0 * x22)
    x133 = 2.0 * x118
    x134 = x98 * (x121 + x133)
    x135 = x11 * (x1 * x134 - 2.0 * x99) + x124 * x98 + x2 * (2.0 * x100 + x43 * x99)
    x136 = x129 * x89
    x137 = x78 * x89
    x138 = x137 * x80
    x139 = x137 * x19 + x138
    x140 = x70 * x76
    x141 = x68 * x76
    x142 = x78 * x92
    x143 = x137 * x88
    x144 = x102 + x143
    x145 = x103 + x142 + x144 * x19
    x146 = x56 * x94
    x147 = 60.33977866125206 * x86
    x148 = x2 * (x139 + x92)
    x149 = x145 * x88
    x150 = x2 * (x137 + x90)
    x151 = x144 * x88
    x152 = x150 + x151
    x153 = x1 * x152 - x137
    x154 = x11 * x153 + x148 + x149
    x155 = x60 * x94
    x156 = 104.5115623587489 * x86
    x157 = 2.0 * x143
    x158 = 3.0 * x102 + x157
    x159 = x2 * (x104 + x158)
    x160 = x152 * x88
    x161 = x159 + x160
    x162 = x161 * x94
    x163 = 3.0 * x103 + 2.0 * x142 + x144 * x43
    x164 = x2 * (x107 + x163)
    x165 = x154 * x88
    x166 = x126 + x157
    x167 = 2.0 * bx * x161 - x166
    x168 = x11 * x167 + x164 + x165
    x169 = x83 * x94
    x170 = x169 * x85
    x171 = x169 * x19 + x170
    x172 = x76 * x83
    x173 = x101 * x83
    x174 = x169 * x98
    x175 = x118 + x174
    x176 = x119 + x173 + x175 * x19
    x177 = x56 * x89
    x178 = x2 * (x101 + x171)
    x179 = x176 * x98
    x180 = x2 * (x169 + x99)
    x181 = x175 * x98
    x182 = x180 + x181
    x183 = x1 * x182 - x169
    x184 = x11 * x183 + x178 + x179
    x185 = x60 * x89
    x186 = 2.0 * x174
    x187 = 3.0 * x118 + x186
    x188 = x2 * (x120 + x187)
    x189 = x182 * x98
    x190 = x188 + x189
    x191 = x190 * x89
    x192 = 3.0 * x119 + 2.0 * x173 + x175 * x43
    x193 = x2 * (x123 + x192)
    x194 = x184 * x98
    x195 = x133 + x186
    x196 = 2.0 * bx * x190 - x195
    x197 = x11 * x196 + x193 + x194
    x198 = x79 * x89
    x199 = x102 + x198
    x200 = x139 * x78 + x18 * (x0 * x199 + x106)
    x201 = x103 + x200
    x202 = x50 * x94
    x203 = x11 * x53 + x37 + x45
    x204 = x145 * x78
    x205 = x144 * x78
    x206 = x150 + x205
    x207 = x0 * x206 - x90
    x208 = x148 + x18 * x207 + x204
    x209 = x34 * x94
    x210 = x152 * x78
    x211 = x159 + x210
    x212 = x211 * x94
    x213 = x154 * x78
    x214 = x18 * (2.0 * ax * x211 - x105)
    x215 = x164 + x213 + x214
    x216 = 2.0 * x205
    x217 = 2.0 * x151
    x218 = x2 * (4.0 * x150 + x216 + x217)
    x219 = x211 * x88 + x218
    x220 = x2 * (4.0 * x148 + 2.0 * x149 + x153 * x54 + 2.0 * x204 + x207 * x62)
    x221 = 2.0 * x150
    x222 = -x11 * (-2.0 * bx * x219 + x216 + x221) + x215 * x88 + x220
    x223 = x13 * x75
    x224 = x222 * x223
    x225 = x223 * x7
    x226 = 3.141592653589793 * x13 * x3 * x73
    x227 = x226 * x7
    x228 = x84 * x94
    x229 = x118 + x228
    x230 = x171 * x83 + x18 * (x0 * x229 + x122)
    x231 = x119 + x230
    x232 = x50 * x89
    x233 = x176 * x83
    x234 = x175 * x83
    x235 = x180 + x234
    x236 = x0 * x235 - x99
    x237 = x178 + x18 * x236 + x233
    x238 = x34 * x89
    x239 = x182 * x83
    x240 = x188 + x239
    x241 = x240 * x89
    x242 = x184 * x83
    x243 = x18 * (2.0 * ax * x240 - x121)
    x244 = x193 + x242 + x243
    x245 = 2.0 * x234
    x246 = 2.0 * x181
    x247 = x2 * (4.0 * x180 + x245 + x246)
    x248 = x240 * x98 + x247
    x249 = x2 * (4.0 * x178 + 2.0 * x179 + x183 * x54 + 2.0 * x233 + x236 * x62)
    x250 = 2.0 * x180
    x251 = -x11 * (-2.0 * bx * x248 + x245 + x250) + x244 * x98 + x249
    x252 = x226 * x251
    x253 = x29 + x42
    x254 = x5 * (x40 + x51)
    x255 = x11 * (x1 * x254 - 2.0 * x16) + x2 * (x16 * x43 + 2.0 * x17) + x253 * x5
    x256 = x78 * (x126 + x199)
    x257 = x256 * x94
    x258 = x18 * (x0 * x256 - 2.0 * x137) + x2 * (x137 * x43 + 2.0 * x138) + x201 * x78
    x259 = x2 * (x158 + x198) + x206 * x78
    x260 = x259 * x94
    x261 = x18 * (2.0 * ax * x259 - x166) + x2 * (x163 + x200) + x208 * x78
    x262 = x211 * x78 + x218
    x263 = x223 * (-x18 * (-2.0 * ax * x262 + x217 + x221) + x215 * x78 + x220)
    x264 = x223 * x5
    x265 = 2.0 * x160
    x266 = x2 * (5.0 * x159 + 3.0 * x210 + x265) + x219 * x78
    x267 = x223 * x266
    x268 = x10 * x223
    x269 = x15 * x259
    x270 = x15 * x256
    x271 = x15 * x211
    x272 = x15 * x206
    x273 = x15 * x190
    x274 = x226 * x78
    x275 = x15 * x161
    x276 = x15 * x152
    x277 = x15 * x240
    x278 = x83 * (x133 + x229)
    x279 = x278 * x89
    x280 = x18 * (x0 * x278 - 2.0 * x169) + x2 * (x169 * x43 + 2.0 * x170) + x231 * x83
    x281 = x2 * (x187 + x228) + x235 * x83
    x282 = x281 * x89
    x283 = x18 * (2.0 * ax * x281 - x195) + x2 * (x192 + x230) + x237 * x83
    x284 = x226 * x5
    x285 = x240 * x83 + x247
    x286 = x226 * (-x18 * (-2.0 * ax * x285 + x246 + x250) + x244 * x83 + x249)
    x287 = x15 * x278
    x288 = x15 * x281
    x289 = 2.0 * x189
    x290 = x2 * (5.0 * x188 + 3.0 * x239 + x289) + x248 * x83
    x291 = x226 * x290

    # 100 item(s)
    result[0, 0] = numpy.sum(
        x87
        * (
            x76
            * (
                -x18 * (-2.0 * ax * x72 + 2.0 * x48 + x71)
                + x2 * (2.0 * x37 + 3.0 * x38 + 5.0 * x45 + x53 * x54 + 3.0 * x57)
                + x7 * x70
            )
            + x80 * x81
            + x81 * x85
        )
    )
    result[0, 1] = numpy.sum(x97 * (x85 * x88 * x96 + x88 * x95 + x92 * x93 * x94))
    result[0, 2] = numpy.sum(x97 * (x101 * x89 * x93 + x80 * x96 * x98 + x95 * x98))
    result[0, 3] = numpy.sum(x97 * (x105 * x111 * x85 + x105 * x115 * x94 + x108 * x111))
    result[0, 4] = numpy.sum(
        x117 * (x101 * x110 * x90 + x110 * x92 * x99 + x115 * x116 * x88)
    )
    result[0, 5] = numpy.sum(x97 * (x115 * x121 * x89 + x121 * x125 * x80 + x124 * x125))
    result[0, 6] = numpy.sum(x87 * (x127 * x130 * x85 + x127 * x132 * x94 + x128 * x130))
    result[0, 7] = numpy.sum(
        x97 * (x101 * x105 * x129 + x105 * x132 * x99 + x108 * x129 * x99)
    )
    result[0, 8] = numpy.sum(
        x97 * (x121 * x129 * x92 + x121 * x132 * x90 + x124 * x129 * x90)
    )
    result[0, 9] = numpy.sum(x87 * (x132 * x134 * x89 + x134 * x136 * x80 + x135 * x136))
    result[1, 0] = numpy.sum(x97 * (x139 * x68 * x94 + x140 * x78 + x141 * x78 * x85))
    result[1, 1] = numpy.sum(x147 * (x144 * x146 * x85 + x144 * x64 * x94 + x145 * x146))
    result[1, 2] = numpy.sum(
        x147 * (x101 * x137 * x56 + x116 * x64 * x78 + x139 * x56 * x99)
    )
    result[1, 3] = numpy.sum(x147 * (x114 * x152 * x94 + x152 * x155 * x85 + x154 * x155))
    result[1, 4] = numpy.sum(
        x156 * (x101 * x144 * x60 + x114 * x144 * x99 + x145 * x60 * x99)
    )
    result[1, 5] = numpy.sum(
        x147 * (x114 * x121 * x137 + x121 * x139 * x60 + x124 * x137 * x60)
    )
    result[1, 6] = numpy.sum(x97 * (x112 * x162 * x85 + x112 * x168 * x94 + x131 * x162))
    result[1, 7] = numpy.sum(
        x147 * (x101 * x112 * x152 + x112 * x154 * x99 + x131 * x152 * x99)
    )
    result[1, 8] = numpy.sum(
        x147 * (x112 * x121 * x145 + x112 * x124 * x144 + x121 * x131 * x144)
    )
    result[1, 9] = numpy.sum(
        x97 * (x112 * x134 * x139 + x112 * x135 * x137 + x131 * x134 * x137)
    )
    result[2, 0] = numpy.sum(x97 * (x140 * x83 + x141 * x80 * x83 + x171 * x68 * x89))
    result[2, 1] = numpy.sum(
        x147 * (x169 * x56 * x92 + x171 * x56 * x90 + x172 * x64 * x88)
    )
    result[2, 2] = numpy.sum(x147 * (x175 * x177 * x80 + x175 * x64 * x89 + x176 * x177))
    result[2, 3] = numpy.sum(
        x147 * (x105 * x114 * x169 + x105 * x171 * x60 + x108 * x169 * x60)
    )
    result[2, 4] = numpy.sum(
        x156 * (x114 * x175 * x90 + x175 * x60 * x92 + x176 * x60 * x90)
    )
    result[2, 5] = numpy.sum(x147 * (x114 * x182 * x89 + x182 * x185 * x80 + x184 * x185))
    result[2, 6] = numpy.sum(
        x97 * (x112 * x127 * x171 + x112 * x128 * x169 + x127 * x131 * x169)
    )
    result[2, 7] = numpy.sum(
        x147 * (x105 * x112 * x176 + x105 * x131 * x175 + x108 * x112 * x175)
    )
    result[2, 8] = numpy.sum(
        x147 * (x112 * x182 * x92 + x112 * x184 * x90 + x131 * x182 * x90)
    )
    result[2, 9] = numpy.sum(x97 * (x112 * x191 * x80 + x112 * x197 * x89 + x131 * x191))
    result[3, 0] = numpy.sum(x97 * (x199 * x202 * x85 + x199 * x203 * x94 + x201 * x202))
    result[3, 1] = numpy.sum(x147 * (x206 * x209 * x85 + x206 * x36 * x94 + x208 * x209))
    result[3, 2] = numpy.sum(
        x147 * (x101 * x199 * x34 + x199 * x36 * x99 + x201 * x34 * x99)
    )
    result[3, 3] = numpy.sum(x147 * (x212 * x28 * x85 + x212 * x30 + x215 * x28 * x94))
    result[3, 4] = numpy.sum(
        x156 * (x101 * x206 * x28 + x206 * x30 * x99 + x208 * x28 * x99)
    )
    result[3, 5] = numpy.sum(
        x147 * (x121 * x199 * x30 + x121 * x201 * x28 + x124 * x199 * x28)
    )
    result[3, 6] = numpy.sum(x97 * (x219 * x225 * x85 + x219 * x23 * x94 + x224 * x7))
    result[3, 7] = numpy.sum(
        x147 * (x101 * x21 * x211 + x211 * x23 * x99 + x215 * x225 * x98)
    )
    result[3, 8] = numpy.sum(
        x147 * (x121 * x206 * x23 + x121 * x208 * x21 + x124 * x206 * x21)
    )
    result[3, 9] = numpy.sum(
        x97 * (x134 * x199 * x23 + x134 * x201 * x21 + x135 * x199 * x21)
    )
    result[4, 0] = numpy.sum(
        x117 * (x137 * x171 * x50 + x139 * x169 * x50 + x172 * x203 * x78)
    )
    result[4, 1] = numpy.sum(
        x156 * (x144 * x169 * x36 + x144 * x171 * x34 + x145 * x169 * x34)
    )
    result[4, 2] = numpy.sum(
        x156 * (x137 * x175 * x36 + x137 * x176 * x34 + x139 * x175 * x34)
    )
    result[4, 3] = numpy.sum(
        x156 * (x152 * x169 * x30 + x152 * x171 * x28 + x154 * x169 * x28)
    )
    result[4, 4] = numpy.sum(
        181.0193359837562
        * x86
        * (x144 * x175 * x30 + x144 * x176 * x28 + x145 * x175 * x28)
    )
    result[4, 5] = numpy.sum(
        x156 * (x137 * x182 * x30 + x137 * x184 * x28 + x139 * x182 * x28)
    )
    result[4, 6] = numpy.sum(
        x117 * (x161 * x169 * x23 + x161 * x171 * x21 + x168 * x225 * x83)
    )
    result[4, 7] = numpy.sum(
        x156 * (x152 * x175 * x23 + x152 * x176 * x21 + x154 * x175 * x21)
    )
    result[4, 8] = numpy.sum(
        x156 * (x144 * x182 * x23 + x144 * x184 * x21 + x145 * x182 * x21)
    )
    result[4, 9] = numpy.sum(
        x117 * (x137 * x190 * x23 + x139 * x190 * x21 + x197 * x227 * x78)
    )
    result[5, 0] = numpy.sum(x97 * (x203 * x229 * x89 + x229 * x232 * x80 + x231 * x232))
    result[5, 1] = numpy.sum(
        x147 * (x229 * x34 * x92 + x229 * x36 * x90 + x231 * x34 * x90)
    )
    result[5, 2] = numpy.sum(x147 * (x235 * x238 * x80 + x235 * x36 * x89 + x237 * x238))
    result[5, 3] = numpy.sum(
        x147 * (x105 * x229 * x30 + x105 * x231 * x28 + x108 * x229 * x28)
    )
    result[5, 4] = numpy.sum(
        x156 * (x235 * x28 * x92 + x235 * x30 * x90 + x237 * x28 * x90)
    )
    result[5, 5] = numpy.sum(x147 * (x241 * x28 * x80 + x241 * x30 + x244 * x28 * x89))
    result[5, 6] = numpy.sum(
        x97 * (x127 * x21 * x231 + x127 * x229 * x23 + x128 * x21 * x229)
    )
    result[5, 7] = numpy.sum(
        x147 * (x105 * x21 * x237 + x105 * x23 * x235 + x108 * x21 * x235)
    )
    result[5, 8] = numpy.sum(
        x147 * (x21 * x240 * x92 + x227 * x244 * x88 + x23 * x240 * x90)
    )
    result[5, 9] = numpy.sum(x97 * (x227 * x248 * x80 + x23 * x248 * x89 + x252 * x7))
    result[6, 0] = numpy.sum(x87 * (x254 * x257 * x85 + x254 * x258 * x94 + x255 * x257))
    result[6, 1] = numpy.sum(x97 * (x253 * x260 + x260 * x40 * x85 + x261 * x40 * x94))
    result[6, 2] = numpy.sum(
        x97 * (x101 * x256 * x40 + x253 * x256 * x99 + x258 * x40 * x99)
    )
    result[6, 3] = numpy.sum(x97 * (x20 * x262 * x94 + x262 * x264 * x85 + x263 * x5))
    result[6, 4] = numpy.sum(
        x117 * (x101 * x16 * x259 + x20 * x259 * x99 + x261 * x264 * x98)
    )
    result[6, 5] = numpy.sum(
        x97 * (x121 * x16 * x258 + x121 * x20 * x256 + x124 * x16 * x256)
    )
    result[6, 6] = numpy.sum(
        x87
        * (
            x10 * x267
            + x223
            * (
                -x18 * (-2.0 * ax * x266 + 2.0 * x159 + x265)
                + x2 * (5.0 * x164 + 2.0 * x165 + x167 * x54 + 3.0 * x213 + 3.0 * x214)
                + x222 * x78
            )
            + x267 * x85
        )
    )
    result[6, 7] = numpy.sum(x97 * (x101 * x15 * x262 + x262 * x268 * x98 + x263 * x98))
    result[6, 8] = numpy.sum(x97 * (x10 * x121 * x269 + x121 * x15 * x261 + x124 * x269))
    result[6, 9] = numpy.sum(x87 * (x10 * x134 * x270 + x134 * x15 * x258 + x135 * x270))
    result[7, 0] = numpy.sum(
        x97 * (x169 * x199 * x255 + x169 * x201 * x254 + x171 * x199 * x254)
    )
    result[7, 1] = numpy.sum(
        x147 * (x169 * x206 * x253 + x169 * x208 * x40 + x171 * x206 * x40)
    )
    result[7, 2] = numpy.sum(
        x147 * (x175 * x199 * x253 + x175 * x201 * x40 + x176 * x199 * x40)
    )
    result[7, 3] = numpy.sum(
        x147 * (x16 * x171 * x211 + x169 * x20 * x211 + x215 * x264 * x83)
    )
    result[7, 4] = numpy.sum(
        x156 * (x16 * x175 * x208 + x16 * x176 * x206 + x175 * x20 * x206)
    )
    result[7, 5] = numpy.sum(
        x147 * (x16 * x182 * x201 + x16 * x184 * x199 + x182 * x199 * x20)
    )
    result[7, 6] = numpy.sum(x97 * (x15 * x171 * x219 + x219 * x268 * x83 + x224 * x83))
    result[7, 7] = numpy.sum(x147 * (x10 * x175 * x271 + x15 * x175 * x215 + x176 * x271))
    result[7, 8] = numpy.sum(x147 * (x10 * x182 * x272 + x15 * x182 * x208 + x184 * x272))
    result[7, 9] = numpy.sum(x97 * (x10 * x199 * x273 + x15 * x197 * x199 + x201 * x273))
    result[8, 0] = numpy.sum(
        x97 * (x137 * x229 * x255 + x137 * x231 * x254 + x139 * x229 * x254)
    )
    result[8, 1] = numpy.sum(
        x147 * (x144 * x229 * x253 + x144 * x231 * x40 + x145 * x229 * x40)
    )
    result[8, 2] = numpy.sum(
        x147 * (x137 * x235 * x253 + x137 * x237 * x40 + x139 * x235 * x40)
    )
    result[8, 3] = numpy.sum(
        x147 * (x152 * x16 * x231 + x152 * x20 * x229 + x154 * x16 * x229)
    )
    result[8, 4] = numpy.sum(
        x156 * (x144 * x16 * x237 + x144 * x20 * x235 + x145 * x16 * x235)
    )
    result[8, 5] = numpy.sum(
        x147 * (x137 * x20 * x240 + x139 * x16 * x240 + x244 * x274 * x5)
    )
    result[8, 6] = numpy.sum(x97 * (x10 * x229 * x275 + x15 * x168 * x229 + x231 * x275))
    result[8, 7] = numpy.sum(x147 * (x10 * x235 * x276 + x15 * x154 * x235 + x237 * x276))
    result[8, 8] = numpy.sum(x147 * (x10 * x144 * x277 + x144 * x15 * x244 + x145 * x277))
    result[8, 9] = numpy.sum(x97 * (x10 * x248 * x274 + x139 * x15 * x248 + x252 * x78))
    result[9, 0] = numpy.sum(x87 * (x254 * x279 * x80 + x254 * x280 * x89 + x255 * x279))
    result[9, 1] = numpy.sum(
        x97 * (x253 * x278 * x90 + x278 * x40 * x92 + x280 * x40 * x90)
    )
    result[9, 2] = numpy.sum(x97 * (x253 * x282 + x282 * x40 * x80 + x283 * x40 * x89))
    result[9, 3] = numpy.sum(
        x97 * (x105 * x16 * x280 + x105 * x20 * x278 + x108 * x16 * x278)
    )
    result[9, 4] = numpy.sum(
        x117 * (x16 * x281 * x92 + x20 * x281 * x90 + x283 * x284 * x88)
    )
    result[9, 5] = numpy.sum(x97 * (x20 * x285 * x89 + x284 * x285 * x80 + x286 * x5))
    result[9, 6] = numpy.sum(x87 * (x10 * x127 * x287 + x127 * x15 * x280 + x128 * x287))
    result[9, 7] = numpy.sum(x97 * (x10 * x105 * x288 + x105 * x15 * x283 + x108 * x288))
    result[9, 8] = numpy.sum(
        x97 * (x10 * x226 * x285 * x88 + x15 * x285 * x92 + x286 * x88)
    )
    result[9, 9] = numpy.sum(
        x87
        * (
            x10 * x291
            + x226
            * (
                -x18 * (-2.0 * ax * x290 + 2.0 * x188 + x289)
                + x2 * (5.0 * x193 + 2.0 * x194 + x196 * x54 + 3.0 * x242 + 3.0 * x243)
                + x251 * x83
            )
            + x291 * x80
        )
    )
    return result


def kinetic3d_34(ax, da, A, bx, db, B):
    """Cartesian 3D (fg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -x4 - B[0]
    x7 = -ax
    x8 = x5**2
    x9 = 2.0 * ax**2
    x10 = -x7 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x6
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x20 * x6
    x22 = x15 * x6**2
    x23 = x15 * x2
    x24 = x22 + x23
    x25 = -x15
    x26 = x11 * (x1 * x24 + x25)
    x27 = x21 + x26
    x28 = x10 * x23
    x29 = 3.0 * x28
    x30 = x20 * x5
    x31 = x15 * x5
    x32 = x31 * x6
    x33 = x23 + x32
    x34 = 4.0 * x12
    x35 = x29 + 2.0 * x30 + x33 * x34
    x36 = x2 * (x27 + x35)
    x37 = x10 * x31
    x38 = x19 * x31 + x37
    x39 = x2 * (x20 + x38)
    x40 = x19 * x33 + x28 + x30
    x41 = x40 * x6
    x42 = x2 * (x16 + x31)
    x43 = x33 * x6
    x44 = x42 + x43
    x45 = x1 * x44 - x31
    x46 = x11 * x45
    x47 = x39 + x41 + x46
    x48 = x47 * x5
    x49 = 3.0 * x23
    x50 = 2.0 * x32
    x51 = x49 + x50
    x52 = x2 * (x22 + x51)
    x53 = x44 * x5
    x54 = x52 + x53
    x55 = x18 * (2.0 * ax * x54 - x24)
    x56 = x36 + x48 + x55
    x57 = x5 * x56
    x58 = x56 * x6
    x59 = x40 * x5
    x60 = x0 * x3
    x61 = x33 * x5
    x62 = x42 + x61
    x63 = x0 * x62 - x16
    x64 = x1 * x3
    x65 = x2 * (4.0 * x39 + 2.0 * x41 + x45 * x60 + 2.0 * x59 + x63 * x64)
    x66 = 2.0 * x61
    x67 = 2.0 * x43
    x68 = x2 * (4.0 * x42 + x66 + x67)
    x69 = x54 * x6
    x70 = x68 + x69
    x71 = 2.0 * x42
    x72 = x11 * (2.0 * bx * x70 - x66 - x71)
    x73 = x5 * x54
    x74 = x68 + x73
    x75 = x18 * (2.0 * ax * x74 - x67 - x71)
    x76 = x47 * x6
    x77 = x44 * x6
    x78 = x52 + x77
    x79 = 2.0 * x23
    x80 = x50 + x79
    x81 = 2.0 * bx * x78 - x80
    x82 = x2 * (5.0 * x36 + 3.0 * x48 + 3.0 * x55 + x60 * x81 + 2.0 * x76)
    x83 = x58 + x65 + x72
    x84 = 2.0 * x77
    x85 = 3.0 * x53
    x86 = x2 * (5.0 * x52 + x84 + x85)
    x87 = x5 * x70 + x86
    x88 = -x18 * (-2.0 * ax * x87 + 2.0 * x52 + x84) + x5 * x83 + x82
    x89 = 3.0 * x73
    x90 = x2 * (6.0 * x68 + 3.0 * x69 + x89) + x6 * x87
    x91 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x92 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x93 = 3.141592653589793 * x3 * x92
    x94 = x91 * x93
    x95 = -x3 * (ax * A[1] + bx * B[1])
    x96 = -x95 - A[1]
    x97 = x96**2
    x98 = -x7 - x9 * (x2 + x97)
    x99 = x90 * x94
    x100 = -x3 * (ax * A[2] + bx * B[2])
    x101 = -x100 - A[2]
    x102 = x101**2
    x103 = -x7 - x9 * (x102 + x2)
    x104 = 0.1795871221251666 * da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**5.5)
    x105 = 9.122517057277419 * x104
    x106 = -x95 - B[1]
    x107 = x14 * x91
    x108 = x106 * x107
    x109 = x108 * x98
    x110 = x108 * x19 + x109
    x111 = x14 * x92
    x112 = x88 * x94
    x113 = x87 * x94
    x114 = 24.13591146450082 * x104
    x115 = -x100 - B[2]
    x116 = x111 * x115
    x117 = x103 * x116
    x118 = x116 * x19 + x117
    x119 = x107 * x2
    x120 = x119 * x98
    x121 = x106 * x110
    x122 = x106**2 * x107
    x123 = x119 + x122
    x124 = -x107
    x125 = x11 * (x1 * x123 + x124)
    x126 = x121 + x125
    x127 = x120 + x126
    x128 = x111 * x74
    x129 = x57 + x65 + x75
    x130 = 31.15932771584945 * x104
    x131 = x115 * x94
    x132 = 53.96953873354034 * x104
    x133 = x111 * x2
    x134 = x103 * x133
    x135 = x115 * x118
    x136 = x111 * x115**2
    x137 = x133 + x136
    x138 = -x111
    x139 = x11 * (x1 * x137 + x138)
    x140 = x135 + x139
    x141 = x134 + x140
    x142 = x107 * x74
    x143 = 2.0 * x119
    x144 = x106 * (x123 + x143)
    x145 = x106 * x127 + x11 * (x1 * x144 - 2.0 * x108) + x2 * (x108 * x34 + 2.0 * x109)
    x146 = x15 * x8
    x147 = x2 * (x146 + x51) + x5 * x62
    x148 = x111 * x147
    x149 = x146 + x23
    x150 = x18 * (x0 * x149 + x25) + x38 * x5
    x151 = x18 * x63 + x39 + x59
    x152 = x151 * x5 + x18 * (2.0 * ax * x147 - x80) + x2 * (x150 + x35)
    x153 = 2.0 * x133
    x154 = x115 * (x137 + x153)
    x155 = x11 * (x1 * x154 - 2.0 * x116) + x115 * x141 + x2 * (x116 * x34 + 2.0 * x117)
    x156 = x107 * x147
    x157 = x150 + x28
    x158 = x5 * (x149 + x79)
    x159 = x157 * x5 + x18 * (x0 * x158 - 2.0 * x31) + x2 * (x31 * x34 + 2.0 * x37)
    x160 = 3.0 * x119
    x161 = 3.0 * x122 + x160
    x162 = x106 * x144 + x161 * x2
    x163 = x111 * x162
    x164 = 3.0 * x120
    x165 = (
        x106 * x145
        + x11 * (2.0 * bx * x162 - x161)
        + x2 * (3.0 * x121 + 3.0 * x125 + x164)
    )
    x166 = 3.0 * x133
    x167 = 3.0 * x136 + x166
    x168 = x115 * x154 + x167 * x2
    x169 = x107 * x168
    x170 = 3.0 * x134
    x171 = (
        x11 * (2.0 * bx * x168 - x167)
        + x115 * x155
        + x2 * (3.0 * x135 + 3.0 * x139 + x170)
    )
    x172 = x107 * x96
    x173 = x172 * x98
    x174 = x172 * x19 + x173
    x175 = x6 * x70 + x86
    x176 = x94 * (-x11 * (-2.0 * bx * x175 + 3.0 * x52 + x85) + x6 * x83 + x82)
    x177 = x175 * x94
    x178 = 20.39856826597365 * x104
    x179 = x110 * x96
    x180 = x106 * x172
    x181 = x119 + x180
    x182 = x120 + x179 + x181 * x19
    x183 = x111 * x70
    x184 = x2 * (x108 + x172)
    x185 = x106 * x181
    x186 = x184 + x185
    x187 = x111 * x186
    x188 = x2 * (x110 + x174)
    x189 = x106 * x182
    x190 = x1 * x186 - x172
    x191 = x11 * x190
    x192 = x188 + x189 + x191
    x193 = 69.67437490583262 * x104
    x194 = 120.6795573225041 * x104
    x195 = x164 + 2.0 * x179 + x181 * x34
    x196 = x2 * (x126 + x195)
    x197 = x106 * x192
    x198 = 2.0 * x180
    x199 = x160 + x198
    x200 = x2 * (x122 + x199)
    x201 = x106 * x186
    x202 = x200 + x201
    x203 = x143 + x198
    x204 = 2.0 * bx * x202 - x203
    x205 = x11 * x204 + x196 + x197
    x206 = x111 * x62
    x207 = 3.0 * x184 + 3.0 * x185
    x208 = x106 * x202 + x2 * (x144 + x207)
    x209 = x111 * x208
    x210 = (
        x106 * x205
        + x11 * (2.0 * bx * x208 - x207)
        + x2 * (x145 + 3.0 * x188 + 3.0 * x189 + 3.0 * x191)
    )
    x211 = x101 * x111
    x212 = x103 * x211
    x213 = x19 * x211 + x212
    x214 = x101 * x94
    x215 = x101 * x118
    x216 = x115 * x211
    x217 = x133 + x216
    x218 = x134 + x19 * x217 + x215
    x219 = x107 * x70
    x220 = x2 * (x116 + x211)
    x221 = x115 * x217
    x222 = x220 + x221
    x223 = x107 * x222
    x224 = x2 * (x118 + x213)
    x225 = x115 * x218
    x226 = x1 * x222 - x211
    x227 = x11 * x226
    x228 = x224 + x225 + x227
    x229 = x170 + 2.0 * x215 + x217 * x34
    x230 = x2 * (x140 + x229)
    x231 = x115 * x228
    x232 = 2.0 * x216
    x233 = x166 + x232
    x234 = x2 * (x136 + x233)
    x235 = x115 * x222
    x236 = x234 + x235
    x237 = x153 + x232
    x238 = 2.0 * bx * x236 - x237
    x239 = x11 * x238 + x230 + x231
    x240 = x107 * x62
    x241 = 3.0 * x220 + 3.0 * x221
    x242 = x115 * x236 + x2 * (x154 + x241)
    x243 = x107 * x242
    x244 = (
        x11 * (2.0 * bx * x242 - x241)
        + x115 * x239
        + x2 * (x155 + 3.0 * x224 + 3.0 * x225 + 3.0 * x227)
    )
    x245 = x107 * x97
    x246 = x119 + x245
    x247 = x174 * x96 + x18 * (x0 * x246 + x124)
    x248 = x120 + x247
    x249 = x6 * (x24 + x79)
    x250 = 3.0 * x42 + 3.0 * x43
    x251 = x2 * (x249 + x250) + x6 * x78
    x252 = x111 * x251
    x253 = x27 + x28
    x254 = x11 * (x1 * x249 - 2.0 * x16) + x2 * (x16 * x34 + 2.0 * x17) + x253 * x6
    x255 = x11 * x81 + x36 + x76
    x256 = (
        x11 * (2.0 * bx * x251 - x250)
        + x2 * (x254 + 3.0 * x39 + 3.0 * x41 + 3.0 * x46)
        + x255 * x6
    )
    x257 = x181 * x96
    x258 = x184 + x257
    x259 = x111 * x258
    x260 = x182 * x96
    x261 = x0 * x258 - x108
    x262 = x18 * x261 + x188 + x260
    x263 = x192 * x96
    x264 = x186 * x96
    x265 = x200 + x264
    x266 = x18 * (2.0 * ax * x265 - x123)
    x267 = x196 + x263 + x266
    x268 = x111 * x44
    x269 = 2.0 * x257
    x270 = 2.0 * x185
    x271 = x2 * (4.0 * x184 + x269 + x270)
    x272 = x106 * x265
    x273 = x271 + x272
    x274 = x111 * x273
    x275 = x2 * (4.0 * x188 + 2.0 * x189 + x190 * x60 + 2.0 * x260 + x261 * x64)
    x276 = x106 * x267
    x277 = 2.0 * x184
    x278 = x11 * (2.0 * bx * x273 - x269 - x277)
    x279 = x275 + x276 + x278
    x280 = 2.0 * x201
    x281 = 3.0 * x264
    x282 = x2 * (5.0 * x200 + x280 + x281)
    x283 = x106 * x273 + x282
    x284 = x2 * (5.0 * x196 + 2.0 * x197 + x204 * x60 + 3.0 * x263 + 3.0 * x266)
    x285 = x13 * x93
    x286 = x285 * (x106 * x279 - x11 * (-2.0 * bx * x283 + 3.0 * x200 + x281) + x284)
    x287 = x285 * x5
    x288 = 35.33135663832854 * x104
    x289 = 93.47798314754836 * x104
    x290 = 120.6795573225041 * x104
    x291 = 209.0231247174979 * x104
    x292 = 3.141592653589793 * x13 * x3 * x91
    x293 = x292 * x5
    x294 = x102 * x111
    x295 = x133 + x294
    x296 = x101 * x213 + x18 * (x0 * x295 + x138)
    x297 = x134 + x296
    x298 = x107 * x251
    x299 = x101 * x217
    x300 = x220 + x299
    x301 = x107 * x300
    x302 = x101 * x218
    x303 = x0 * x300 - x116
    x304 = x18 * x303 + x224 + x302
    x305 = x101 * x228
    x306 = x101 * x222
    x307 = x234 + x306
    x308 = x18 * (2.0 * ax * x307 - x137)
    x309 = x230 + x305 + x308
    x310 = x107 * x44
    x311 = 2.0 * x299
    x312 = 2.0 * x221
    x313 = x2 * (4.0 * x220 + x311 + x312)
    x314 = x115 * x307
    x315 = x313 + x314
    x316 = x107 * x315
    x317 = x2 * (4.0 * x224 + 2.0 * x225 + x226 * x60 + 2.0 * x302 + x303 * x64)
    x318 = x115 * x309
    x319 = 2.0 * x220
    x320 = x11 * (2.0 * bx * x315 - x311 - x319)
    x321 = x317 + x318 + x320
    x322 = 2.0 * x235
    x323 = 3.0 * x306
    x324 = x2 * (5.0 * x234 + x322 + x323)
    x325 = x115 * x315 + x324
    x326 = x2 * (5.0 * x230 + 2.0 * x231 + x238 * x60 + 3.0 * x305 + 3.0 * x308)
    x327 = x292 * (-x11 * (-2.0 * bx * x325 + 3.0 * x234 + x323) + x115 * x321 + x326)
    x328 = x96 * (x143 + x246)
    x329 = x18 * (x0 * x328 - 2.0 * x172) + x2 * (x172 * x34 + 2.0 * x173) + x248 * x96
    x330 = 3.0 * x22 + x49
    x331 = x2 * x330 + x249 * x6
    x332 = x111 * x331
    x333 = x11 * (2.0 * bx * x331 - x330) + x2 * (3.0 * x21 + 3.0 * x26 + x29) + x254 * x6
    x334 = x2 * (x199 + x245) + x258 * x96
    x335 = x111 * x334
    x336 = x18 * (2.0 * ax * x334 - x203) + x2 * (x195 + x247) + x262 * x96
    x337 = x265 * x96
    x338 = x271 + x337
    x339 = x111 * x338
    x340 = x267 * x96
    x341 = x18 * (2.0 * ax * x338 - x270 - x277)
    x342 = x275 + x340 + x341
    x343 = x273 * x96 + x282
    x344 = -x18 * (-2.0 * ax * x343 + 2.0 * x200 + x280) + x279 * x96 + x284
    x345 = x285 * x344
    x346 = x285 * x6
    x347 = 3.0 * x337
    x348 = x106 * x343 + x2 * (6.0 * x271 + 3.0 * x272 + x347)
    x349 = x285 * x348
    x350 = x10 * x285
    x351 = x15 * x338
    x352 = x15 * x334
    x353 = x15 * x168
    x354 = x15 * x273
    x355 = x15 * x222
    x356 = x15 * x258
    x357 = x15 * x242
    x358 = x292 * x96
    x359 = x15 * x208
    x360 = x15 * x300
    x361 = x15 * x186
    x362 = x15 * x315
    x363 = x101 * (x153 + x295)
    x364 = x101 * x297 + x18 * (x0 * x363 - 2.0 * x211) + x2 * (x211 * x34 + 2.0 * x212)
    x365 = x107 * x331
    x366 = x101 * x300 + x2 * (x233 + x294)
    x367 = x107 * x366
    x368 = x101 * x304 + x18 * (2.0 * ax * x366 - x237) + x2 * (x229 + x296)
    x369 = x101 * x307
    x370 = x313 + x369
    x371 = x107 * x370
    x372 = x101 * x309
    x373 = x18 * (2.0 * ax * x370 - x312 - x319)
    x374 = x317 + x372 + x373
    x375 = x292 * x6
    x376 = x101 * x315 + x324
    x377 = x101 * x321 - x18 * (-2.0 * ax * x376 + 2.0 * x234 + x322) + x326
    x378 = x292 * x377
    x379 = x15 * x162
    x380 = x15 * x366
    x381 = x15 * x370
    x382 = 3.0 * x369
    x383 = x115 * x376 + x2 * (6.0 * x313 + 3.0 * x314 + x382)
    x384 = x292 * x383

    # 150 item(s)
    result[0, 0] = numpy.sum(
        x105
        * (
            x103 * x99
            + x94
            * (
                -x11 * (-2.0 * bx * x90 + 3.0 * x68 + x89)
                + 3.0 * x2 * (x57 + x58 + 2.0 * x65 + x72 + x75)
                + x6 * x88
            )
            + x98 * x99
        )
    )
    result[0, 1] = numpy.sum(
        x114 * (x103 * x106 * x113 + x106 * x112 + x110 * x111 * x87)
    )
    result[0, 2] = numpy.sum(x114 * (x107 * x118 * x87 + x112 * x115 + x113 * x115 * x98))
    result[0, 3] = numpy.sum(
        x130 * (x103 * x123 * x128 + x111 * x123 * x129 + x127 * x128)
    )
    result[0, 4] = numpy.sum(
        x132 * (x106 * x129 * x131 + x108 * x118 * x74 + x110 * x116 * x74)
    )
    result[0, 5] = numpy.sum(
        x130 * (x107 * x129 * x137 + x137 * x142 * x98 + x141 * x142)
    )
    result[0, 6] = numpy.sum(
        x114 * (x103 * x144 * x148 + x111 * x144 * x152 + x145 * x148)
    )
    result[0, 7] = numpy.sum(
        x132 * (x116 * x123 * x152 + x116 * x127 * x147 + x118 * x123 * x147)
    )
    result[0, 8] = numpy.sum(
        x132 * (x108 * x137 * x152 + x108 * x141 * x147 + x110 * x137 * x147)
    )
    result[0, 9] = numpy.sum(
        x114 * (x107 * x152 * x154 + x154 * x156 * x98 + x155 * x156)
    )
    result[0, 10] = numpy.sum(
        x105 * (x103 * x158 * x163 + x111 * x158 * x165 + x159 * x163)
    )
    result[0, 11] = numpy.sum(
        x114 * (x116 * x144 * x159 + x116 * x145 * x158 + x118 * x144 * x158)
    )
    result[0, 12] = numpy.sum(
        x130 * (x123 * x137 * x159 + x123 * x141 * x158 + x127 * x137 * x158)
    )
    result[0, 13] = numpy.sum(
        x114 * (x108 * x154 * x159 + x108 * x155 * x158 + x110 * x154 * x158)
    )
    result[0, 14] = numpy.sum(
        x105 * (x107 * x158 * x171 + x158 * x169 * x98 + x159 * x169)
    )
    result[1, 0] = numpy.sum(x178 * (x103 * x177 * x96 + x111 * x174 * x175 + x176 * x96))
    result[1, 1] = numpy.sum(
        x132 * (x103 * x181 * x183 + x111 * x181 * x83 + x182 * x183)
    )
    result[1, 2] = numpy.sum(
        x132 * (x116 * x174 * x70 + x118 * x172 * x70 + x131 * x83 * x96)
    )
    result[1, 3] = numpy.sum(x193 * (x103 * x187 * x54 + x111 * x192 * x54 + x187 * x56))
    result[1, 4] = numpy.sum(
        x194 * (x116 * x181 * x56 + x116 * x182 * x54 + x118 * x181 * x54)
    )
    result[1, 5] = numpy.sum(
        x193 * (x137 * x172 * x56 + x137 * x174 * x54 + x141 * x172 * x54)
    )
    result[1, 6] = numpy.sum(
        x132 * (x103 * x202 * x206 + x111 * x151 * x202 + x205 * x206)
    )
    result[1, 7] = numpy.sum(
        x194 * (x116 * x151 * x186 + x116 * x192 * x62 + x118 * x186 * x62)
    )
    result[1, 8] = numpy.sum(
        x194 * (x137 * x151 * x181 + x137 * x182 * x62 + x141 * x181 * x62)
    )
    result[1, 9] = numpy.sum(
        x132 * (x151 * x154 * x172 + x154 * x174 * x62 + x155 * x172 * x62)
    )
    result[1, 10] = numpy.sum(
        x178 * (x103 * x149 * x209 + x111 * x149 * x210 + x157 * x209)
    )
    result[1, 11] = numpy.sum(
        x132 * (x116 * x149 * x205 + x116 * x157 * x202 + x118 * x149 * x202)
    )
    result[1, 12] = numpy.sum(
        x193 * (x137 * x149 * x192 + x137 * x157 * x186 + x141 * x149 * x186)
    )
    result[1, 13] = numpy.sum(
        x132 * (x149 * x154 * x182 + x149 * x155 * x181 + x154 * x157 * x181)
    )
    result[1, 14] = numpy.sum(
        x178 * (x149 * x168 * x174 + x149 * x171 * x172 + x157 * x168 * x172)
    )
    result[2, 0] = numpy.sum(
        x178 * (x101 * x176 + x101 * x177 * x98 + x107 * x175 * x213)
    )
    result[2, 1] = numpy.sum(
        x132 * (x106 * x214 * x83 + x108 * x213 * x70 + x110 * x211 * x70)
    )
    result[2, 2] = numpy.sum(x132 * (x107 * x217 * x83 + x217 * x219 * x98 + x218 * x219))
    result[2, 3] = numpy.sum(
        x193 * (x123 * x211 * x56 + x123 * x213 * x54 + x127 * x211 * x54)
    )
    result[2, 4] = numpy.sum(
        x194 * (x108 * x217 * x56 + x108 * x218 * x54 + x110 * x217 * x54)
    )
    result[2, 5] = numpy.sum(x193 * (x107 * x228 * x54 + x223 * x54 * x98 + x223 * x56))
    result[2, 6] = numpy.sum(
        x132 * (x144 * x151 * x211 + x144 * x213 * x62 + x145 * x211 * x62)
    )
    result[2, 7] = numpy.sum(
        x194 * (x123 * x151 * x217 + x123 * x218 * x62 + x127 * x217 * x62)
    )
    result[2, 8] = numpy.sum(
        x194 * (x108 * x151 * x222 + x108 * x228 * x62 + x110 * x222 * x62)
    )
    result[2, 9] = numpy.sum(
        x132 * (x107 * x151 * x236 + x236 * x240 * x98 + x239 * x240)
    )
    result[2, 10] = numpy.sum(
        x178 * (x149 * x162 * x213 + x149 * x165 * x211 + x157 * x162 * x211)
    )
    result[2, 11] = numpy.sum(
        x132 * (x144 * x149 * x218 + x144 * x157 * x217 + x145 * x149 * x217)
    )
    result[2, 12] = numpy.sum(
        x193 * (x123 * x149 * x228 + x123 * x157 * x222 + x127 * x149 * x222)
    )
    result[2, 13] = numpy.sum(
        x132 * (x108 * x149 * x239 + x108 * x157 * x236 + x110 * x149 * x236)
    )
    result[2, 14] = numpy.sum(
        x178 * (x107 * x149 * x244 + x149 * x243 * x98 + x157 * x243)
    )
    result[3, 0] = numpy.sum(
        x178 * (x103 * x246 * x252 + x111 * x246 * x256 + x248 * x252)
    )
    result[3, 1] = numpy.sum(x132 * (x103 * x259 * x78 + x111 * x262 * x78 + x255 * x259))
    result[3, 2] = numpy.sum(
        x132 * (x116 * x246 * x255 + x116 * x248 * x78 + x118 * x246 * x78)
    )
    result[3, 3] = numpy.sum(
        x193 * (x103 * x265 * x268 + x111 * x265 * x47 + x267 * x268)
    )
    result[3, 4] = numpy.sum(
        x194 * (x116 * x258 * x47 + x116 * x262 * x44 + x118 * x258 * x44)
    )
    result[3, 5] = numpy.sum(
        x193 * (x137 * x246 * x47 + x137 * x248 * x44 + x141 * x246 * x44)
    )
    result[3, 6] = numpy.sum(x132 * (x103 * x274 * x33 + x111 * x279 * x33 + x274 * x40))
    result[3, 7] = numpy.sum(
        x194 * (x116 * x265 * x40 + x116 * x267 * x33 + x118 * x265 * x33)
    )
    result[3, 8] = numpy.sum(
        x194 * (x137 * x258 * x40 + x137 * x262 * x33 + x141 * x258 * x33)
    )
    result[3, 9] = numpy.sum(
        x132 * (x154 * x246 * x40 + x154 * x248 * x33 + x155 * x246 * x33)
    )
    result[3, 10] = numpy.sum(x178 * (x103 * x283 * x287 + x111 * x283 * x38 + x286 * x5))
    result[3, 11] = numpy.sum(
        x132 * (x115 * x279 * x287 + x116 * x273 * x38 + x118 * x273 * x31)
    )
    result[3, 12] = numpy.sum(
        x193 * (x137 * x265 * x38 + x137 * x267 * x31 + x141 * x265 * x31)
    )
    result[3, 13] = numpy.sum(
        x132 * (x154 * x258 * x38 + x154 * x262 * x31 + x155 * x258 * x31)
    )
    result[3, 14] = numpy.sum(
        x178 * (x168 * x246 * x38 + x168 * x248 * x31 + x171 * x246 * x31)
    )
    result[4, 0] = numpy.sum(
        x288 * (x172 * x213 * x251 + x174 * x211 * x251 + x214 * x256 * x96)
    )
    result[4, 1] = numpy.sum(
        x289 * (x181 * x211 * x255 + x181 * x213 * x78 + x182 * x211 * x78)
    )
    result[4, 2] = numpy.sum(
        x289 * (x172 * x217 * x255 + x172 * x218 * x78 + x174 * x217 * x78)
    )
    result[4, 3] = numpy.sum(
        x290 * (x186 * x211 * x47 + x186 * x213 * x44 + x192 * x211 * x44)
    )
    result[4, 4] = numpy.sum(
        x291 * (x181 * x217 * x47 + x181 * x218 * x44 + x182 * x217 * x44)
    )
    result[4, 5] = numpy.sum(
        x290 * (x172 * x222 * x47 + x172 * x228 * x44 + x174 * x222 * x44)
    )
    result[4, 6] = numpy.sum(
        x289 * (x202 * x211 * x40 + x202 * x213 * x33 + x205 * x211 * x33)
    )
    result[4, 7] = numpy.sum(
        x291 * (x186 * x217 * x40 + x186 * x218 * x33 + x192 * x217 * x33)
    )
    result[4, 8] = numpy.sum(
        x291 * (x181 * x222 * x40 + x181 * x228 * x33 + x182 * x222 * x33)
    )
    result[4, 9] = numpy.sum(
        x289 * (x172 * x236 * x40 + x172 * x239 * x33 + x174 * x236 * x33)
    )
    result[4, 10] = numpy.sum(
        x288 * (x101 * x210 * x287 + x208 * x211 * x38 + x208 * x213 * x31)
    )
    result[4, 11] = numpy.sum(
        x289 * (x202 * x217 * x38 + x202 * x218 * x31 + x205 * x217 * x31)
    )
    result[4, 12] = numpy.sum(
        x290 * (x186 * x222 * x38 + x186 * x228 * x31 + x192 * x222 * x31)
    )
    result[4, 13] = numpy.sum(
        x289 * (x181 * x236 * x38 + x181 * x239 * x31 + x182 * x236 * x31)
    )
    result[4, 14] = numpy.sum(
        x288 * (x172 * x242 * x38 + x174 * x242 * x31 + x244 * x293 * x96)
    )
    result[5, 0] = numpy.sum(
        x178 * (x107 * x256 * x295 + x295 * x298 * x98 + x297 * x298)
    )
    result[5, 1] = numpy.sum(
        x132 * (x108 * x255 * x295 + x108 * x297 * x78 + x110 * x295 * x78)
    )
    result[5, 2] = numpy.sum(x132 * (x107 * x304 * x78 + x255 * x301 + x301 * x78 * x98))
    result[5, 3] = numpy.sum(
        x193 * (x123 * x295 * x47 + x123 * x297 * x44 + x127 * x295 * x44)
    )
    result[5, 4] = numpy.sum(
        x194 * (x108 * x300 * x47 + x108 * x304 * x44 + x110 * x300 * x44)
    )
    result[5, 5] = numpy.sum(x193 * (x107 * x307 * x47 + x307 * x310 * x98 + x309 * x310))
    result[5, 6] = numpy.sum(
        x132 * (x144 * x295 * x40 + x144 * x297 * x33 + x145 * x295 * x33)
    )
    result[5, 7] = numpy.sum(
        x194 * (x123 * x300 * x40 + x123 * x304 * x33 + x127 * x300 * x33)
    )
    result[5, 8] = numpy.sum(
        x194 * (x108 * x307 * x40 + x108 * x309 * x33 + x110 * x307 * x33)
    )
    result[5, 9] = numpy.sum(x132 * (x107 * x321 * x33 + x316 * x33 * x98 + x316 * x40))
    result[5, 10] = numpy.sum(
        x178 * (x162 * x295 * x38 + x162 * x297 * x31 + x165 * x295 * x31)
    )
    result[5, 11] = numpy.sum(
        x132 * (x144 * x300 * x38 + x144 * x304 * x31 + x145 * x300 * x31)
    )
    result[5, 12] = numpy.sum(
        x193 * (x123 * x307 * x38 + x123 * x309 * x31 + x127 * x307 * x31)
    )
    result[5, 13] = numpy.sum(
        x132 * (x106 * x293 * x321 + x108 * x315 * x38 + x110 * x31 * x315)
    )
    result[5, 14] = numpy.sum(x178 * (x107 * x325 * x38 + x293 * x325 * x98 + x327 * x5))
    result[6, 0] = numpy.sum(
        x105 * (x103 * x328 * x332 + x111 * x328 * x333 + x329 * x332)
    )
    result[6, 1] = numpy.sum(
        x114 * (x103 * x249 * x335 + x111 * x249 * x336 + x254 * x335)
    )
    result[6, 2] = numpy.sum(
        x114 * (x116 * x249 * x329 + x116 * x254 * x328 + x118 * x249 * x328)
    )
    result[6, 3] = numpy.sum(x130 * (x103 * x24 * x339 + x111 * x24 * x342 + x253 * x339))
    result[6, 4] = numpy.sum(
        x132 * (x116 * x24 * x336 + x116 * x253 * x334 + x118 * x24 * x334)
    )
    result[6, 5] = numpy.sum(
        x130 * (x137 * x24 * x329 + x137 * x253 * x328 + x141 * x24 * x328)
    )
    result[6, 6] = numpy.sum(x114 * (x103 * x343 * x346 + x111 * x20 * x343 + x345 * x6))
    result[6, 7] = numpy.sum(
        x132 * (x115 * x342 * x346 + x116 * x20 * x338 + x118 * x16 * x338)
    )
    result[6, 8] = numpy.sum(
        x132 * (x137 * x16 * x336 + x137 * x20 * x334 + x141 * x16 * x334)
    )
    result[6, 9] = numpy.sum(
        x114 * (x154 * x16 * x329 + x154 * x20 * x328 + x155 * x16 * x328)
    )
    result[6, 10] = numpy.sum(
        x105
        * (
            x10 * x349
            + x103 * x349
            + x285
            * (
                x106 * x344
                - x11 * (-2.0 * bx * x348 + 3.0 * x271 + x347)
                + 3.0 * x2 * (2.0 * x275 + x276 + x278 + x340 + x341)
            )
        )
    )
    result[6, 11] = numpy.sum(
        x114 * (x115 * x343 * x350 + x115 * x345 + x118 * x15 * x343)
    )
    result[6, 12] = numpy.sum(
        x130 * (x10 * x137 * x351 + x137 * x15 * x342 + x141 * x351)
    )
    result[6, 13] = numpy.sum(
        x114 * (x10 * x154 * x352 + x15 * x154 * x336 + x155 * x352)
    )
    result[6, 14] = numpy.sum(
        x105 * (x10 * x328 * x353 + x15 * x171 * x328 + x329 * x353)
    )
    result[7, 0] = numpy.sum(
        x178 * (x211 * x246 * x333 + x211 * x248 * x331 + x213 * x246 * x331)
    )
    result[7, 1] = numpy.sum(
        x132 * (x211 * x249 * x262 + x211 * x254 * x258 + x213 * x249 * x258)
    )
    result[7, 2] = numpy.sum(
        x132 * (x217 * x246 * x254 + x217 * x248 * x249 + x218 * x246 * x249)
    )
    result[7, 3] = numpy.sum(
        x193 * (x211 * x24 * x267 + x211 * x253 * x265 + x213 * x24 * x265)
    )
    result[7, 4] = numpy.sum(
        x194 * (x217 * x24 * x262 + x217 * x253 * x258 + x218 * x24 * x258)
    )
    result[7, 5] = numpy.sum(
        x193 * (x222 * x24 * x248 + x222 * x246 * x253 + x228 * x24 * x246)
    )
    result[7, 6] = numpy.sum(
        x132 * (x101 * x279 * x346 + x16 * x213 * x273 + x20 * x211 * x273)
    )
    result[7, 7] = numpy.sum(
        x194 * (x16 * x217 * x267 + x16 * x218 * x265 + x20 * x217 * x265)
    )
    result[7, 8] = numpy.sum(
        x194 * (x16 * x222 * x262 + x16 * x228 * x258 + x20 * x222 * x258)
    )
    result[7, 9] = numpy.sum(
        x132 * (x16 * x236 * x248 + x16 * x239 * x246 + x20 * x236 * x246)
    )
    result[7, 10] = numpy.sum(
        x178 * (x101 * x283 * x350 + x101 * x286 + x15 * x213 * x283)
    )
    result[7, 11] = numpy.sum(
        x132 * (x10 * x217 * x354 + x15 * x217 * x279 + x218 * x354)
    )
    result[7, 12] = numpy.sum(
        x193 * (x10 * x265 * x355 + x15 * x228 * x265 + x267 * x355)
    )
    result[7, 13] = numpy.sum(
        x132 * (x10 * x236 * x356 + x15 * x236 * x262 + x239 * x356)
    )
    result[7, 14] = numpy.sum(
        x178 * (x10 * x246 * x357 + x15 * x244 * x246 + x248 * x357)
    )
    result[8, 0] = numpy.sum(
        x178 * (x172 * x295 * x333 + x172 * x297 * x331 + x174 * x295 * x331)
    )
    result[8, 1] = numpy.sum(
        x132 * (x181 * x249 * x297 + x181 * x254 * x295 + x182 * x249 * x295)
    )
    result[8, 2] = numpy.sum(
        x132 * (x172 * x249 * x304 + x172 * x254 * x300 + x174 * x249 * x300)
    )
    result[8, 3] = numpy.sum(
        x193 * (x186 * x24 * x297 + x186 * x253 * x295 + x192 * x24 * x295)
    )
    result[8, 4] = numpy.sum(
        x194 * (x181 * x24 * x304 + x181 * x253 * x300 + x182 * x24 * x300)
    )
    result[8, 5] = numpy.sum(
        x193 * (x172 * x24 * x309 + x172 * x253 * x307 + x174 * x24 * x307)
    )
    result[8, 6] = numpy.sum(
        x132 * (x16 * x202 * x297 + x16 * x205 * x295 + x20 * x202 * x295)
    )
    result[8, 7] = numpy.sum(
        x194 * (x16 * x186 * x304 + x16 * x192 * x300 + x186 * x20 * x300)
    )
    result[8, 8] = numpy.sum(
        x194 * (x16 * x181 * x309 + x16 * x182 * x307 + x181 * x20 * x307)
    )
    result[8, 9] = numpy.sum(
        x132 * (x16 * x174 * x315 + x172 * x20 * x315 + x321 * x358 * x6)
    )
    result[8, 10] = numpy.sum(
        x178 * (x10 * x295 * x359 + x15 * x210 * x295 + x297 * x359)
    )
    result[8, 11] = numpy.sum(
        x132 * (x10 * x202 * x360 + x15 * x202 * x304 + x205 * x360)
    )
    result[8, 12] = numpy.sum(
        x193 * (x10 * x307 * x361 + x15 * x192 * x307 + x309 * x361)
    )
    result[8, 13] = numpy.sum(
        x132 * (x10 * x181 * x362 + x15 * x181 * x321 + x182 * x362)
    )
    result[8, 14] = numpy.sum(x178 * (x10 * x325 * x358 + x15 * x174 * x325 + x327 * x96))
    result[9, 0] = numpy.sum(
        x105 * (x107 * x333 * x363 + x363 * x365 * x98 + x364 * x365)
    )
    result[9, 1] = numpy.sum(
        x114 * (x108 * x249 * x364 + x108 * x254 * x363 + x110 * x249 * x363)
    )
    result[9, 2] = numpy.sum(
        x114 * (x107 * x249 * x368 + x249 * x367 * x98 + x254 * x367)
    )
    result[9, 3] = numpy.sum(
        x130 * (x123 * x24 * x364 + x123 * x253 * x363 + x127 * x24 * x363)
    )
    result[9, 4] = numpy.sum(
        x132 * (x108 * x24 * x368 + x108 * x253 * x366 + x110 * x24 * x366)
    )
    result[9, 5] = numpy.sum(x130 * (x107 * x24 * x374 + x24 * x371 * x98 + x253 * x371))
    result[9, 6] = numpy.sum(
        x114 * (x144 * x16 * x364 + x144 * x20 * x363 + x145 * x16 * x363)
    )
    result[9, 7] = numpy.sum(
        x132 * (x123 * x16 * x368 + x123 * x20 * x366 + x127 * x16 * x366)
    )
    result[9, 8] = numpy.sum(
        x132 * (x106 * x374 * x375 + x108 * x20 * x370 + x110 * x16 * x370)
    )
    result[9, 9] = numpy.sum(x114 * (x107 * x20 * x376 + x375 * x376 * x98 + x378 * x6))
    result[9, 10] = numpy.sum(
        x105 * (x10 * x363 * x379 + x15 * x165 * x363 + x364 * x379)
    )
    result[9, 11] = numpy.sum(
        x114 * (x10 * x144 * x380 + x144 * x15 * x368 + x145 * x380)
    )
    result[9, 12] = numpy.sum(
        x130 * (x10 * x123 * x381 + x123 * x15 * x374 + x127 * x381)
    )
    result[9, 13] = numpy.sum(
        x114 * (x10 * x106 * x292 * x376 + x106 * x378 + x110 * x15 * x376)
    )
    result[9, 14] = numpy.sum(
        x105
        * (
            x10 * x384
            + x292
            * (
                -x11 * (-2.0 * bx * x383 + 3.0 * x313 + x382)
                + x115 * x377
                + 3.0 * x2 * (2.0 * x317 + x318 + x320 + x372 + x373)
            )
            + x384 * x98
        )
    )
    return result


def kinetic3d_40(ax, da, A, bx, db, B):
    """Cartesian 3D (gs) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 1), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = (ax + bx) ** (-1.0)
    x3 = x2 * (ax * A[0] + bx * B[0]) - A[0]
    x4 = -ax
    x5 = x3**2
    x6 = 2.0 * ax**2
    x7 = -x4 - x6 * (x1 + x5)
    x8 = bx * x2
    x9 = ax * x8
    x10 = numpy.exp(-x9 * (A[0] - B[0]) ** 2)
    x11 = 1.772453850905516 * numpy.sqrt(x2)
    x12 = x10 * x11
    x13 = x12 * x3
    x14 = x13 * x7
    x15 = x0 * x8
    x16 = x13 * x15 + x14
    x17 = x16 * x3
    x18 = x12 * x5
    x19 = x1 * x12
    x20 = x18 + x19
    x21 = x8 * (x0 * x20 - x12)
    x22 = x19 * x7
    x23 = 4.0 * x9
    x24 = x17 + x21 + x22
    x25 = x3 * (2.0 * x19 + x20)
    x26 = x1 * (x13 * x23 + 2.0 * x14) + x24 * x3 + x8 * (x0 * x25 - 2.0 * x13)
    x27 = 3.0 * x18 + 3.0 * x19
    x28 = x1 * x27 + x25 * x3
    x29 = numpy.exp(-x9 * (A[1] - B[1]) ** 2)
    x30 = numpy.exp(-x9 * (A[2] - B[2]) ** 2)
    x31 = 3.141592653589793 * x2 * x30
    x32 = x29 * x31
    x33 = x2 * (ax * A[1] + bx * B[1]) - A[1]
    x34 = x33**2
    x35 = -x4 - x6 * (x1 + x34)
    x36 = x28 * x32
    x37 = x2 * (ax * A[2] + bx * B[2]) - A[2]
    x38 = x37**2
    x39 = -x4 - x6 * (x1 + x38)
    x40 = 0.1795871221251666 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**1.5)
    x41 = 4.416419579791068 * x40
    x42 = x11 * x29
    x43 = x33 * x42
    x44 = x35 * x43
    x45 = x15 * x43 + x44
    x46 = x11 * x30
    x47 = x45 * x46
    x48 = x26 * x32
    x49 = x25 * x32
    x50 = 11.68474789344354 * x40
    x51 = x37 * x46
    x52 = x39 * x51
    x53 = x15 * x51 + x52
    x54 = x33 * x45
    x55 = x34 * x42
    x56 = x1 * x42
    x57 = x55 + x56
    x58 = x8 * (x0 * x57 - x42)
    x59 = x35 * x56
    x60 = x54 + x58 + x59
    x61 = x20 * x46
    x62 = 15.08494466531301 * x40
    x63 = 26.12789058968724 * x40
    x64 = x37 * x53
    x65 = x38 * x46
    x66 = x1 * x46
    x67 = x65 + x66
    x68 = x8 * (x0 * x67 - x46)
    x69 = x39 * x66
    x70 = x64 + x68 + x69
    x71 = x20 * x42
    x72 = x33 * (2.0 * x56 + x57)
    x73 = x1 * (x23 * x43 + 2.0 * x44) + x33 * x60 + x8 * (x0 * x72 - 2.0 * x43)
    x74 = x10 * x31
    x75 = x73 * x74
    x76 = x3 * x74
    x77 = 3.141592653589793 * x10 * x2 * x29
    x78 = x3 * x77
    x79 = x37 * (2.0 * x66 + x67)
    x80 = x1 * (x23 * x51 + 2.0 * x52) + x37 * x70 + x8 * (x0 * x79 - 2.0 * x51)
    x81 = x77 * x80
    x82 = 3.0 * x55 + 3.0 * x56
    x83 = x1 * x82 + x33 * x72
    x84 = x74 * x83
    x85 = x12 * x57
    x86 = 3.0 * x65 + 3.0 * x66
    x87 = x1 * x86 + x37 * x79
    x88 = x77 * x87

    # 15 item(s)
    result[0, 0] = numpy.sum(
        x41
        * (
            x32 * (3.0 * x1 * (x17 + x21 + x22) + x26 * x3 + x8 * (2.0 * ax * x28 - x27))
            + x35 * x36
            + x36 * x39
        )
    )
    result[1, 0] = numpy.sum(x50 * (x25 * x47 + x33 * x39 * x49 + x33 * x48))
    result[2, 0] = numpy.sum(x50 * (x25 * x42 * x53 + x35 * x37 * x49 + x37 * x48))
    result[3, 0] = numpy.sum(x62 * (x24 * x46 * x57 + x39 * x57 * x61 + x60 * x61))
    result[4, 0] = numpy.sum(
        x63 * (x20 * x37 * x47 + x20 * x43 * x53 + x24 * x32 * x33 * x37)
    )
    result[5, 0] = numpy.sum(x62 * (x24 * x42 * x67 + x35 * x67 * x71 + x70 * x71))
    result[6, 0] = numpy.sum(x50 * (x16 * x46 * x72 + x3 * x75 + x39 * x72 * x76))
    result[7, 0] = numpy.sum(x63 * (x13 * x53 * x57 + x16 * x51 * x57 + x37 * x60 * x76))
    result[8, 0] = numpy.sum(x63 * (x13 * x45 * x67 + x16 * x43 * x67 + x33 * x70 * x78))
    result[9, 0] = numpy.sum(x50 * (x16 * x42 * x79 + x3 * x81 + x35 * x78 * x79))
    result[10, 0] = numpy.sum(
        x41
        * (
            x39 * x84
            + x7 * x84
            + x74
            * (3.0 * x1 * (x54 + x58 + x59) + x33 * x73 + x8 * (2.0 * ax * x83 - x82))
        )
    )
    result[11, 0] = numpy.sum(x50 * (x12 * x53 * x72 + x37 * x7 * x72 * x74 + x37 * x75))
    result[12, 0] = numpy.sum(x62 * (x12 * x60 * x67 + x67 * x7 * x85 + x70 * x85))
    result[13, 0] = numpy.sum(x50 * (x12 * x45 * x79 + x33 * x7 * x77 * x79 + x33 * x81))
    result[14, 0] = numpy.sum(
        x41
        * (
            x35 * x88
            + x7 * x88
            + x77
            * (3.0 * x1 * (x64 + x68 + x69) + x37 * x80 + x8 * (2.0 * ax * x87 - x86))
        )
    )
    return result


def kinetic3d_41(ax, da, A, bx, db, B):
    """Cartesian 3D (gp) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 3), dtype=float)

    x0 = 2.0 * ax
    x1 = (2.0 * bx + x0) ** (-1.0)
    x2 = -ax
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = x5**2
    x7 = 2.0 * ax**2
    x8 = -x2 - x7 * (x1 + x6)
    x9 = bx * x3
    x10 = ax * x9
    x11 = numpy.exp(-x10 * (A[0] - B[0]) ** 2)
    x12 = 1.772453850905516 * numpy.sqrt(x3)
    x13 = x11 * x12
    x14 = x13 * x5
    x15 = x14 * x8
    x16 = x0 * x9
    x17 = x14 * x16 + x15
    x18 = -x4 - B[0]
    x19 = x13 * x18
    x20 = x19 * (x16 + x8)
    x21 = x1 * (x17 + x20)
    x22 = x20 * x5
    x23 = x1 * x13
    x24 = x14 * x18
    x25 = x23 + x24
    x26 = x23 * x8
    x27 = x16 * x25 + x22 + x26
    x28 = x27 * x5
    x29 = x1 * (x14 + x19)
    x30 = x25 * x5
    x31 = x29 + x30
    x32 = x9 * (x0 * x31 - x19)
    x33 = 4.0 * x10
    x34 = x17 * x5
    x35 = x13 * x6
    x36 = x23 + x35
    x37 = x9 * (x0 * x36 - x13)
    x38 = x34 + x37
    x39 = x26 + x38
    x40 = 2.0 * x23
    x41 = x5 * (x36 + x40)
    x42 = x1 * (x14 * x33 + 2.0 * x15) + x39 * x5 + x9 * (x0 * x41 - 2.0 * x14)
    x43 = 3.0 * x26
    x44 = x21 + x28 + x32
    x45 = 3.0 * x23
    x46 = 2.0 * x24
    x47 = x1 * (x35 + x45 + x46) + x31 * x5
    x48 = (
        x1 * (2.0 * x22 + x25 * x33 + x38 + x43)
        + x44 * x5
        - x9 * (-2.0 * ax * x47 + x40 + x46)
    )
    x49 = 3.0 * x29 + 3.0 * x30
    x50 = x1 * (x41 + x49) + x47 * x5
    x51 = numpy.exp(-x10 * (A[1] - B[1]) ** 2)
    x52 = numpy.exp(-x10 * (A[2] - B[2]) ** 2)
    x53 = 3.141592653589793 * x3 * x52
    x54 = x51 * x53
    x55 = -x3 * (ax * A[1] + bx * B[1])
    x56 = -x55 - A[1]
    x57 = x56**2
    x58 = -x2 - x7 * (x1 + x57)
    x59 = x50 * x54
    x60 = -x3 * (ax * A[2] + bx * B[2])
    x61 = -x60 - A[2]
    x62 = x61**2
    x63 = -x2 - x7 * (x1 + x62)
    x64 = 0.1795871221251666 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**2.5)
    x65 = 8.832839159582136 * x64
    x66 = -x55 - B[1]
    x67 = x12 * x51
    x68 = x66 * x67
    x69 = x68 * (x16 + x58)
    x70 = 3.0 * x35 + x45
    x71 = x1 * x70 + x41 * x5
    x72 = x12 * x52
    x73 = x54 * (
        x1 * (3.0 * x34 + 3.0 * x37 + x43) + x42 * x5 + x9 * (2.0 * ax * x71 - x70)
    )
    x74 = x54 * x71
    x75 = -x60 - B[2]
    x76 = x72 * x75
    x77 = x76 * (x16 + x63)
    x78 = x56 * x67
    x79 = x58 * x78
    x80 = x16 * x78 + x79
    x81 = x48 * x54
    x82 = x54 * x56
    x83 = 23.36949578688709 * x64
    x84 = x56 * x69
    x85 = x1 * x67
    x86 = x66 * x78
    x87 = x85 + x86
    x88 = x58 * x85
    x89 = x16 * x87 + x84 + x88
    x90 = x41 * x72
    x91 = x61 * x72
    x92 = x63 * x91
    x93 = x16 * x91 + x92
    x94 = x54 * x61
    x95 = x61 * x77
    x96 = x1 * x72
    x97 = x75 * x91
    x98 = x96 + x97
    x99 = x63 * x96
    x100 = x16 * x98 + x95 + x99
    x101 = x41 * x67
    x102 = x56 * x80
    x103 = x57 * x67
    x104 = x103 + x85
    x105 = x9 * (x0 * x104 - x67)
    x106 = x102 + x105
    x107 = x106 + x88
    x108 = x31 * x72
    x109 = 30.16988933062603 * x64
    x110 = x1 * (x68 + x78)
    x111 = x56 * x87
    x112 = x110 + x111
    x113 = x112 * x72
    x114 = x1 * (x69 + x80)
    x115 = x56 * x89
    x116 = x9 * (x0 * x112 - x68)
    x117 = x114 + x115 + x116
    x118 = 52.25578117937447 * x64
    x119 = x61 * x93
    x120 = x62 * x72
    x121 = x120 + x96
    x122 = x9 * (x0 * x121 - x72)
    x123 = x119 + x122
    x124 = x123 + x99
    x125 = x31 * x67
    x126 = x1 * (x76 + x91)
    x127 = x61 * x98
    x128 = x126 + x127
    x129 = x128 * x67
    x130 = x1 * (x77 + x93)
    x131 = x100 * x61
    x132 = x9 * (x0 * x128 - x76)
    x133 = x130 + x131 + x132
    x134 = 2.0 * x85
    x135 = x56 * (x104 + x134)
    x136 = x135 * x72
    x137 = x1 * (x33 * x78 + 2.0 * x79) + x107 * x56 + x9 * (x0 * x135 - 2.0 * x78)
    x138 = 3.0 * x85
    x139 = 2.0 * x86
    x140 = x1 * (x103 + x138 + x139) + x112 * x56
    x141 = 3.0 * x88
    x142 = (
        x1 * (x106 + x141 + x33 * x87 + 2.0 * x84)
        + x117 * x56
        - x9 * (-2.0 * ax * x140 + x134 + x139)
    )
    x143 = x11 * x53
    x144 = x142 * x143
    x145 = x143 * x5
    x146 = 3.141592653589793 * x11 * x3 * x51
    x147 = x146 * x5
    x148 = 2.0 * x96
    x149 = x61 * (x121 + x148)
    x150 = x149 * x67
    x151 = x1 * (x33 * x91 + 2.0 * x92) + x124 * x61 + x9 * (x0 * x149 - 2.0 * x91)
    x152 = 3.0 * x96
    x153 = 2.0 * x97
    x154 = x1 * (x120 + x152 + x153) + x128 * x61
    x155 = 3.0 * x99
    x156 = (
        x1 * (x123 + x155 + x33 * x98 + 2.0 * x95)
        + x133 * x61
        - x9 * (-2.0 * ax * x154 + x148 + x153)
    )
    x157 = x146 * x156
    x158 = 3.0 * x103 + x138
    x159 = x1 * x158 + x135 * x56
    x160 = x143 * (
        x1 * (3.0 * x102 + 3.0 * x105 + x141) + x137 * x56 + x9 * (2.0 * ax * x159 - x158)
    )
    x161 = x143 * x159
    x162 = 3.0 * x110 + 3.0 * x111
    x163 = x1 * (x135 + x162) + x140 * x56
    x164 = x143 * x163
    x165 = x143 * x61
    x166 = x13 * x135
    x167 = x112 * x13
    x168 = x128 * x13
    x169 = x146 * x56
    x170 = x13 * x149
    x171 = 3.0 * x120 + x152
    x172 = x1 * x171 + x149 * x61
    x173 = x146 * (
        x1 * (3.0 * x119 + 3.0 * x122 + x155) + x151 * x61 + x9 * (2.0 * ax * x172 - x171)
    )
    x174 = x146 * x172
    x175 = 3.0 * x126 + 3.0 * x127
    x176 = x1 * (x149 + x175) + x154 * x61
    x177 = x146 * x176

    # 45 item(s)
    result[0, 0] = numpy.sum(
        x65
        * (
            x54
            * (
                x1 * (3.0 * x21 + 3.0 * x28 + 3.0 * x32 + x42)
                + x48 * x5
                + x9 * (2.0 * ax * x50 - x49)
            )
            + x58 * x59
            + x59 * x63
        )
    )
    result[0, 1] = numpy.sum(x65 * (x63 * x66 * x74 + x66 * x73 + x69 * x71 * x72))
    result[0, 2] = numpy.sum(x65 * (x58 * x74 * x75 + x67 * x71 * x77 + x73 * x75))
    result[1, 0] = numpy.sum(x83 * (x47 * x63 * x82 + x47 * x72 * x80 + x56 * x81))
    result[1, 1] = numpy.sum(x83 * (x42 * x72 * x87 + x63 * x87 * x90 + x89 * x90))
    result[1, 2] = numpy.sum(x83 * (x41 * x76 * x80 + x41 * x77 * x78 + x42 * x75 * x82))
    result[2, 0] = numpy.sum(x83 * (x47 * x58 * x94 + x47 * x67 * x93 + x61 * x81))
    result[2, 1] = numpy.sum(x83 * (x41 * x68 * x93 + x41 * x69 * x91 + x42 * x66 * x94))
    result[2, 2] = numpy.sum(x83 * (x100 * x101 + x101 * x58 * x98 + x42 * x67 * x98))
    result[3, 0] = numpy.sum(x109 * (x104 * x108 * x63 + x104 * x44 * x72 + x107 * x108))
    result[3, 1] = numpy.sum(x109 * (x113 * x36 * x63 + x113 * x39 + x117 * x36 * x72))
    result[3, 2] = numpy.sum(
        x109 * (x104 * x36 * x77 + x104 * x39 * x76 + x107 * x36 * x76)
    )
    result[4, 0] = numpy.sum(x118 * (x31 * x78 * x93 + x31 * x80 * x91 + x44 * x61 * x82))
    result[4, 1] = numpy.sum(x118 * (x36 * x87 * x93 + x36 * x89 * x91 + x39 * x87 * x91))
    result[4, 2] = numpy.sum(
        x118 * (x100 * x36 * x78 + x36 * x80 * x98 + x39 * x78 * x98)
    )
    result[5, 0] = numpy.sum(x109 * (x121 * x125 * x58 + x121 * x44 * x67 + x124 * x125))
    result[5, 1] = numpy.sum(
        x109 * (x121 * x36 * x69 + x121 * x39 * x68 + x124 * x36 * x68)
    )
    result[5, 2] = numpy.sum(x109 * (x129 * x36 * x58 + x129 * x39 + x133 * x36 * x67))
    result[6, 0] = numpy.sum(x83 * (x136 * x25 * x63 + x136 * x27 + x137 * x25 * x72))
    result[6, 1] = numpy.sum(x83 * (x140 * x145 * x63 + x140 * x17 * x72 + x144 * x5))
    result[6, 2] = numpy.sum(
        x83 * (x135 * x14 * x77 + x135 * x17 * x76 + x137 * x145 * x75)
    )
    result[7, 0] = numpy.sum(
        x118 * (x104 * x25 * x93 + x104 * x27 * x91 + x107 * x25 * x91)
    )
    result[7, 1] = numpy.sum(
        x118 * (x112 * x14 * x93 + x112 * x17 * x91 + x117 * x145 * x61)
    )
    result[7, 2] = numpy.sum(
        x118 * (x100 * x104 * x14 + x104 * x17 * x98 + x107 * x14 * x98)
    )
    result[8, 0] = numpy.sum(
        x118 * (x121 * x25 * x80 + x121 * x27 * x78 + x124 * x25 * x78)
    )
    result[8, 1] = numpy.sum(
        x118 * (x121 * x14 * x89 + x121 * x17 * x87 + x124 * x14 * x87)
    )
    result[8, 2] = numpy.sum(
        x118 * (x128 * x14 * x80 + x128 * x17 * x78 + x133 * x147 * x56)
    )
    result[9, 0] = numpy.sum(x83 * (x150 * x25 * x58 + x150 * x27 + x151 * x25 * x67))
    result[9, 1] = numpy.sum(
        x83 * (x14 * x149 * x69 + x147 * x151 * x66 + x149 * x17 * x68)
    )
    result[9, 2] = numpy.sum(x83 * (x147 * x154 * x58 + x154 * x17 * x67 + x157 * x5))
    result[10, 0] = numpy.sum(x65 * (x159 * x20 * x72 + x160 * x18 + x161 * x18 * x63))
    result[10, 1] = numpy.sum(
        x65
        * (
            x143
            * (
                x1 * (3.0 * x114 + 3.0 * x115 + 3.0 * x116 + x137)
                + x142 * x56
                + x9 * (2.0 * ax * x163 - x162)
            )
            + x164 * x63
            + x164 * x8
        )
    )
    result[10, 2] = numpy.sum(x65 * (x13 * x159 * x77 + x160 * x75 + x161 * x75 * x8))
    result[11, 0] = numpy.sum(
        x83 * (x135 * x19 * x93 + x135 * x20 * x91 + x137 * x165 * x18)
    )
    result[11, 1] = numpy.sum(x83 * (x13 * x140 * x93 + x140 * x165 * x8 + x144 * x61))
    result[11, 2] = numpy.sum(x83 * (x100 * x166 + x13 * x137 * x98 + x166 * x8 * x98))
    result[12, 0] = numpy.sum(
        x109 * (x104 * x121 * x20 + x104 * x124 * x19 + x107 * x121 * x19)
    )
    result[12, 1] = numpy.sum(x109 * (x117 * x121 * x13 + x121 * x167 * x8 + x124 * x167))
    result[12, 2] = numpy.sum(x109 * (x104 * x13 * x133 + x104 * x168 * x8 + x107 * x168))
    result[13, 0] = numpy.sum(
        x83 * (x149 * x19 * x80 + x149 * x20 * x78 + x151 * x169 * x18)
    )
    result[13, 1] = numpy.sum(x83 * (x13 * x151 * x87 + x170 * x8 * x87 + x170 * x89))
    result[13, 2] = numpy.sum(x83 * (x13 * x154 * x80 + x154 * x169 * x8 + x157 * x56))
    result[14, 0] = numpy.sum(x65 * (x172 * x20 * x67 + x173 * x18 + x174 * x18 * x58))
    result[14, 1] = numpy.sum(x65 * (x13 * x172 * x69 + x173 * x66 + x174 * x66 * x8))
    result[14, 2] = numpy.sum(
        x65
        * (
            x146
            * (
                x1 * (3.0 * x130 + 3.0 * x131 + 3.0 * x132 + x151)
                + x156 * x61
                + x9 * (2.0 * ax * x176 - x175)
            )
            + x177 * x58
            + x177 * x8
        )
    )
    return result


def kinetic3d_42(ax, da, A, bx, db, B):
    """Cartesian 3D (gd) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 6), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -ax
    x7 = x5**2
    x8 = 2.0 * ax**2
    x9 = -x6 - x8 * (x2 + x7)
    x10 = bx * x3
    x11 = ax * x10
    x12 = numpy.exp(-x11 * (A[0] - B[0]) ** 2)
    x13 = 1.772453850905516 * numpy.sqrt(x3)
    x14 = x12 * x13
    x15 = x14 * x5
    x16 = x15 * x9
    x17 = x0 * x10
    x18 = x15 * x17 + x16
    x19 = x18 * x5
    x20 = x14 * x7
    x21 = x14 * x2
    x22 = x20 + x21
    x23 = -x14
    x24 = x10 * (x0 * x22 + x23)
    x25 = x19 + x24
    x26 = x21 * x9
    x27 = 3.0 * x26
    x28 = -x4 - B[0]
    x29 = x14 * x28
    x30 = x29 * (x17 + x9)
    x31 = x30 * x5
    x32 = x15 * x28
    x33 = x21 + x32
    x34 = 4.0 * x11
    x35 = x27 + 2.0 * x31 + x33 * x34
    x36 = x2 * (x25 + x35)
    x37 = x2 * (x18 + x30)
    x38 = x17 * x33 + x26 + x31
    x39 = x38 * x5
    x40 = x2 * (x15 + x29)
    x41 = x33 * x5
    x42 = x40 + x41
    x43 = x0 * x42 - x29
    x44 = x10 * x43
    x45 = x37 + x39 + x44
    x46 = x45 * x5
    x47 = x14 * x28**2
    x48 = x21 + x47
    x49 = ax * x3
    x50 = x28 * x30 + x49 * (x1 * x48 + x23)
    x51 = x2 * (x35 + x50)
    x52 = x28 * x38
    x53 = x28 * x33
    x54 = x40 + x53
    x55 = x1 * x54 - x15
    x56 = x37 + x49 * x55 + x52
    x57 = x5 * x56
    x58 = 3.0 * x21
    x59 = 2.0 * x32
    x60 = x58 + x59
    x61 = x2 * (x20 + x60)
    x62 = x42 * x5
    x63 = x61 + x62
    x64 = 2.0 * x21
    x65 = 2.0 * ax * x63 - x59 - x64
    x66 = x1 * x3
    x67 = x2 * (x47 + x60)
    x68 = x5 * x54
    x69 = x67 + x68
    x70 = x10 * (2.0 * ax * x69 - x48)
    x71 = x0 * x3
    x72 = x51 + x57 + x70
    x73 = 2.0 * x53
    x74 = x2 * (4.0 * x40 + 2.0 * x41 + x73) + x5 * x69
    x75 = (
        -x10 * (-2.0 * ax * x74 + 2.0 * x40 + x73)
        + x2 * (4.0 * x37 + 2.0 * x39 + x43 * x66 + 2.0 * x52 + x55 * x71)
        + x5 * x72
    )
    x76 = 3.0 * x67 + 3.0 * x68
    x77 = x2 * (2.0 * x61 + 2.0 * x62 + x76) + x5 * x74
    x78 = numpy.exp(-x11 * (A[1] - B[1]) ** 2)
    x79 = numpy.exp(-x11 * (A[2] - B[2]) ** 2)
    x80 = 3.141592653589793 * x3 * x79
    x81 = x78 * x80
    x82 = -x3 * (ax * A[1] + bx * B[1])
    x83 = -x82 - A[1]
    x84 = x83**2
    x85 = -x6 - x8 * (x2 + x84)
    x86 = x77 * x81
    x87 = -x3 * (ax * A[2] + bx * B[2])
    x88 = -x87 - A[2]
    x89 = x88**2
    x90 = -x6 - x8 * (x2 + x89)
    x91 = 0.1795871221251666 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**3.5)
    x92 = 10.19928413298683 * x91
    x93 = -x82 - B[1]
    x94 = x13 * x78
    x95 = x93 * x94
    x96 = x95 * (x17 + x85)
    x97 = x5 * (x22 + x64)
    x98 = 3.0 * x40 + 3.0 * x41
    x99 = x2 * (x97 + x98) + x5 * x63
    x100 = x13 * x79
    x101 = x25 + x26
    x102 = x10 * (x0 * x97 - 2.0 * x15) + x101 * x5 + x2 * (x15 * x34 + 2.0 * x16)
    x103 = x10 * x65 + x36 + x46
    x104 = x81 * (
        x10 * (2.0 * ax * x99 - x98)
        + x103 * x5
        + x2 * (x102 + 3.0 * x37 + 3.0 * x39 + 3.0 * x44)
    )
    x105 = x81 * x99
    x106 = 17.66567831916427 * x91
    x107 = -x87 - B[2]
    x108 = x100 * x107
    x109 = x108 * (x17 + x90)
    x110 = x2 * x94
    x111 = x110 * x85
    x112 = x93**2 * x94
    x113 = x110 + x112
    x114 = -x94
    x115 = x49 * (x1 * x113 + x114) + x93 * x96
    x116 = x111 + x115
    x117 = 3.0 * x20 + x58
    x118 = x117 * x2 + x5 * x97
    x119 = x100 * x118
    x120 = x10 * (2.0 * ax * x118 - x117) + x102 * x5 + x2 * (3.0 * x19 + 3.0 * x24 + x27)
    x121 = x107 * x81
    x122 = x100 * x2
    x123 = x122 * x90
    x124 = x100 * x107**2
    x125 = x122 + x124
    x126 = -x100
    x127 = x107 * x109 + x49 * (x1 * x125 + x126)
    x128 = x123 + x127
    x129 = x118 * x94
    x130 = x83 * x94
    x131 = x130 * x85
    x132 = x130 * x17 + x131
    x133 = x75 * x81
    x134 = x74 * x81
    x135 = 26.98476936677017 * x91
    x136 = x83 * x96
    x137 = x130 * x93
    x138 = x110 + x137
    x139 = x111 + x136 + x138 * x17
    x140 = x100 * x63
    x141 = 46.73899157377418 * x91
    x142 = x2 * (x130 + x95)
    x143 = x138 * x93
    x144 = x142 + x143
    x145 = x100 * x144
    x146 = x2 * (x132 + x96)
    x147 = x139 * x93
    x148 = x1 * x144 - x130
    x149 = x146 + x147 + x148 * x49
    x150 = x100 * x88
    x151 = x150 * x90
    x152 = x150 * x17 + x151
    x153 = x81 * x88
    x154 = x109 * x88
    x155 = x107 * x150
    x156 = x122 + x155
    x157 = x123 + x154 + x156 * x17
    x158 = x63 * x94
    x159 = x2 * (x108 + x150)
    x160 = x107 * x156
    x161 = x159 + x160
    x162 = x161 * x94
    x163 = x2 * (x109 + x152)
    x164 = x107 * x157
    x165 = x1 * x161 - x150
    x166 = x163 + x164 + x165 * x49
    x167 = x132 * x83
    x168 = x84 * x94
    x169 = x110 + x168
    x170 = x10 * (x0 * x169 + x114)
    x171 = x167 + x170
    x172 = x111 + x171
    x173 = x100 * x69
    x174 = 34.83718745291631 * x91
    x175 = x139 * x83
    x176 = x138 * x83
    x177 = x142 + x176
    x178 = x0 * x177 - x95
    x179 = x10 * x178
    x180 = x146 + x175 + x179
    x181 = x100 * x42
    x182 = 60.33977866125205 * x91
    x183 = 3.0 * x110
    x184 = 2.0 * x137
    x185 = x183 + x184
    x186 = x2 * (x112 + x185)
    x187 = x144 * x83
    x188 = x186 + x187
    x189 = x100 * x188
    x190 = 3.0 * x111
    x191 = 2.0 * x136 + x138 * x34 + x190
    x192 = x2 * (x115 + x191)
    x193 = x149 * x83
    x194 = x10 * (2.0 * ax * x188 - x113)
    x195 = x192 + x193 + x194
    x196 = 60.33977866125206 * x91
    x197 = 104.5115623587489 * x91
    x198 = x152 * x88
    x199 = x100 * x89
    x200 = x122 + x199
    x201 = x10 * (x0 * x200 + x126)
    x202 = x198 + x201
    x203 = x123 + x202
    x204 = x69 * x94
    x205 = x157 * x88
    x206 = x156 * x88
    x207 = x159 + x206
    x208 = x0 * x207 - x108
    x209 = x10 * x208
    x210 = x163 + x205 + x209
    x211 = x42 * x94
    x212 = 3.0 * x122
    x213 = 2.0 * x155
    x214 = x212 + x213
    x215 = x2 * (x124 + x214)
    x216 = x161 * x88
    x217 = x215 + x216
    x218 = x217 * x94
    x219 = 3.0 * x123
    x220 = 2.0 * x154 + x156 * x34 + x219
    x221 = x2 * (x127 + x220)
    x222 = x166 * x88
    x223 = x10 * (2.0 * ax * x217 - x125)
    x224 = x221 + x222 + x223
    x225 = 2.0 * x110
    x226 = x83 * (x169 + x225)
    x227 = x10 * (x0 * x226 - 2.0 * x130) + x172 * x83 + x2 * (x130 * x34 + 2.0 * x131)
    x228 = x100 * x54
    x229 = x2 * (x168 + x185)
    x230 = x177 * x83
    x231 = x229 + x230
    x232 = x100 * x231
    x233 = x2 * (x171 + x191)
    x234 = x180 * x83
    x235 = 2.0 * ax * x231 - x184 - x225
    x236 = x10 * x235 + x233 + x234
    x237 = 2.0 * x143
    x238 = x188 * x83 + x2 * (4.0 * x142 + 2.0 * x176 + x237)
    x239 = (
        -x10 * (-2.0 * ax * x238 + 2.0 * x142 + x237)
        + x195 * x83
        + x2 * (4.0 * x146 + 2.0 * x147 + x148 * x71 + 2.0 * x175 + x178 * x66)
    )
    x240 = x12 * x80
    x241 = x239 * x240
    x242 = x240 * x5
    x243 = 3.141592653589793 * x12 * x3 * x78
    x244 = x243 * x5
    x245 = 2.0 * x122
    x246 = x88 * (x200 + x245)
    x247 = x10 * (x0 * x246 - 2.0 * x150) + x2 * (x150 * x34 + 2.0 * x151) + x203 * x88
    x248 = x54 * x94
    x249 = x2 * (x199 + x214)
    x250 = x207 * x88
    x251 = x249 + x250
    x252 = x251 * x94
    x253 = x2 * (x202 + x220)
    x254 = x210 * x88
    x255 = 2.0 * ax * x251 - x213 - x245
    x256 = x10 * x255 + x253 + x254
    x257 = 2.0 * x160
    x258 = x2 * (4.0 * x159 + 2.0 * x206 + x257) + x217 * x88
    x259 = (
        -x10 * (-2.0 * ax * x258 + 2.0 * x159 + x257)
        + x2 * (4.0 * x163 + 2.0 * x164 + x165 * x71 + 2.0 * x205 + x208 * x66)
        + x224 * x88
    )
    x260 = x243 * x259
    x261 = x26 + x50
    x262 = 3.0 * x168 + x183
    x263 = x2 * x262 + x226 * x83
    x264 = x100 * x263
    x265 = (
        x10 * (2.0 * ax * x263 - x262)
        + x2 * (3.0 * x167 + 3.0 * x170 + x190)
        + x227 * x83
    )
    x266 = 3.0 * x142 + 3.0 * x176
    x267 = x2 * (x226 + x266) + x231 * x83
    x268 = x240 * (
        x10 * (2.0 * ax * x267 - x266)
        + x2 * (3.0 * x146 + 3.0 * x175 + 3.0 * x179 + x227)
        + x236 * x83
    )
    x269 = x240 * x28
    x270 = 3.0 * x186 + 3.0 * x187
    x271 = x2 * (2.0 * x229 + 2.0 * x230 + x270) + x238 * x83
    x272 = x240 * x271
    x273 = x240 * x9
    x274 = x14 * x263
    x275 = x14 * x231
    x276 = x14 * x161
    x277 = x14 * x188
    x278 = x14 * x177
    x279 = x14 * x217
    x280 = x243 * x83
    x281 = x14 * x144
    x282 = x14 * x251
    x283 = 3.0 * x199 + x212
    x284 = x2 * x283 + x246 * x88
    x285 = x284 * x94
    x286 = (
        x10 * (2.0 * ax * x284 - x283)
        + x2 * (3.0 * x198 + 3.0 * x201 + x219)
        + x247 * x88
    )
    x287 = x243 * x28
    x288 = 3.0 * x159 + 3.0 * x206
    x289 = x2 * (x246 + x288) + x251 * x88
    x290 = x243 * (
        x10 * (2.0 * ax * x289 - x288)
        + x2 * (3.0 * x163 + 3.0 * x205 + 3.0 * x209 + x247)
        + x256 * x88
    )
    x291 = x14 * x284
    x292 = 3.0 * x215 + 3.0 * x216
    x293 = x2 * (2.0 * x249 + 2.0 * x250 + x292) + x258 * x88
    x294 = x243 * x293

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x92
        * (
            x81
            * (
                x10 * (2.0 * ax * x77 - x76)
                + x2
                * (2.0 * x36 + 2.0 * x46 + 3.0 * x51 + 3.0 * x57 + x65 * x66 + 3.0 * x70)
                + x5 * x75
            )
            + x85 * x86
            + x86 * x90
        )
    )
    result[0, 1] = numpy.sum(x106 * (x100 * x96 * x99 + x104 * x93 + x105 * x90 * x93))
    result[0, 2] = numpy.sum(x106 * (x104 * x107 + x105 * x107 * x85 + x109 * x94 * x99))
    result[0, 3] = numpy.sum(x92 * (x100 * x113 * x120 + x113 * x119 * x90 + x116 * x119))
    result[0, 4] = numpy.sum(
        x106 * (x108 * x118 * x96 + x109 * x118 * x95 + x120 * x121 * x93)
    )
    result[0, 5] = numpy.sum(x92 * (x120 * x125 * x94 + x125 * x129 * x85 + x128 * x129))
    result[1, 0] = numpy.sum(x135 * (x100 * x132 * x74 + x133 * x83 + x134 * x83 * x90))
    result[1, 1] = numpy.sum(
        x141 * (x100 * x103 * x138 + x138 * x140 * x90 + x139 * x140)
    )
    result[1, 2] = numpy.sum(
        x141 * (x103 * x121 * x83 + x108 * x132 * x63 + x109 * x130 * x63)
    )
    result[1, 3] = numpy.sum(x135 * (x100 * x149 * x97 + x102 * x145 + x145 * x90 * x97))
    result[1, 4] = numpy.sum(
        x141 * (x102 * x108 * x138 + x108 * x139 * x97 + x109 * x138 * x97)
    )
    result[1, 5] = numpy.sum(
        x135 * (x102 * x125 * x130 + x125 * x132 * x97 + x128 * x130 * x97)
    )
    result[2, 0] = numpy.sum(x135 * (x133 * x88 + x134 * x85 * x88 + x152 * x74 * x94))
    result[2, 1] = numpy.sum(
        x141 * (x103 * x153 * x93 + x150 * x63 * x96 + x152 * x63 * x95)
    )
    result[2, 2] = numpy.sum(x141 * (x103 * x156 * x94 + x156 * x158 * x85 + x157 * x158))
    result[2, 3] = numpy.sum(
        x135 * (x102 * x113 * x150 + x113 * x152 * x97 + x116 * x150 * x97)
    )
    result[2, 4] = numpy.sum(
        x141 * (x102 * x156 * x95 + x156 * x96 * x97 + x157 * x95 * x97)
    )
    result[2, 5] = numpy.sum(x135 * (x102 * x162 + x162 * x85 * x97 + x166 * x94 * x97))
    result[3, 0] = numpy.sum(x174 * (x100 * x169 * x72 + x169 * x173 * x90 + x172 * x173))
    result[3, 1] = numpy.sum(x182 * (x100 * x177 * x45 + x177 * x181 * x90 + x180 * x181))
    result[3, 2] = numpy.sum(
        x182 * (x108 * x169 * x45 + x108 * x172 * x42 + x109 * x169 * x42)
    )
    result[3, 3] = numpy.sum(x174 * (x100 * x195 * x22 + x101 * x189 + x189 * x22 * x90))
    result[3, 4] = numpy.sum(
        x182 * (x101 * x108 * x177 + x108 * x180 * x22 + x109 * x177 * x22)
    )
    result[3, 5] = numpy.sum(
        x174 * (x101 * x125 * x169 + x125 * x172 * x22 + x128 * x169 * x22)
    )
    result[4, 0] = numpy.sum(
        x196 * (x130 * x152 * x69 + x132 * x150 * x69 + x153 * x72 * x83)
    )
    result[4, 1] = numpy.sum(
        x197 * (x138 * x150 * x45 + x138 * x152 * x42 + x139 * x150 * x42)
    )
    result[4, 2] = numpy.sum(
        x197 * (x130 * x156 * x45 + x130 * x157 * x42 + x132 * x156 * x42)
    )
    result[4, 3] = numpy.sum(
        x196 * (x101 * x144 * x150 + x144 * x152 * x22 + x149 * x150 * x22)
    )
    result[4, 4] = numpy.sum(
        x197 * (x101 * x138 * x156 + x138 * x157 * x22 + x139 * x156 * x22)
    )
    result[4, 5] = numpy.sum(
        x196 * (x101 * x130 * x161 + x130 * x166 * x22 + x132 * x161 * x22)
    )
    result[5, 0] = numpy.sum(x174 * (x200 * x204 * x85 + x200 * x72 * x94 + x203 * x204))
    result[5, 1] = numpy.sum(
        x182 * (x200 * x42 * x96 + x200 * x45 * x95 + x203 * x42 * x95)
    )
    result[5, 2] = numpy.sum(x182 * (x207 * x211 * x85 + x207 * x45 * x94 + x210 * x211))
    result[5, 3] = numpy.sum(
        x174 * (x101 * x113 * x200 + x113 * x203 * x22 + x116 * x200 * x22)
    )
    result[5, 4] = numpy.sum(
        x182 * (x101 * x207 * x95 + x207 * x22 * x96 + x210 * x22 * x95)
    )
    result[5, 5] = numpy.sum(x174 * (x101 * x218 + x218 * x22 * x85 + x22 * x224 * x94))
    result[6, 0] = numpy.sum(x135 * (x100 * x226 * x56 + x226 * x228 * x90 + x227 * x228))
    result[6, 1] = numpy.sum(x141 * (x100 * x236 * x33 + x232 * x33 * x90 + x232 * x38))
    result[6, 2] = numpy.sum(
        x141 * (x108 * x226 * x38 + x108 * x227 * x33 + x109 * x226 * x33)
    )
    result[6, 3] = numpy.sum(x135 * (x100 * x18 * x238 + x238 * x242 * x90 + x241 * x5))
    result[6, 4] = numpy.sum(
        x141 * (x107 * x236 * x242 + x108 * x18 * x231 + x109 * x15 * x231)
    )
    result[6, 5] = numpy.sum(
        x135 * (x125 * x15 * x227 + x125 * x18 * x226 + x128 * x15 * x226)
    )
    result[7, 0] = numpy.sum(
        x196 * (x150 * x169 * x56 + x150 * x172 * x54 + x152 * x169 * x54)
    )
    result[7, 1] = numpy.sum(
        x197 * (x150 * x177 * x38 + x150 * x180 * x33 + x152 * x177 * x33)
    )
    result[7, 2] = numpy.sum(
        x197 * (x156 * x169 * x38 + x156 * x172 * x33 + x157 * x169 * x33)
    )
    result[7, 3] = numpy.sum(
        x196 * (x15 * x152 * x188 + x150 * x18 * x188 + x195 * x242 * x88)
    )
    result[7, 4] = numpy.sum(
        x197 * (x15 * x156 * x180 + x15 * x157 * x177 + x156 * x177 * x18)
    )
    result[7, 5] = numpy.sum(
        x196 * (x15 * x161 * x172 + x15 * x166 * x169 + x161 * x169 * x18)
    )
    result[8, 0] = numpy.sum(
        x196 * (x130 * x200 * x56 + x130 * x203 * x54 + x132 * x200 * x54)
    )
    result[8, 1] = numpy.sum(
        x197 * (x138 * x200 * x38 + x138 * x203 * x33 + x139 * x200 * x33)
    )
    result[8, 2] = numpy.sum(
        x197 * (x130 * x207 * x38 + x130 * x210 * x33 + x132 * x207 * x33)
    )
    result[8, 3] = numpy.sum(
        x196 * (x144 * x15 * x203 + x144 * x18 * x200 + x149 * x15 * x200)
    )
    result[8, 4] = numpy.sum(
        x197 * (x138 * x15 * x210 + x138 * x18 * x207 + x139 * x15 * x207)
    )
    result[8, 5] = numpy.sum(
        x196 * (x130 * x18 * x217 + x132 * x15 * x217 + x224 * x244 * x83)
    )
    result[9, 0] = numpy.sum(x135 * (x246 * x248 * x85 + x246 * x56 * x94 + x247 * x248))
    result[9, 1] = numpy.sum(
        x141 * (x246 * x33 * x96 + x246 * x38 * x95 + x247 * x33 * x95)
    )
    result[9, 2] = numpy.sum(x141 * (x252 * x33 * x85 + x252 * x38 + x256 * x33 * x94))
    result[9, 3] = numpy.sum(
        x135 * (x113 * x15 * x247 + x113 * x18 * x246 + x116 * x15 * x246)
    )
    result[9, 4] = numpy.sum(
        x141 * (x15 * x251 * x96 + x18 * x251 * x95 + x244 * x256 * x93)
    )
    result[9, 5] = numpy.sum(x135 * (x18 * x258 * x94 + x244 * x258 * x85 + x260 * x5))
    result[10, 0] = numpy.sum(x92 * (x100 * x265 * x48 + x261 * x264 + x264 * x48 * x90))
    result[10, 1] = numpy.sum(x106 * (x100 * x267 * x30 + x267 * x269 * x90 + x268 * x28))
    result[10, 2] = numpy.sum(
        x106 * (x107 * x265 * x269 + x108 * x263 * x30 + x109 * x263 * x29)
    )
    result[10, 3] = numpy.sum(
        x92
        * (
            x240
            * (
                x10 * (2.0 * ax * x271 - x270)
                + x2
                * (
                    3.0 * x192
                    + 3.0 * x193
                    + 3.0 * x194
                    + 2.0 * x233
                    + 2.0 * x234
                    + x235 * x66
                )
                + x239 * x83
            )
            + x272 * x9
            + x272 * x90
        )
    )
    result[10, 4] = numpy.sum(
        x106 * (x107 * x267 * x273 + x107 * x268 + x109 * x14 * x267)
    )
    result[10, 5] = numpy.sum(x92 * (x125 * x14 * x265 + x125 * x274 * x9 + x128 * x274))
    result[11, 0] = numpy.sum(
        x135 * (x150 * x226 * x261 + x150 * x227 * x48 + x152 * x226 * x48)
    )
    result[11, 1] = numpy.sum(
        x141 * (x150 * x231 * x30 + x152 * x231 * x29 + x236 * x269 * x88)
    )
    result[11, 2] = numpy.sum(
        x141 * (x156 * x226 * x30 + x156 * x227 * x29 + x157 * x226 * x29)
    )
    result[11, 3] = numpy.sum(x135 * (x14 * x152 * x238 + x238 * x273 * x88 + x241 * x88))
    result[11, 4] = numpy.sum(x141 * (x14 * x156 * x236 + x156 * x275 * x9 + x157 * x275))
    result[11, 5] = numpy.sum(x135 * (x14 * x166 * x226 + x226 * x276 * x9 + x227 * x276))
    result[12, 0] = numpy.sum(
        x174 * (x169 * x200 * x261 + x169 * x203 * x48 + x172 * x200 * x48)
    )
    result[12, 1] = numpy.sum(
        x182 * (x177 * x200 * x30 + x177 * x203 * x29 + x180 * x200 * x29)
    )
    result[12, 2] = numpy.sum(
        x182 * (x169 * x207 * x30 + x169 * x210 * x29 + x172 * x207 * x29)
    )
    result[12, 3] = numpy.sum(x174 * (x14 * x195 * x200 + x200 * x277 * x9 + x203 * x277))
    result[12, 4] = numpy.sum(x182 * (x14 * x180 * x207 + x207 * x278 * x9 + x210 * x278))
    result[12, 5] = numpy.sum(x174 * (x14 * x169 * x224 + x169 * x279 * x9 + x172 * x279))
    result[13, 0] = numpy.sum(
        x135 * (x130 * x246 * x261 + x130 * x247 * x48 + x132 * x246 * x48)
    )
    result[13, 1] = numpy.sum(
        x141 * (x138 * x246 * x30 + x138 * x247 * x29 + x139 * x246 * x29)
    )
    result[13, 2] = numpy.sum(
        x141 * (x130 * x251 * x30 + x132 * x251 * x29 + x256 * x28 * x280)
    )
    result[13, 3] = numpy.sum(x135 * (x14 * x149 * x246 + x246 * x281 * x9 + x247 * x281))
    result[13, 4] = numpy.sum(x141 * (x138 * x14 * x256 + x138 * x282 * x9 + x139 * x282))
    result[13, 5] = numpy.sum(x135 * (x132 * x14 * x258 + x258 * x280 * x9 + x260 * x83))
    result[14, 0] = numpy.sum(x92 * (x261 * x285 + x285 * x48 * x85 + x286 * x48 * x94))
    result[14, 1] = numpy.sum(
        x106 * (x284 * x29 * x96 + x284 * x30 * x95 + x286 * x287 * x93)
    )
    result[14, 2] = numpy.sum(x106 * (x28 * x290 + x287 * x289 * x85 + x289 * x30 * x94))
    result[14, 3] = numpy.sum(x92 * (x113 * x14 * x286 + x113 * x291 * x9 + x116 * x291))
    result[14, 4] = numpy.sum(
        x106 * (x14 * x289 * x96 + x243 * x289 * x9 * x93 + x290 * x93)
    )
    result[14, 5] = numpy.sum(
        x92
        * (
            x243
            * (
                x10 * (2.0 * ax * x293 - x292)
                + x2
                * (
                    3.0 * x221
                    + 3.0 * x222
                    + 3.0 * x223
                    + 2.0 * x253
                    + 2.0 * x254
                    + x255 * x66
                )
                + x259 * x88
            )
            + x294 * x85
            + x294 * x9
        )
    )
    return result


def kinetic3d_43(ax, da, A, bx, db, B):
    """Cartesian 3D (gf) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 10), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = -x4 - B[0]
    x7 = -ax
    x8 = x5**2
    x9 = 2.0 * ax**2
    x10 = -x7 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x6
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x15 * x6**2
    x22 = x15 * x2
    x23 = x21 + x22
    x24 = -x15
    x25 = x11 * (x1 * x23 + x24) + x20 * x6
    x26 = x10 * x22
    x27 = 3.0 * x26
    x28 = x20 * x5
    x29 = x15 * x5
    x30 = x29 * x6
    x31 = x22 + x30
    x32 = 4.0 * x12
    x33 = x27 + 2.0 * x28 + x31 * x32
    x34 = x2 * (x25 + x33)
    x35 = x10 * x29
    x36 = x19 * x29 + x35
    x37 = x2 * (x20 + x36)
    x38 = x19 * x31 + x26 + x28
    x39 = x38 * x6
    x40 = x2 * (x16 + x29)
    x41 = x31 * x6
    x42 = x40 + x41
    x43 = x1 * x42 - x29
    x44 = x11 * x43 + x37 + x39
    x45 = x44 * x5
    x46 = 3.0 * x22
    x47 = 2.0 * x30
    x48 = x46 + x47
    x49 = x2 * (x21 + x48)
    x50 = x42 * x5
    x51 = x49 + x50
    x52 = x18 * (2.0 * ax * x51 - x23)
    x53 = x34 + x45 + x52
    x54 = x5 * x53
    x55 = x53 * x6
    x56 = x38 * x5
    x57 = x0 * x3
    x58 = x31 * x5
    x59 = x40 + x58
    x60 = x0 * x59 - x16
    x61 = x1 * x3
    x62 = x2 * (4.0 * x37 + 2.0 * x39 + x43 * x57 + 2.0 * x56 + x60 * x61)
    x63 = 2.0 * x58
    x64 = 2.0 * x41
    x65 = x2 * (4.0 * x40 + x63 + x64)
    x66 = x51 * x6
    x67 = x65 + x66
    x68 = 2.0 * x40
    x69 = x11 * (2.0 * bx * x67 - x63 - x68)
    x70 = x5 * x51
    x71 = x65 + x70
    x72 = x18 * (2.0 * ax * x71 - x64 - x68)
    x73 = x44 * x6
    x74 = x42 * x6
    x75 = x49 + x74
    x76 = 2.0 * x22
    x77 = x47 + x76
    x78 = 2.0 * bx * x75 - x77
    x79 = 3.0 * x45 + 3.0 * x52
    x80 = x55 + x62 + x69
    x81 = 2.0 * x74
    x82 = 3.0 * x50
    x83 = x2 * (5.0 * x49 + x81 + x82) + x5 * x67
    x84 = (
        -x18 * (-2.0 * ax * x83 + 2.0 * x49 + x81)
        + x2 * (5.0 * x34 + x57 * x78 + 2.0 * x73 + x79)
        + x5 * x80
    )
    x85 = 3.0 * x66
    x86 = x2 * (6.0 * x65 + 3.0 * x70 + x85) + x5 * x83
    x87 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x88 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x89 = 3.141592653589793 * x3 * x88
    x90 = x87 * x89
    x91 = -x3 * (ax * A[1] + bx * B[1])
    x92 = -x91 - A[1]
    x93 = x92**2
    x94 = -x7 - x9 * (x2 + x93)
    x95 = x86 * x90
    x96 = -x3 * (ax * A[2] + bx * B[2])
    x97 = -x96 - A[2]
    x98 = x97**2
    x99 = -x7 - x9 * (x2 + x98)
    x100 = 0.1795871221251666 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**4.5)
    x101 = 9.122517057277419 * x100
    x102 = -x91 - B[1]
    x103 = x14 * x87
    x104 = x102 * x103
    x105 = x104 * x94
    x106 = x104 * x19 + x105
    x107 = x15 * x8
    x108 = x2 * (x107 + x48)
    x109 = x5 * x59
    x110 = 3.0 * x49 + x82
    x111 = x2 * (2.0 * x108 + 2.0 * x109 + x110) + x5 * x71
    x112 = x14 * x88
    x113 = x36 * x5
    x114 = x107 + x22
    x115 = x18 * (x0 * x114 + x24)
    x116 = x113 + x115
    x117 = x2 * (x116 + x33)
    x118 = x18 * x60
    x119 = x118 + x37 + x56
    x120 = x119 * x5
    x121 = x108 + x109
    x122 = 2.0 * ax * x121 - x77
    x123 = x54 + x62 + x72
    x124 = x90 * (
        x123 * x5
        + x18 * (2.0 * ax * x111 - x110)
        + x2 * (2.0 * x117 + 2.0 * x120 + x122 * x61 + 3.0 * x34 + x79)
    )
    x125 = x111 * x90
    x126 = 20.39856826597365 * x100
    x127 = -x96 - B[2]
    x128 = x112 * x127
    x129 = x128 * x99
    x130 = x128 * x19 + x129
    x131 = x103 * x2
    x132 = x131 * x94
    x133 = x102**2 * x103
    x134 = x131 + x133
    x135 = -x103
    x136 = x102 * x106 + x11 * (x1 * x134 + x135)
    x137 = x132 + x136
    x138 = x5 * (x114 + x76)
    x139 = 3.0 * x40 + 3.0 * x58
    x140 = x121 * x5 + x2 * (x138 + x139)
    x141 = x112 * x140
    x142 = x116 + x26
    x143 = x142 * x5 + x18 * (x0 * x138 - 2.0 * x29) + x2 * (x29 * x32 + 2.0 * x35)
    x144 = x117 + x120 + x122 * x18
    x145 = (
        x144 * x5
        + x18 * (2.0 * ax * x140 - x139)
        + x2 * (3.0 * x118 + x143 + 3.0 * x37 + 3.0 * x56)
    )
    x146 = x127 * x90
    x147 = 35.33135663832854 * x100
    x148 = x112 * x2
    x149 = x148 * x99
    x150 = x112 * x127**2
    x151 = x148 + x150
    x152 = -x112
    x153 = x11 * (x1 * x151 + x152) + x127 * x130
    x154 = x149 + x153
    x155 = x103 * x140
    x156 = 2.0 * x131
    x157 = x102 * (x134 + x156)
    x158 = x102 * x137 + x11 * (x1 * x157 - 2.0 * x104) + x2 * (x104 * x32 + 2.0 * x105)
    x159 = 3.0 * x107 + x46
    x160 = x138 * x5 + x159 * x2
    x161 = x112 * x160
    x162 = (
        x143 * x5 + x18 * (2.0 * ax * x160 - x159) + x2 * (3.0 * x113 + 3.0 * x115 + x27)
    )
    x163 = 2.0 * x148
    x164 = x127 * (x151 + x163)
    x165 = x11 * (x1 * x164 - 2.0 * x128) + x127 * x154 + x2 * (x128 * x32 + 2.0 * x129)
    x166 = x103 * x160
    x167 = x103 * x92
    x168 = x167 * x94
    x169 = x167 * x19 + x168
    x170 = x84 * x90
    x171 = x83 * x90
    x172 = 24.13591146450082 * x100
    x173 = x106 * x92
    x174 = x102 * x167
    x175 = x131 + x174
    x176 = x132 + x173 + x175 * x19
    x177 = x112 * x71
    x178 = 53.96953873354034 * x100
    x179 = x2 * (x104 + x167)
    x180 = x102 * x175
    x181 = x179 + x180
    x182 = x112 * x181
    x183 = x2 * (x106 + x169)
    x184 = x102 * x176
    x185 = x1 * x181 - x167
    x186 = x11 * x185 + x183 + x184
    x187 = 93.47798314754836 * x100
    x188 = 3.0 * x131
    x189 = 2.0 * x174
    x190 = x188 + x189
    x191 = x2 * (x133 + x190)
    x192 = x102 * x181
    x193 = x191 + x192
    x194 = x112 * x193
    x195 = 3.0 * x132
    x196 = 2.0 * x173 + x175 * x32 + x195
    x197 = x2 * (x136 + x196)
    x198 = x102 * x186
    x199 = x156 + x189
    x200 = 2.0 * bx * x193 - x199
    x201 = x11 * x200 + x197 + x198
    x202 = x112 * x97
    x203 = x202 * x99
    x204 = x19 * x202 + x203
    x205 = x90 * x97
    x206 = x130 * x97
    x207 = x127 * x202
    x208 = x148 + x207
    x209 = x149 + x19 * x208 + x206
    x210 = x103 * x71
    x211 = x2 * (x128 + x202)
    x212 = x127 * x208
    x213 = x211 + x212
    x214 = x103 * x213
    x215 = x2 * (x130 + x204)
    x216 = x127 * x209
    x217 = x1 * x213 - x202
    x218 = x11 * x217 + x215 + x216
    x219 = 3.0 * x148
    x220 = 2.0 * x207
    x221 = x219 + x220
    x222 = x2 * (x150 + x221)
    x223 = x127 * x213
    x224 = x222 + x223
    x225 = x103 * x224
    x226 = 3.0 * x149
    x227 = 2.0 * x206 + x208 * x32 + x226
    x228 = x2 * (x153 + x227)
    x229 = x127 * x218
    x230 = x163 + x220
    x231 = 2.0 * bx * x224 - x230
    x232 = x11 * x231 + x228 + x229
    x233 = x169 * x92
    x234 = x103 * x93
    x235 = x131 + x234
    x236 = x18 * (x0 * x235 + x135)
    x237 = x233 + x236
    x238 = x132 + x237
    x239 = x112 * x67
    x240 = 31.15932771584945 * x100
    x241 = x175 * x92
    x242 = x179 + x241
    x243 = x112 * x242
    x244 = x176 * x92
    x245 = x0 * x242 - x104
    x246 = x18 * x245
    x247 = x183 + x244 + x246
    x248 = 69.67437490583262 * x100
    x249 = x186 * x92
    x250 = x181 * x92
    x251 = x191 + x250
    x252 = x18 * (2.0 * ax * x251 - x134)
    x253 = x197 + x249 + x252
    x254 = x112 * x59
    x255 = 120.6795573225041 * x100
    x256 = 2.0 * x241
    x257 = 2.0 * x180
    x258 = x2 * (4.0 * x179 + x256 + x257)
    x259 = x102 * x251
    x260 = x258 + x259
    x261 = x112 * x260
    x262 = x2 * (4.0 * x183 + 2.0 * x184 + x185 * x57 + 2.0 * x244 + x245 * x61)
    x263 = x102 * x253
    x264 = 2.0 * x179
    x265 = x11 * (2.0 * bx * x260 - x256 - x264)
    x266 = x262 + x263 + x265
    x267 = 120.6795573225041 * x100
    x268 = 209.0231247174979 * x100
    x269 = x204 * x97
    x270 = x112 * x98
    x271 = x148 + x270
    x272 = x18 * (x0 * x271 + x152)
    x273 = x269 + x272
    x274 = x149 + x273
    x275 = x103 * x67
    x276 = x208 * x97
    x277 = x211 + x276
    x278 = x103 * x277
    x279 = x209 * x97
    x280 = x0 * x277 - x128
    x281 = x18 * x280
    x282 = x215 + x279 + x281
    x283 = x218 * x97
    x284 = x213 * x97
    x285 = x222 + x284
    x286 = x18 * (2.0 * ax * x285 - x151)
    x287 = x228 + x283 + x286
    x288 = x103 * x59
    x289 = 2.0 * x276
    x290 = 2.0 * x212
    x291 = x2 * (4.0 * x211 + x289 + x290)
    x292 = x127 * x285
    x293 = x291 + x292
    x294 = x103 * x293
    x295 = x2 * (4.0 * x215 + 2.0 * x216 + x217 * x57 + 2.0 * x279 + x280 * x61)
    x296 = x127 * x287
    x297 = 2.0 * x211
    x298 = x11 * (2.0 * bx * x293 - x289 - x297)
    x299 = x295 + x296 + x298
    x300 = x92 * (x156 + x235)
    x301 = x18 * (x0 * x300 - 2.0 * x167) + x2 * (x167 * x32 + 2.0 * x168) + x238 * x92
    x302 = x112 * x75
    x303 = x11 * x78 + x34 + x73
    x304 = x2 * (x196 + x237)
    x305 = x247 * x92
    x306 = x2 * (x190 + x234)
    x307 = x242 * x92
    x308 = x306 + x307
    x309 = 2.0 * ax * x308 - x199
    x310 = x18 * x309 + x304 + x305
    x311 = x112 * x42
    x312 = x251 * x92
    x313 = x258 + x312
    x314 = x112 * x313
    x315 = x253 * x92
    x316 = x18 * (2.0 * ax * x313 - x257 - x264)
    x317 = x262 + x315 + x316
    x318 = 2.0 * x192
    x319 = 3.0 * x250
    x320 = x2 * (5.0 * x191 + x318 + x319) + x260 * x92
    x321 = 3.0 * x249 + 3.0 * x252
    x322 = (
        -x18 * (-2.0 * ax * x320 + 2.0 * x191 + x318)
        + x2 * (5.0 * x197 + 2.0 * x198 + x200 * x57 + x321)
        + x266 * x92
    )
    x323 = x13 * x89
    x324 = x322 * x323
    x325 = x323 * x5
    x326 = 3.141592653589793 * x13 * x3 * x87
    x327 = x326 * x5
    x328 = x97 * (x163 + x271)
    x329 = x18 * (x0 * x328 - 2.0 * x202) + x2 * (x202 * x32 + 2.0 * x203) + x274 * x97
    x330 = x103 * x75
    x331 = x2 * (x227 + x273)
    x332 = x282 * x97
    x333 = x2 * (x221 + x270)
    x334 = x277 * x97
    x335 = x333 + x334
    x336 = 2.0 * ax * x335 - x230
    x337 = x18 * x336 + x331 + x332
    x338 = x103 * x42
    x339 = x285 * x97
    x340 = x291 + x339
    x341 = x103 * x340
    x342 = x287 * x97
    x343 = x18 * (2.0 * ax * x340 - x290 - x297)
    x344 = x295 + x342 + x343
    x345 = 2.0 * x223
    x346 = 3.0 * x284
    x347 = x2 * (5.0 * x222 + x345 + x346) + x293 * x97
    x348 = 3.0 * x283 + 3.0 * x286
    x349 = (
        -x18 * (-2.0 * ax * x347 + 2.0 * x222 + x345)
        + x2 * (5.0 * x228 + 2.0 * x229 + x231 * x57 + x348)
        + x299 * x97
    )
    x350 = x326 * x349
    x351 = x25 + x26
    x352 = x6 * (x23 + x76)
    x353 = x11 * (x1 * x352 - 2.0 * x16) + x2 * (x16 * x32 + 2.0 * x17) + x351 * x6
    x354 = x188 + 3.0 * x234
    x355 = x2 * x354 + x300 * x92
    x356 = x112 * x355
    x357 = (
        x18 * (2.0 * ax * x355 - x354)
        + x2 * (x195 + 3.0 * x233 + 3.0 * x236)
        + x301 * x92
    )
    x358 = 3.0 * x179 + 3.0 * x241
    x359 = x2 * (x300 + x358) + x308 * x92
    x360 = x112 * x359
    x361 = (
        x18 * (2.0 * ax * x359 - x358)
        + x2 * (3.0 * x183 + 3.0 * x244 + 3.0 * x246 + x301)
        + x310 * x92
    )
    x362 = 3.0 * x191 + x319
    x363 = x2 * (2.0 * x306 + 2.0 * x307 + x362) + x313 * x92
    x364 = x323 * (
        x18 * (2.0 * ax * x363 - x362)
        + x2 * (3.0 * x197 + 2.0 * x304 + 2.0 * x305 + x309 * x61 + x321)
        + x317 * x92
    )
    x365 = x323 * x6
    x366 = 3.0 * x259
    x367 = x2 * (6.0 * x258 + 3.0 * x312 + x366) + x320 * x92
    x368 = x323 * x367
    x369 = x10 * x323
    x370 = x15 * x359
    x371 = x15 * x355
    x372 = x15 * x313
    x373 = x15 * x213
    x374 = x15 * x224
    x375 = x15 * x260
    x376 = x15 * x277
    x377 = x15 * x242
    x378 = x15 * x293
    x379 = x326 * x92
    x380 = x15 * x193
    x381 = x15 * x181
    x382 = x15 * x340
    x383 = x219 + 3.0 * x270
    x384 = x2 * x383 + x328 * x97
    x385 = x103 * x384
    x386 = (
        x18 * (2.0 * ax * x384 - x383)
        + x2 * (x226 + 3.0 * x269 + 3.0 * x272)
        + x329 * x97
    )
    x387 = 3.0 * x211 + 3.0 * x276
    x388 = x2 * (x328 + x387) + x335 * x97
    x389 = x103 * x388
    x390 = (
        x18 * (2.0 * ax * x388 - x387)
        + x2 * (3.0 * x215 + 3.0 * x279 + 3.0 * x281 + x329)
        + x337 * x97
    )
    x391 = x326 * x6
    x392 = 3.0 * x222 + x346
    x393 = x2 * (2.0 * x333 + 2.0 * x334 + x392) + x340 * x97
    x394 = x326 * (
        x18 * (2.0 * ax * x393 - x392)
        + x2 * (3.0 * x228 + 2.0 * x331 + 2.0 * x332 + x336 * x61 + x348)
        + x344 * x97
    )
    x395 = x15 * x384
    x396 = x15 * x388
    x397 = 3.0 * x292
    x398 = x2 * (6.0 * x291 + 3.0 * x339 + x397) + x347 * x97
    x399 = x326 * x398

    # 150 item(s)
    result[0, 0] = numpy.sum(
        x101
        * (
            x90
            * (
                -x18 * (-2.0 * ax * x86 + 3.0 * x65 + x85)
                + 3.0 * x2 * (x54 + x55 + 2.0 * x62 + x69 + x72)
                + x5 * x84
            )
            + x94 * x95
            + x95 * x99
        )
    )
    result[0, 1] = numpy.sum(
        x126 * (x102 * x124 + x102 * x125 * x99 + x106 * x111 * x112)
    )
    result[0, 2] = numpy.sum(
        x126 * (x103 * x111 * x130 + x124 * x127 + x125 * x127 * x94)
    )
    result[0, 3] = numpy.sum(
        x126 * (x112 * x134 * x145 + x134 * x141 * x99 + x137 * x141)
    )
    result[0, 4] = numpy.sum(
        x147 * (x102 * x145 * x146 + x104 * x130 * x140 + x106 * x128 * x140)
    )
    result[0, 5] = numpy.sum(
        x126 * (x103 * x145 * x151 + x151 * x155 * x94 + x154 * x155)
    )
    result[0, 6] = numpy.sum(
        x101 * (x112 * x157 * x162 + x157 * x161 * x99 + x158 * x161)
    )
    result[0, 7] = numpy.sum(
        x126 * (x128 * x134 * x162 + x128 * x137 * x160 + x130 * x134 * x160)
    )
    result[0, 8] = numpy.sum(
        x126 * (x104 * x151 * x162 + x104 * x154 * x160 + x106 * x151 * x160)
    )
    result[0, 9] = numpy.sum(
        x101 * (x103 * x162 * x164 + x164 * x166 * x94 + x165 * x166)
    )
    result[1, 0] = numpy.sum(x172 * (x112 * x169 * x83 + x170 * x92 + x171 * x92 * x99))
    result[1, 1] = numpy.sum(
        x178 * (x112 * x123 * x175 + x175 * x177 * x99 + x176 * x177)
    )
    result[1, 2] = numpy.sum(
        x178 * (x123 * x146 * x92 + x128 * x169 * x71 + x130 * x167 * x71)
    )
    result[1, 3] = numpy.sum(
        x178 * (x112 * x121 * x186 + x121 * x182 * x99 + x144 * x182)
    )
    result[1, 4] = numpy.sum(
        x187 * (x121 * x128 * x176 + x121 * x130 * x175 + x128 * x144 * x175)
    )
    result[1, 5] = numpy.sum(
        x178 * (x121 * x151 * x169 + x121 * x154 * x167 + x144 * x151 * x167)
    )
    result[1, 6] = numpy.sum(
        x172 * (x112 * x138 * x201 + x138 * x194 * x99 + x143 * x194)
    )
    result[1, 7] = numpy.sum(
        x178 * (x128 * x138 * x186 + x128 * x143 * x181 + x130 * x138 * x181)
    )
    result[1, 8] = numpy.sum(
        x178 * (x138 * x151 * x176 + x138 * x154 * x175 + x143 * x151 * x175)
    )
    result[1, 9] = numpy.sum(
        x172 * (x138 * x164 * x169 + x138 * x165 * x167 + x143 * x164 * x167)
    )
    result[2, 0] = numpy.sum(x172 * (x103 * x204 * x83 + x170 * x97 + x171 * x94 * x97))
    result[2, 1] = numpy.sum(
        x178 * (x102 * x123 * x205 + x104 * x204 * x71 + x106 * x202 * x71)
    )
    result[2, 2] = numpy.sum(
        x178 * (x103 * x123 * x208 + x208 * x210 * x94 + x209 * x210)
    )
    result[2, 3] = numpy.sum(
        x178 * (x121 * x134 * x204 + x121 * x137 * x202 + x134 * x144 * x202)
    )
    result[2, 4] = numpy.sum(
        x187 * (x104 * x121 * x209 + x104 * x144 * x208 + x106 * x121 * x208)
    )
    result[2, 5] = numpy.sum(
        x178 * (x103 * x121 * x218 + x121 * x214 * x94 + x144 * x214)
    )
    result[2, 6] = numpy.sum(
        x172 * (x138 * x157 * x204 + x138 * x158 * x202 + x143 * x157 * x202)
    )
    result[2, 7] = numpy.sum(
        x178 * (x134 * x138 * x209 + x134 * x143 * x208 + x137 * x138 * x208)
    )
    result[2, 8] = numpy.sum(
        x178 * (x104 * x138 * x218 + x104 * x143 * x213 + x106 * x138 * x213)
    )
    result[2, 9] = numpy.sum(
        x172 * (x103 * x138 * x232 + x138 * x225 * x94 + x143 * x225)
    )
    result[3, 0] = numpy.sum(x240 * (x112 * x235 * x80 + x235 * x239 * x99 + x238 * x239))
    result[3, 1] = numpy.sum(x248 * (x112 * x247 * x51 + x243 * x51 * x99 + x243 * x53))
    result[3, 2] = numpy.sum(
        x248 * (x128 * x235 * x53 + x128 * x238 * x51 + x130 * x235 * x51)
    )
    result[3, 3] = numpy.sum(
        x248 * (x112 * x119 * x251 + x251 * x254 * x99 + x253 * x254)
    )
    result[3, 4] = numpy.sum(
        x255 * (x119 * x128 * x242 + x128 * x247 * x59 + x130 * x242 * x59)
    )
    result[3, 5] = numpy.sum(
        x248 * (x119 * x151 * x235 + x151 * x238 * x59 + x154 * x235 * x59)
    )
    result[3, 6] = numpy.sum(
        x240 * (x112 * x114 * x266 + x114 * x261 * x99 + x142 * x261)
    )
    result[3, 7] = numpy.sum(
        x248 * (x114 * x128 * x253 + x114 * x130 * x251 + x128 * x142 * x251)
    )
    result[3, 8] = numpy.sum(
        x248 * (x114 * x151 * x247 + x114 * x154 * x242 + x142 * x151 * x242)
    )
    result[3, 9] = numpy.sum(
        x240 * (x114 * x164 * x238 + x114 * x165 * x235 + x142 * x164 * x235)
    )
    result[4, 0] = numpy.sum(
        x178 * (x167 * x204 * x67 + x169 * x202 * x67 + x205 * x80 * x92)
    )
    result[4, 1] = numpy.sum(
        x267 * (x175 * x202 * x53 + x175 * x204 * x51 + x176 * x202 * x51)
    )
    result[4, 2] = numpy.sum(
        x267 * (x167 * x208 * x53 + x167 * x209 * x51 + x169 * x208 * x51)
    )
    result[4, 3] = numpy.sum(
        x267 * (x119 * x181 * x202 + x181 * x204 * x59 + x186 * x202 * x59)
    )
    result[4, 4] = numpy.sum(
        x268 * (x119 * x175 * x208 + x175 * x209 * x59 + x176 * x208 * x59)
    )
    result[4, 5] = numpy.sum(
        x267 * (x119 * x167 * x213 + x167 * x218 * x59 + x169 * x213 * x59)
    )
    result[4, 6] = numpy.sum(
        x178 * (x114 * x193 * x204 + x114 * x201 * x202 + x142 * x193 * x202)
    )
    result[4, 7] = numpy.sum(
        x267 * (x114 * x181 * x209 + x114 * x186 * x208 + x142 * x181 * x208)
    )
    result[4, 8] = numpy.sum(
        x267 * (x114 * x175 * x218 + x114 * x176 * x213 + x142 * x175 * x213)
    )
    result[4, 9] = numpy.sum(
        x178 * (x114 * x167 * x232 + x114 * x169 * x224 + x142 * x167 * x224)
    )
    result[5, 0] = numpy.sum(x240 * (x103 * x271 * x80 + x271 * x275 * x94 + x274 * x275))
    result[5, 1] = numpy.sum(
        x248 * (x104 * x271 * x53 + x104 * x274 * x51 + x106 * x271 * x51)
    )
    result[5, 2] = numpy.sum(x248 * (x103 * x282 * x51 + x278 * x51 * x94 + x278 * x53))
    result[5, 3] = numpy.sum(
        x248 * (x119 * x134 * x271 + x134 * x274 * x59 + x137 * x271 * x59)
    )
    result[5, 4] = numpy.sum(
        x255 * (x104 * x119 * x277 + x104 * x282 * x59 + x106 * x277 * x59)
    )
    result[5, 5] = numpy.sum(
        x248 * (x103 * x119 * x285 + x285 * x288 * x94 + x287 * x288)
    )
    result[5, 6] = numpy.sum(
        x240 * (x114 * x157 * x274 + x114 * x158 * x271 + x142 * x157 * x271)
    )
    result[5, 7] = numpy.sum(
        x248 * (x114 * x134 * x282 + x114 * x137 * x277 + x134 * x142 * x277)
    )
    result[5, 8] = numpy.sum(
        x248 * (x104 * x114 * x287 + x104 * x142 * x285 + x106 * x114 * x285)
    )
    result[5, 9] = numpy.sum(
        x240 * (x103 * x114 * x299 + x114 * x294 * x94 + x142 * x294)
    )
    result[6, 0] = numpy.sum(
        x172 * (x112 * x300 * x303 + x300 * x302 * x99 + x301 * x302)
    )
    result[6, 1] = numpy.sum(x178 * (x112 * x308 * x44 + x308 * x311 * x99 + x310 * x311))
    result[6, 2] = numpy.sum(
        x178 * (x128 * x300 * x44 + x128 * x301 * x42 + x130 * x300 * x42)
    )
    result[6, 3] = numpy.sum(x178 * (x112 * x31 * x317 + x31 * x314 * x99 + x314 * x38))
    result[6, 4] = numpy.sum(
        x187 * (x128 * x308 * x38 + x128 * x31 * x310 + x130 * x308 * x31)
    )
    result[6, 5] = numpy.sum(
        x178 * (x151 * x300 * x38 + x151 * x301 * x31 + x154 * x300 * x31)
    )
    result[6, 6] = numpy.sum(x172 * (x112 * x320 * x36 + x320 * x325 * x99 + x324 * x5))
    result[6, 7] = numpy.sum(
        x178 * (x127 * x317 * x325 + x128 * x313 * x36 + x130 * x29 * x313)
    )
    result[6, 8] = numpy.sum(
        x178 * (x151 * x29 * x310 + x151 * x308 * x36 + x154 * x29 * x308)
    )
    result[6, 9] = numpy.sum(
        x172 * (x164 * x29 * x301 + x164 * x300 * x36 + x165 * x29 * x300)
    )
    result[7, 0] = numpy.sum(
        x178 * (x202 * x235 * x303 + x202 * x238 * x75 + x204 * x235 * x75)
    )
    result[7, 1] = numpy.sum(
        x267 * (x202 * x242 * x44 + x202 * x247 * x42 + x204 * x242 * x42)
    )
    result[7, 2] = numpy.sum(
        x267 * (x208 * x235 * x44 + x208 * x238 * x42 + x209 * x235 * x42)
    )
    result[7, 3] = numpy.sum(
        x267 * (x202 * x251 * x38 + x202 * x253 * x31 + x204 * x251 * x31)
    )
    result[7, 4] = numpy.sum(
        x268 * (x208 * x242 * x38 + x208 * x247 * x31 + x209 * x242 * x31)
    )
    result[7, 5] = numpy.sum(
        x267 * (x213 * x235 * x38 + x213 * x238 * x31 + x218 * x235 * x31)
    )
    result[7, 6] = numpy.sum(
        x178 * (x202 * x260 * x36 + x204 * x260 * x29 + x266 * x325 * x97)
    )
    result[7, 7] = numpy.sum(
        x267 * (x208 * x251 * x36 + x208 * x253 * x29 + x209 * x251 * x29)
    )
    result[7, 8] = numpy.sum(
        x267 * (x213 * x242 * x36 + x213 * x247 * x29 + x218 * x242 * x29)
    )
    result[7, 9] = numpy.sum(
        x178 * (x224 * x235 * x36 + x224 * x238 * x29 + x232 * x235 * x29)
    )
    result[8, 0] = numpy.sum(
        x178 * (x167 * x271 * x303 + x167 * x274 * x75 + x169 * x271 * x75)
    )
    result[8, 1] = numpy.sum(
        x267 * (x175 * x271 * x44 + x175 * x274 * x42 + x176 * x271 * x42)
    )
    result[8, 2] = numpy.sum(
        x267 * (x167 * x277 * x44 + x167 * x282 * x42 + x169 * x277 * x42)
    )
    result[8, 3] = numpy.sum(
        x267 * (x181 * x271 * x38 + x181 * x274 * x31 + x186 * x271 * x31)
    )
    result[8, 4] = numpy.sum(
        x268 * (x175 * x277 * x38 + x175 * x282 * x31 + x176 * x277 * x31)
    )
    result[8, 5] = numpy.sum(
        x267 * (x167 * x285 * x38 + x167 * x287 * x31 + x169 * x285 * x31)
    )
    result[8, 6] = numpy.sum(
        x178 * (x193 * x271 * x36 + x193 * x274 * x29 + x201 * x271 * x29)
    )
    result[8, 7] = numpy.sum(
        x267 * (x181 * x277 * x36 + x181 * x282 * x29 + x186 * x277 * x29)
    )
    result[8, 8] = numpy.sum(
        x267 * (x175 * x285 * x36 + x175 * x287 * x29 + x176 * x285 * x29)
    )
    result[8, 9] = numpy.sum(
        x178 * (x167 * x293 * x36 + x169 * x29 * x293 + x299 * x327 * x92)
    )
    result[9, 0] = numpy.sum(
        x172 * (x103 * x303 * x328 + x328 * x330 * x94 + x329 * x330)
    )
    result[9, 1] = numpy.sum(
        x178 * (x104 * x328 * x44 + x104 * x329 * x42 + x106 * x328 * x42)
    )
    result[9, 2] = numpy.sum(x178 * (x103 * x335 * x44 + x335 * x338 * x94 + x337 * x338))
    result[9, 3] = numpy.sum(
        x178 * (x134 * x31 * x329 + x134 * x328 * x38 + x137 * x31 * x328)
    )
    result[9, 4] = numpy.sum(
        x187 * (x104 * x31 * x337 + x104 * x335 * x38 + x106 * x31 * x335)
    )
    result[9, 5] = numpy.sum(x178 * (x103 * x31 * x344 + x31 * x341 * x94 + x341 * x38))
    result[9, 6] = numpy.sum(
        x172 * (x157 * x29 * x329 + x157 * x328 * x36 + x158 * x29 * x328)
    )
    result[9, 7] = numpy.sum(
        x178 * (x134 * x29 * x337 + x134 * x335 * x36 + x137 * x29 * x335)
    )
    result[9, 8] = numpy.sum(
        x178 * (x102 * x327 * x344 + x104 * x340 * x36 + x106 * x29 * x340)
    )
    result[9, 9] = numpy.sum(x172 * (x103 * x347 * x36 + x327 * x347 * x94 + x350 * x5))
    result[10, 0] = numpy.sum(
        x101 * (x112 * x352 * x357 + x352 * x356 * x99 + x353 * x356)
    )
    result[10, 1] = numpy.sum(x126 * (x112 * x23 * x361 + x23 * x360 * x99 + x351 * x360))
    result[10, 2] = numpy.sum(
        x126 * (x128 * x23 * x357 + x128 * x351 * x355 + x130 * x23 * x355)
    )
    result[10, 3] = numpy.sum(x126 * (x112 * x20 * x363 + x363 * x365 * x99 + x364 * x6))
    result[10, 4] = numpy.sum(
        x147 * (x127 * x361 * x365 + x128 * x20 * x359 + x130 * x16 * x359)
    )
    result[10, 5] = numpy.sum(
        x126 * (x151 * x16 * x357 + x151 * x20 * x355 + x154 * x16 * x355)
    )
    result[10, 6] = numpy.sum(
        x101
        * (
            x10 * x368
            + x323
            * (
                -x18 * (-2.0 * ax * x367 + 3.0 * x258 + x366)
                + 3.0 * x2 * (2.0 * x262 + x263 + x265 + x315 + x316)
                + x322 * x92
            )
            + x368 * x99
        )
    )
    result[10, 7] = numpy.sum(
        x126 * (x127 * x363 * x369 + x127 * x364 + x130 * x15 * x363)
    )
    result[10, 8] = numpy.sum(
        x126 * (x10 * x151 * x370 + x15 * x151 * x361 + x154 * x370)
    )
    result[10, 9] = numpy.sum(
        x101 * (x10 * x164 * x371 + x15 * x164 * x357 + x165 * x371)
    )
    result[11, 0] = numpy.sum(
        x172 * (x202 * x300 * x353 + x202 * x301 * x352 + x204 * x300 * x352)
    )
    result[11, 1] = numpy.sum(
        x178 * (x202 * x23 * x310 + x202 * x308 * x351 + x204 * x23 * x308)
    )
    result[11, 2] = numpy.sum(
        x178 * (x208 * x23 * x301 + x208 * x300 * x351 + x209 * x23 * x300)
    )
    result[11, 3] = numpy.sum(
        x178 * (x16 * x204 * x313 + x20 * x202 * x313 + x317 * x365 * x97)
    )
    result[11, 4] = numpy.sum(
        x187 * (x16 * x208 * x310 + x16 * x209 * x308 + x20 * x208 * x308)
    )
    result[11, 5] = numpy.sum(
        x178 * (x16 * x213 * x301 + x16 * x218 * x300 + x20 * x213 * x300)
    )
    result[11, 6] = numpy.sum(x172 * (x15 * x204 * x320 + x320 * x369 * x97 + x324 * x97))
    result[11, 7] = numpy.sum(
        x178 * (x10 * x208 * x372 + x15 * x208 * x317 + x209 * x372)
    )
    result[11, 8] = numpy.sum(
        x178 * (x10 * x308 * x373 + x15 * x218 * x308 + x310 * x373)
    )
    result[11, 9] = numpy.sum(
        x172 * (x10 * x300 * x374 + x15 * x232 * x300 + x301 * x374)
    )
    result[12, 0] = numpy.sum(
        x240 * (x235 * x271 * x353 + x235 * x274 * x352 + x238 * x271 * x352)
    )
    result[12, 1] = numpy.sum(
        x248 * (x23 * x242 * x274 + x23 * x247 * x271 + x242 * x271 * x351)
    )
    result[12, 2] = numpy.sum(
        x248 * (x23 * x235 * x282 + x23 * x238 * x277 + x235 * x277 * x351)
    )
    result[12, 3] = numpy.sum(
        x248 * (x16 * x251 * x274 + x16 * x253 * x271 + x20 * x251 * x271)
    )
    result[12, 4] = numpy.sum(
        x255 * (x16 * x242 * x282 + x16 * x247 * x277 + x20 * x242 * x277)
    )
    result[12, 5] = numpy.sum(
        x248 * (x16 * x235 * x287 + x16 * x238 * x285 + x20 * x235 * x285)
    )
    result[12, 6] = numpy.sum(
        x240 * (x10 * x271 * x375 + x15 * x266 * x271 + x274 * x375)
    )
    result[12, 7] = numpy.sum(
        x248 * (x10 * x251 * x376 + x15 * x251 * x282 + x253 * x376)
    )
    result[12, 8] = numpy.sum(
        x248 * (x10 * x285 * x377 + x15 * x247 * x285 + x287 * x377)
    )
    result[12, 9] = numpy.sum(
        x240 * (x10 * x235 * x378 + x15 * x235 * x299 + x238 * x378)
    )
    result[13, 0] = numpy.sum(
        x172 * (x167 * x328 * x353 + x167 * x329 * x352 + x169 * x328 * x352)
    )
    result[13, 1] = numpy.sum(
        x178 * (x175 * x23 * x329 + x175 * x328 * x351 + x176 * x23 * x328)
    )
    result[13, 2] = numpy.sum(
        x178 * (x167 * x23 * x337 + x167 * x335 * x351 + x169 * x23 * x335)
    )
    result[13, 3] = numpy.sum(
        x178 * (x16 * x181 * x329 + x16 * x186 * x328 + x181 * x20 * x328)
    )
    result[13, 4] = numpy.sum(
        x187 * (x16 * x175 * x337 + x16 * x176 * x335 + x175 * x20 * x335)
    )
    result[13, 5] = numpy.sum(
        x178 * (x16 * x169 * x340 + x167 * x20 * x340 + x344 * x379 * x6)
    )
    result[13, 6] = numpy.sum(
        x172 * (x10 * x328 * x380 + x15 * x201 * x328 + x329 * x380)
    )
    result[13, 7] = numpy.sum(
        x178 * (x10 * x335 * x381 + x15 * x186 * x335 + x337 * x381)
    )
    result[13, 8] = numpy.sum(
        x178 * (x10 * x175 * x382 + x15 * x175 * x344 + x176 * x382)
    )
    result[13, 9] = numpy.sum(x172 * (x10 * x347 * x379 + x15 * x169 * x347 + x350 * x92))
    result[14, 0] = numpy.sum(
        x101 * (x103 * x352 * x386 + x352 * x385 * x94 + x353 * x385)
    )
    result[14, 1] = numpy.sum(
        x126 * (x104 * x23 * x386 + x104 * x351 * x384 + x106 * x23 * x384)
    )
    result[14, 2] = numpy.sum(x126 * (x103 * x23 * x390 + x23 * x389 * x94 + x351 * x389))
    result[14, 3] = numpy.sum(
        x126 * (x134 * x16 * x386 + x134 * x20 * x384 + x137 * x16 * x384)
    )
    result[14, 4] = numpy.sum(
        x147 * (x102 * x390 * x391 + x104 * x20 * x388 + x106 * x16 * x388)
    )
    result[14, 5] = numpy.sum(x126 * (x103 * x20 * x393 + x391 * x393 * x94 + x394 * x6))
    result[14, 6] = numpy.sum(
        x101 * (x10 * x157 * x395 + x15 * x157 * x386 + x158 * x395)
    )
    result[14, 7] = numpy.sum(
        x126 * (x10 * x134 * x396 + x134 * x15 * x390 + x137 * x396)
    )
    result[14, 8] = numpy.sum(
        x126 * (x10 * x102 * x326 * x393 + x102 * x394 + x106 * x15 * x393)
    )
    result[14, 9] = numpy.sum(
        x101
        * (
            x10 * x399
            + x326
            * (
                -x18 * (-2.0 * ax * x398 + 3.0 * x291 + x397)
                + 3.0 * x2 * (2.0 * x295 + x296 + x298 + x342 + x343)
                + x349 * x97
            )
            + x399 * x94
        )
    )
    return result


def kinetic3d_44(ax, da, A, bx, db, B):
    """Cartesian 3D (gg) kinetic energy integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 15), dtype=float)

    x0 = 2.0 * ax
    x1 = 2.0 * bx
    x2 = (x0 + x1) ** (-1.0)
    x3 = (ax + bx) ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - B[0]
    x6 = -x4 - A[0]
    x7 = -ax
    x8 = x6**2
    x9 = 2.0 * ax**2
    x10 = -x7 - x9 * (x2 + x8)
    x11 = ax * x3
    x12 = bx * x11
    x13 = numpy.exp(-x12 * (A[0] - B[0]) ** 2)
    x14 = 1.772453850905516 * numpy.sqrt(x3)
    x15 = x13 * x14
    x16 = x15 * x5
    x17 = x10 * x16
    x18 = bx * x3
    x19 = x0 * x18
    x20 = x16 * x19 + x17
    x21 = x20 * x6
    x22 = x15 * x2
    x23 = x15 * x6
    x24 = x23 * x5
    x25 = x22 + x24
    x26 = x10 * x22
    x27 = x19 * x25 + x21 + x26
    x28 = x27 * x6
    x29 = x27 * x5
    x30 = x10 * x23
    x31 = x19 * x23 + x30
    x32 = x2 * (x20 + x31)
    x33 = x2 * (x16 + x23)
    x34 = x25 * x5
    x35 = x33 + x34
    x36 = x1 * x35 - x23
    x37 = x0 * x3
    x38 = x25 * x6
    x39 = x33 + x38
    x40 = x0 * x39 - x16
    x41 = x1 * x3
    x42 = x2 * (2.0 * x28 + 2.0 * x29 + 4.0 * x32 + x36 * x37 + x40 * x41)
    x43 = x20 * x5
    x44 = x15 * x5**2
    x45 = x22 + x44
    x46 = -x15
    x47 = x11 * (x1 * x45 + x46)
    x48 = x43 + x47
    x49 = 3.0 * x26
    x50 = 4.0 * x12
    x51 = 2.0 * x21 + x25 * x50 + x49
    x52 = x2 * (x48 + x51)
    x53 = x11 * x36
    x54 = x29 + x32 + x53
    x55 = x54 * x6
    x56 = 3.0 * x22
    x57 = 2.0 * x24
    x58 = x56 + x57
    x59 = x2 * (x44 + x58)
    x60 = x35 * x6
    x61 = x59 + x60
    x62 = x18 * (2.0 * ax * x61 - x45)
    x63 = x52 + x55 + x62
    x64 = x5 * x63
    x65 = 2.0 * x38
    x66 = 2.0 * x34
    x67 = x2 * (4.0 * x33 + x65 + x66)
    x68 = x5 * x61
    x69 = x67 + x68
    x70 = 2.0 * x33
    x71 = x11 * (2.0 * bx * x69 - x65 - x70)
    x72 = x42 + x64 + x71
    x73 = x5 * x72
    x74 = x6 * x72
    x75 = x5 * x54
    x76 = x35 * x5
    x77 = x59 + x76
    x78 = 2.0 * x22
    x79 = x57 + x78
    x80 = 2.0 * bx * x77 - x79
    x81 = 3.0 * x55 + 3.0 * x62
    x82 = x2 * (x37 * x80 + 5.0 * x52 + 2.0 * x75 + x81)
    x83 = 2.0 * x76
    x84 = 3.0 * x60
    x85 = x2 * (5.0 * x59 + x83 + x84)
    x86 = x5 * x69
    x87 = x85 + x86
    x88 = 3.0 * x59 + x84
    x89 = x11 * (2.0 * bx * x87 - x88)
    x90 = x6 * x69
    x91 = x85 + x90
    x92 = x18 * (2.0 * ax * x91 - 2.0 * x59 - x83)
    x93 = x6 * x63
    x94 = x6 * x61
    x95 = x67 + x94
    x96 = x18 * (2.0 * ax * x95 - x66 - x70)
    x97 = 3.0 * x2 * (2.0 * x42 + x64 + x71 + x93 + x96)
    x98 = x74 + x82 + x92
    x99 = 3.0 * x94
    x100 = 3.0 * x68
    x101 = x2 * (x100 + 6.0 * x67 + x99)
    x102 = x101 + x5 * x91
    x103 = 3.0 * x67
    x104 = -x11 * (-2.0 * bx * x102 + x103 + x99) + x5 * x98 + x97
    x105 = 3.0 * x86
    x106 = x102 * x6 + x2 * (x105 + 7.0 * x85 + 4.0 * x90)
    x107 = numpy.exp(-x12 * (A[1] - B[1]) ** 2)
    x108 = numpy.exp(-x12 * (A[2] - B[2]) ** 2)
    x109 = 3.141592653589793 * x108 * x3
    x110 = x107 * x109
    x111 = -x3 * (ax * A[1] + bx * B[1])
    x112 = -x111 - A[1]
    x113 = x112**2
    x114 = -x7 - x9 * (x113 + x2)
    x115 = x106 * x110
    x116 = -x3 * (ax * A[2] + bx * B[2])
    x117 = -x116 - A[2]
    x118 = x117**2
    x119 = -x7 - x9 * (x118 + x2)
    x120 = 0.1795871221251666 * da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**5.5)
    x121 = 6.895974704143093 * x120
    x122 = -x111 - B[1]
    x123 = x107 * x14
    x124 = x122 * x123
    x125 = x114 * x124
    x126 = x124 * x19 + x125
    x127 = x101 + x6 * x91
    x128 = x108 * x14
    x129 = x110 * (-x18 * (-2.0 * ax * x127 + x100 + x103) + x6 * x98 + x97)
    x130 = x110 * x127
    x131 = 18.24503411455484 * x120
    x132 = -x116 - B[2]
    x133 = x128 * x132
    x134 = x119 * x133
    x135 = x133 * x19 + x134
    x136 = x123 * x2
    x137 = x114 * x136
    x138 = x122 * x126
    x139 = x122**2 * x123
    x140 = x136 + x139
    x141 = -x123
    x142 = x11 * (x1 * x140 + x141)
    x143 = x138 + x142
    x144 = x137 + x143
    x145 = x15 * x8
    x146 = x2 * (x145 + x58)
    x147 = x39 * x6
    x148 = x2 * (2.0 * x146 + 2.0 * x147 + x88) + x6 * x95
    x149 = x128 * x148
    x150 = x31 * x6
    x151 = x145 + x22
    x152 = x18 * (x0 * x151 + x46)
    x153 = x150 + x152
    x154 = x2 * (x153 + x51)
    x155 = x18 * x40
    x156 = x155 + x28 + x32
    x157 = x156 * x6
    x158 = x146 + x147
    x159 = 2.0 * ax * x158 - x79
    x160 = x42 + x93 + x96
    x161 = (
        x160 * x6
        + x18 * (2.0 * ax * x148 - x88)
        + x2 * (2.0 * x154 + 2.0 * x157 + x159 * x41 + 3.0 * x52 + x81)
    )
    x162 = 23.55423775888569 * x120
    x163 = x110 * x132
    x164 = 40.79713653194731 * x120
    x165 = x128 * x2
    x166 = x119 * x165
    x167 = x132 * x135
    x168 = x128 * x132**2
    x169 = x165 + x168
    x170 = -x128
    x171 = x11 * (x1 * x169 + x170)
    x172 = x167 + x171
    x173 = x166 + x172
    x174 = x123 * x148
    x175 = 2.0 * x136
    x176 = x122 * (x140 + x175)
    x177 = x11 * (x1 * x176 - 2.0 * x124) + x122 * x144 + x2 * (x124 * x50 + 2.0 * x125)
    x178 = x6 * (x151 + x78)
    x179 = 3.0 * x33
    x180 = x179 + 3.0 * x38
    x181 = x158 * x6 + x2 * (x178 + x180)
    x182 = x128 * x181
    x183 = 3.0 * x32
    x184 = x153 + x26
    x185 = x18 * (x0 * x178 - 2.0 * x23) + x184 * x6 + x2 * (x23 * x50 + 2.0 * x30)
    x186 = x154 + x157 + x159 * x18
    x187 = (
        x18 * (2.0 * ax * x181 - x180)
        + x186 * x6
        + x2 * (3.0 * x155 + x183 + x185 + 3.0 * x28)
    )
    x188 = 2.0 * x165
    x189 = x132 * (x169 + x188)
    x190 = x11 * (x1 * x189 - 2.0 * x133) + x132 * x173 + x2 * (x133 * x50 + 2.0 * x134)
    x191 = x123 * x181
    x192 = 3.0 * x137
    x193 = 3.0 * x136
    x194 = 3.0 * x139 + x193
    x195 = x122 * x176 + x194 * x2
    x196 = (
        x11 * (2.0 * bx * x195 - x194)
        + x122 * x177
        + x2 * (3.0 * x138 + 3.0 * x142 + x192)
    )
    x197 = 3.0 * x145 + x56
    x198 = x178 * x6 + x197 * x2
    x199 = x128 * x198
    x200 = (
        x18 * (2.0 * ax * x198 - x197) + x185 * x6 + x2 * (3.0 * x150 + 3.0 * x152 + x49)
    )
    x201 = 3.0 * x166
    x202 = 3.0 * x165
    x203 = 3.0 * x168 + x202
    x204 = x132 * x189 + x2 * x203
    x205 = (
        x11 * (2.0 * bx * x204 - x203)
        + x132 * x190
        + x2 * (3.0 * x167 + 3.0 * x171 + x201)
    )
    x206 = x123 * x198
    x207 = x112 * x123
    x208 = x114 * x207
    x209 = x19 * x207 + x208
    x210 = x104 * x110
    x211 = x102 * x110
    x212 = x112 * x126
    x213 = x122 * x207
    x214 = x136 + x213
    x215 = x137 + x19 * x214 + x212
    x216 = x128 * x91
    x217 = 48.27182292900164 * x120
    x218 = x2 * (x124 + x207)
    x219 = x122 * x214
    x220 = x218 + x219
    x221 = x128 * x220
    x222 = x2 * (x126 + x209)
    x223 = x122 * x215
    x224 = x1 * x220 - x207
    x225 = x11 * x224
    x226 = x222 + x223 + x225
    x227 = 62.31865543169889 * x120
    x228 = 107.9390774670807 * x120
    x229 = x192 + 2.0 * x212 + x214 * x50
    x230 = x2 * (x143 + x229)
    x231 = x122 * x226
    x232 = 2.0 * x213
    x233 = x193 + x232
    x234 = x2 * (x139 + x233)
    x235 = x122 * x220
    x236 = x234 + x235
    x237 = x175 + x232
    x238 = 2.0 * bx * x236 - x237
    x239 = x11 * x238 + x230 + x231
    x240 = x128 * x158
    x241 = 3.0 * x218
    x242 = 3.0 * x219 + x241
    x243 = x122 * x236 + x2 * (x176 + x242)
    x244 = x128 * x243
    x245 = 3.0 * x222
    x246 = (
        x11 * (2.0 * bx * x243 - x242)
        + x122 * x239
        + x2 * (x177 + 3.0 * x223 + 3.0 * x225 + x245)
    )
    x247 = x117 * x128
    x248 = x119 * x247
    x249 = x19 * x247 + x248
    x250 = x110 * x117
    x251 = x117 * x135
    x252 = x132 * x247
    x253 = x165 + x252
    x254 = x166 + x19 * x253 + x251
    x255 = x123 * x91
    x256 = x2 * (x133 + x247)
    x257 = x132 * x253
    x258 = x256 + x257
    x259 = x123 * x258
    x260 = x2 * (x135 + x249)
    x261 = x132 * x254
    x262 = x1 * x258 - x247
    x263 = x11 * x262
    x264 = x260 + x261 + x263
    x265 = x201 + 2.0 * x251 + x253 * x50
    x266 = x2 * (x172 + x265)
    x267 = x132 * x264
    x268 = 2.0 * x252
    x269 = x202 + x268
    x270 = x2 * (x168 + x269)
    x271 = x132 * x258
    x272 = x270 + x271
    x273 = x188 + x268
    x274 = 2.0 * bx * x272 - x273
    x275 = x11 * x274 + x266 + x267
    x276 = x123 * x158
    x277 = 3.0 * x256
    x278 = 3.0 * x257 + x277
    x279 = x132 * x272 + x2 * (x189 + x278)
    x280 = x123 * x279
    x281 = 3.0 * x260
    x282 = (
        x11 * (2.0 * bx * x279 - x278)
        + x132 * x275
        + x2 * (x190 + 3.0 * x261 + 3.0 * x263 + x281)
    )
    x283 = x112 * x209
    x284 = x113 * x123
    x285 = x136 + x284
    x286 = x18 * (x0 * x285 + x141)
    x287 = x283 + x286
    x288 = x137 + x287
    x289 = x128 * x87
    x290 = x73 + x82 + x89
    x291 = x112 * x214
    x292 = x218 + x291
    x293 = x128 * x292
    x294 = x112 * x215
    x295 = x0 * x292 - x124
    x296 = x18 * x295
    x297 = x222 + x294 + x296
    x298 = x112 * x226
    x299 = x112 * x220
    x300 = x234 + x299
    x301 = x18 * (2.0 * ax * x300 - x140)
    x302 = x230 + x298 + x301
    x303 = x128 * x61
    x304 = 80.45303821500274 * x120
    x305 = 139.3487498116652 * x120
    x306 = x2 * (4.0 * x222 + 2.0 * x223 + x224 * x37 + 2.0 * x294 + x295 * x41)
    x307 = x122 * x302
    x308 = 2.0 * x291
    x309 = 2.0 * x219
    x310 = x2 * (4.0 * x218 + x308 + x309)
    x311 = x122 * x300
    x312 = x310 + x311
    x313 = 2.0 * x218
    x314 = x11 * (2.0 * bx * x312 - x308 - x313)
    x315 = x306 + x307 + x314
    x316 = x128 * x39
    x317 = 2.0 * x235
    x318 = 3.0 * x299
    x319 = x2 * (5.0 * x234 + x317 + x318)
    x320 = x122 * x312
    x321 = x319 + x320
    x322 = x128 * x321
    x323 = 3.0 * x298 + 3.0 * x301
    x324 = x2 * (5.0 * x230 + 2.0 * x231 + x238 * x37 + x323)
    x325 = x122 * x315
    x326 = 3.0 * x234 + x318
    x327 = x11 * (2.0 * bx * x321 - x326)
    x328 = x324 + x325 + x327
    x329 = 241.3591146450082 * x120
    x330 = x117 * x249
    x331 = x118 * x128
    x332 = x165 + x331
    x333 = x18 * (x0 * x332 + x170)
    x334 = x330 + x333
    x335 = x166 + x334
    x336 = x123 * x87
    x337 = x117 * x253
    x338 = x256 + x337
    x339 = x123 * x338
    x340 = x117 * x254
    x341 = x0 * x338 - x133
    x342 = x18 * x341
    x343 = x260 + x340 + x342
    x344 = x117 * x264
    x345 = x117 * x258
    x346 = x270 + x345
    x347 = x18 * (2.0 * ax * x346 - x169)
    x348 = x266 + x344 + x347
    x349 = x123 * x61
    x350 = x2 * (4.0 * x260 + 2.0 * x261 + x262 * x37 + 2.0 * x340 + x341 * x41)
    x351 = x132 * x348
    x352 = 2.0 * x337
    x353 = 2.0 * x257
    x354 = x2 * (4.0 * x256 + x352 + x353)
    x355 = x132 * x346
    x356 = x354 + x355
    x357 = 2.0 * x256
    x358 = x11 * (2.0 * bx * x356 - x352 - x357)
    x359 = x350 + x351 + x358
    x360 = x123 * x39
    x361 = 2.0 * x271
    x362 = 3.0 * x345
    x363 = x2 * (5.0 * x270 + x361 + x362)
    x364 = x132 * x356
    x365 = x363 + x364
    x366 = x123 * x365
    x367 = 3.0 * x344 + 3.0 * x347
    x368 = x2 * (5.0 * x266 + 2.0 * x267 + x274 * x37 + x367)
    x369 = x132 * x359
    x370 = 3.0 * x270 + x362
    x371 = x11 * (2.0 * bx * x365 - x370)
    x372 = x368 + x369 + x371
    x373 = x112 * (x175 + x285)
    x374 = x112 * x288 + x18 * (x0 * x373 - 2.0 * x207) + x2 * (x207 * x50 + 2.0 * x208)
    x375 = x5 * (x45 + x78)
    x376 = x179 + 3.0 * x34
    x377 = x2 * (x375 + x376) + x5 * x77
    x378 = x128 * x377
    x379 = x26 + x48
    x380 = x11 * (x1 * x375 - 2.0 * x16) + x2 * (x16 * x50 + 2.0 * x17) + x379 * x5
    x381 = x11 * x80 + x52 + x75
    x382 = (
        x11 * (2.0 * bx * x377 - x376)
        + x2 * (x183 + 3.0 * x29 + x380 + 3.0 * x53)
        + x381 * x5
    )
    x383 = x2 * (x233 + x284)
    x384 = x112 * x292
    x385 = x383 + x384
    x386 = x128 * x385
    x387 = x2 * (x229 + x287)
    x388 = x112 * x297
    x389 = 2.0 * ax * x385 - x237
    x390 = x18 * x389 + x387 + x388
    x391 = x112 * x302
    x392 = x112 * x300
    x393 = x310 + x392
    x394 = x18 * (2.0 * ax * x393 - x309 - x313)
    x395 = x306 + x391 + x394
    x396 = x128 * x35
    x397 = x112 * x312
    x398 = x319 + x397
    x399 = x128 * x398
    x400 = x112 * x315
    x401 = x18 * (2.0 * ax * x398 - 2.0 * x234 - x317)
    x402 = x324 + x400 + x401
    x403 = 3.0 * x392
    x404 = 3.0 * x311
    x405 = x2 * (6.0 * x310 + x403 + x404)
    x406 = x122 * x398 + x405
    x407 = 3.0 * x2 * (2.0 * x306 + x307 + x314 + x391 + x394)
    x408 = 3.0 * x310
    x409 = -x11 * (-2.0 * bx * x406 + x403 + x408) + x122 * x402 + x407
    x410 = x109 * x13
    x411 = x409 * x410
    x412 = x410 * x6
    x413 = 3.141592653589793 * x107 * x13 * x3
    x414 = x413 * x6
    x415 = x117 * (x188 + x332)
    x416 = x117 * x335 + x18 * (x0 * x415 - 2.0 * x247) + x2 * (x247 * x50 + 2.0 * x248)
    x417 = x123 * x377
    x418 = x2 * (x269 + x331)
    x419 = x117 * x338
    x420 = x418 + x419
    x421 = x123 * x420
    x422 = x2 * (x265 + x334)
    x423 = x117 * x343
    x424 = 2.0 * ax * x420 - x273
    x425 = x18 * x424 + x422 + x423
    x426 = x117 * x348
    x427 = x117 * x346
    x428 = x354 + x427
    x429 = x18 * (2.0 * ax * x428 - x353 - x357)
    x430 = x350 + x426 + x429
    x431 = x123 * x35
    x432 = x117 * x356
    x433 = x363 + x432
    x434 = x123 * x433
    x435 = x117 * x359
    x436 = x18 * (2.0 * ax * x433 - 2.0 * x270 - x361)
    x437 = x368 + x435 + x436
    x438 = 3.0 * x427
    x439 = 3.0 * x355
    x440 = x2 * (6.0 * x354 + x438 + x439)
    x441 = x132 * x433 + x440
    x442 = 3.0 * x2 * (2.0 * x350 + x351 + x358 + x426 + x429)
    x443 = 3.0 * x354
    x444 = -x11 * (-2.0 * bx * x441 + x438 + x443) + x132 * x437 + x442
    x445 = x413 * x444
    x446 = 3.0 * x44 + x56
    x447 = x2 * x446 + x375 * x5
    x448 = x11 * (2.0 * bx * x447 - x446) + x2 * (3.0 * x43 + 3.0 * x47 + x49) + x380 * x5
    x449 = x193 + 3.0 * x284
    x450 = x112 * x373 + x2 * x449
    x451 = x128 * x450
    x452 = (
        x112 * x374
        + x18 * (2.0 * ax * x450 - x449)
        + x2 * (x192 + 3.0 * x283 + 3.0 * x286)
    )
    x453 = x241 + 3.0 * x291
    x454 = x112 * x385 + x2 * (x373 + x453)
    x455 = x128 * x454
    x456 = (
        x112 * x390
        + x18 * (2.0 * ax * x454 - x453)
        + x2 * (x245 + 3.0 * x294 + 3.0 * x296 + x374)
    )
    x457 = x112 * x393 + x2 * (x326 + 2.0 * x383 + 2.0 * x384)
    x458 = x128 * x457
    x459 = (
        x112 * x395
        + x18 * (2.0 * ax * x457 - x326)
        + x2 * (3.0 * x230 + x323 + 2.0 * x387 + 2.0 * x388 + x389 * x41)
    )
    x460 = x112 * x398 + x405
    x461 = x410 * (x112 * x402 - x18 * (-2.0 * ax * x460 + x404 + x408) + x407)
    x462 = x410 * x5
    x463 = 3.0 * x320
    x464 = x112 * x406 + x2 * (7.0 * x319 + 4.0 * x397 + x463)
    x465 = x410 * x464
    x466 = x10 * x410
    x467 = x15 * x457
    x468 = x15 * x454
    x469 = x15 * x450
    x470 = x15 * x398
    x471 = x15 * x258
    x472 = x15 * x385
    x473 = x15 * x279
    x474 = x15 * x321
    x475 = x15 * x338
    x476 = x15 * x300
    x477 = x15 * x292
    x478 = x15 * x365
    x479 = x112 * x413
    x480 = x15 * x243
    x481 = x15 * x420
    x482 = x15 * x220
    x483 = x15 * x433
    x484 = x202 + 3.0 * x331
    x485 = x117 * x415 + x2 * x484
    x486 = x123 * x485
    x487 = (
        x117 * x416
        + x18 * (2.0 * ax * x485 - x484)
        + x2 * (x201 + 3.0 * x330 + 3.0 * x333)
    )
    x488 = x277 + 3.0 * x337
    x489 = x117 * x420 + x2 * (x415 + x488)
    x490 = x123 * x489
    x491 = (
        x117 * x425
        + x18 * (2.0 * ax * x489 - x488)
        + x2 * (x281 + 3.0 * x340 + 3.0 * x342 + x416)
    )
    x492 = x117 * x428 + x2 * (x370 + 2.0 * x418 + 2.0 * x419)
    x493 = x123 * x492
    x494 = (
        x117 * x430
        + x18 * (2.0 * ax * x492 - x370)
        + x2 * (3.0 * x266 + x367 + x41 * x424 + 2.0 * x422 + 2.0 * x423)
    )
    x495 = x413 * x5
    x496 = x117 * x433 + x440
    x497 = x413 * (x117 * x437 - x18 * (-2.0 * ax * x496 + x439 + x443) + x442)
    x498 = x15 * x485
    x499 = x15 * x489
    x500 = x15 * x492
    x501 = 3.0 * x364
    x502 = x117 * x441 + x2 * (7.0 * x363 + 4.0 * x432 + x501)
    x503 = x413 * x502

    # 225 item(s)
    result[0, 0] = numpy.sum(
        x121
        * (
            x110
            * (
                x104 * x6
                - x18 * (-2.0 * ax * x106 + x105 + 3.0 * x85)
                + x2 * (3.0 * x73 + 4.0 * x74 + 7.0 * x82 + 3.0 * x89 + 4.0 * x92)
            )
            + x114 * x115
            + x115 * x119
        )
    )
    result[0, 1] = numpy.sum(
        x131 * (x119 * x122 * x130 + x122 * x129 + x126 * x127 * x128)
    )
    result[0, 2] = numpy.sum(
        x131 * (x114 * x130 * x132 + x123 * x127 * x135 + x129 * x132)
    )
    result[0, 3] = numpy.sum(
        x162 * (x119 * x140 * x149 + x128 * x140 * x161 + x144 * x149)
    )
    result[0, 4] = numpy.sum(
        x164 * (x122 * x161 * x163 + x124 * x135 * x148 + x126 * x133 * x148)
    )
    result[0, 5] = numpy.sum(
        x162 * (x114 * x169 * x174 + x123 * x161 * x169 + x173 * x174)
    )
    result[0, 6] = numpy.sum(
        x131 * (x119 * x176 * x182 + x128 * x176 * x187 + x177 * x182)
    )
    result[0, 7] = numpy.sum(
        x164 * (x133 * x140 * x187 + x133 * x144 * x181 + x135 * x140 * x181)
    )
    result[0, 8] = numpy.sum(
        x164 * (x124 * x169 * x187 + x124 * x173 * x181 + x126 * x169 * x181)
    )
    result[0, 9] = numpy.sum(
        x131 * (x114 * x189 * x191 + x123 * x187 * x189 + x190 * x191)
    )
    result[0, 10] = numpy.sum(
        x121 * (x119 * x195 * x199 + x128 * x195 * x200 + x196 * x199)
    )
    result[0, 11] = numpy.sum(
        x131 * (x133 * x176 * x200 + x133 * x177 * x198 + x135 * x176 * x198)
    )
    result[0, 12] = numpy.sum(
        x162 * (x140 * x169 * x200 + x140 * x173 * x198 + x144 * x169 * x198)
    )
    result[0, 13] = numpy.sum(
        x131 * (x124 * x189 * x200 + x124 * x190 * x198 + x126 * x189 * x198)
    )
    result[0, 14] = numpy.sum(
        x121 * (x114 * x204 * x206 + x123 * x200 * x204 + x205 * x206)
    )
    result[1, 0] = numpy.sum(
        x131 * (x102 * x128 * x209 + x112 * x119 * x211 + x112 * x210)
    )
    result[1, 1] = numpy.sum(
        x217 * (x119 * x214 * x216 + x128 * x214 * x98 + x215 * x216)
    )
    result[1, 2] = numpy.sum(
        x217 * (x112 * x163 * x98 + x133 * x209 * x91 + x135 * x207 * x91)
    )
    result[1, 3] = numpy.sum(x227 * (x119 * x221 * x95 + x128 * x226 * x95 + x160 * x221))
    result[1, 4] = numpy.sum(
        x228 * (x133 * x160 * x214 + x133 * x215 * x95 + x135 * x214 * x95)
    )
    result[1, 5] = numpy.sum(
        x227 * (x160 * x169 * x207 + x169 * x209 * x95 + x173 * x207 * x95)
    )
    result[1, 6] = numpy.sum(
        x217 * (x119 * x236 * x240 + x128 * x186 * x236 + x239 * x240)
    )
    result[1, 7] = numpy.sum(
        x228 * (x133 * x158 * x226 + x133 * x186 * x220 + x135 * x158 * x220)
    )
    result[1, 8] = numpy.sum(
        x228 * (x158 * x169 * x215 + x158 * x173 * x214 + x169 * x186 * x214)
    )
    result[1, 9] = numpy.sum(
        x217 * (x158 * x189 * x209 + x158 * x190 * x207 + x186 * x189 * x207)
    )
    result[1, 10] = numpy.sum(
        x131 * (x119 * x178 * x244 + x128 * x178 * x246 + x185 * x244)
    )
    result[1, 11] = numpy.sum(
        x217 * (x133 * x178 * x239 + x133 * x185 * x236 + x135 * x178 * x236)
    )
    result[1, 12] = numpy.sum(
        x227 * (x169 * x178 * x226 + x169 * x185 * x220 + x173 * x178 * x220)
    )
    result[1, 13] = numpy.sum(
        x217 * (x178 * x189 * x215 + x178 * x190 * x214 + x185 * x189 * x214)
    )
    result[1, 14] = numpy.sum(
        x131 * (x178 * x204 * x209 + x178 * x205 * x207 + x185 * x204 * x207)
    )
    result[2, 0] = numpy.sum(
        x131 * (x102 * x123 * x249 + x114 * x117 * x211 + x117 * x210)
    )
    result[2, 1] = numpy.sum(
        x217 * (x122 * x250 * x98 + x124 * x249 * x91 + x126 * x247 * x91)
    )
    result[2, 2] = numpy.sum(
        x217 * (x114 * x253 * x255 + x123 * x253 * x98 + x254 * x255)
    )
    result[2, 3] = numpy.sum(
        x227 * (x140 * x160 * x247 + x140 * x249 * x95 + x144 * x247 * x95)
    )
    result[2, 4] = numpy.sum(
        x228 * (x124 * x160 * x253 + x124 * x254 * x95 + x126 * x253 * x95)
    )
    result[2, 5] = numpy.sum(x227 * (x114 * x259 * x95 + x123 * x264 * x95 + x160 * x259))
    result[2, 6] = numpy.sum(
        x217 * (x158 * x176 * x249 + x158 * x177 * x247 + x176 * x186 * x247)
    )
    result[2, 7] = numpy.sum(
        x228 * (x140 * x158 * x254 + x140 * x186 * x253 + x144 * x158 * x253)
    )
    result[2, 8] = numpy.sum(
        x228 * (x124 * x158 * x264 + x124 * x186 * x258 + x126 * x158 * x258)
    )
    result[2, 9] = numpy.sum(
        x217 * (x114 * x272 * x276 + x123 * x186 * x272 + x275 * x276)
    )
    result[2, 10] = numpy.sum(
        x131 * (x178 * x195 * x249 + x178 * x196 * x247 + x185 * x195 * x247)
    )
    result[2, 11] = numpy.sum(
        x217 * (x176 * x178 * x254 + x176 * x185 * x253 + x177 * x178 * x253)
    )
    result[2, 12] = numpy.sum(
        x227 * (x140 * x178 * x264 + x140 * x185 * x258 + x144 * x178 * x258)
    )
    result[2, 13] = numpy.sum(
        x217 * (x124 * x178 * x275 + x124 * x185 * x272 + x126 * x178 * x272)
    )
    result[2, 14] = numpy.sum(
        x131 * (x114 * x178 * x280 + x123 * x178 * x282 + x185 * x280)
    )
    result[3, 0] = numpy.sum(
        x162 * (x119 * x285 * x289 + x128 * x285 * x290 + x288 * x289)
    )
    result[3, 1] = numpy.sum(x227 * (x119 * x293 * x69 + x128 * x297 * x69 + x293 * x72))
    result[3, 2] = numpy.sum(
        x227 * (x133 * x285 * x72 + x133 * x288 * x69 + x135 * x285 * x69)
    )
    result[3, 3] = numpy.sum(
        x304 * (x119 * x300 * x303 + x128 * x300 * x63 + x302 * x303)
    )
    result[3, 4] = numpy.sum(
        x305 * (x133 * x292 * x63 + x133 * x297 * x61 + x135 * x292 * x61)
    )
    result[3, 5] = numpy.sum(
        x304 * (x169 * x285 * x63 + x169 * x288 * x61 + x173 * x285 * x61)
    )
    result[3, 6] = numpy.sum(
        x227 * (x119 * x312 * x316 + x128 * x156 * x312 + x315 * x316)
    )
    result[3, 7] = numpy.sum(
        x305 * (x133 * x156 * x300 + x133 * x302 * x39 + x135 * x300 * x39)
    )
    result[3, 8] = numpy.sum(
        x305 * (x156 * x169 * x292 + x169 * x297 * x39 + x173 * x292 * x39)
    )
    result[3, 9] = numpy.sum(
        x227 * (x156 * x189 * x285 + x189 * x288 * x39 + x190 * x285 * x39)
    )
    result[3, 10] = numpy.sum(
        x162 * (x119 * x151 * x322 + x128 * x151 * x328 + x184 * x322)
    )
    result[3, 11] = numpy.sum(
        x227 * (x133 * x151 * x315 + x133 * x184 * x312 + x135 * x151 * x312)
    )
    result[3, 12] = numpy.sum(
        x304 * (x151 * x169 * x302 + x151 * x173 * x300 + x169 * x184 * x300)
    )
    result[3, 13] = numpy.sum(
        x227 * (x151 * x189 * x297 + x151 * x190 * x292 + x184 * x189 * x292)
    )
    result[3, 14] = numpy.sum(
        x162 * (x151 * x204 * x288 + x151 * x205 * x285 + x184 * x204 * x285)
    )
    result[4, 0] = numpy.sum(
        x164 * (x112 * x250 * x290 + x207 * x249 * x87 + x209 * x247 * x87)
    )
    result[4, 1] = numpy.sum(
        x228 * (x214 * x247 * x72 + x214 * x249 * x69 + x215 * x247 * x69)
    )
    result[4, 2] = numpy.sum(
        x228 * (x207 * x253 * x72 + x207 * x254 * x69 + x209 * x253 * x69)
    )
    result[4, 3] = numpy.sum(
        x305 * (x220 * x247 * x63 + x220 * x249 * x61 + x226 * x247 * x61)
    )
    result[4, 4] = numpy.sum(
        x329 * (x214 * x253 * x63 + x214 * x254 * x61 + x215 * x253 * x61)
    )
    result[4, 5] = numpy.sum(
        x305 * (x207 * x258 * x63 + x207 * x264 * x61 + x209 * x258 * x61)
    )
    result[4, 6] = numpy.sum(
        x228 * (x156 * x236 * x247 + x236 * x249 * x39 + x239 * x247 * x39)
    )
    result[4, 7] = numpy.sum(
        x329 * (x156 * x220 * x253 + x220 * x254 * x39 + x226 * x253 * x39)
    )
    result[4, 8] = numpy.sum(
        x329 * (x156 * x214 * x258 + x214 * x264 * x39 + x215 * x258 * x39)
    )
    result[4, 9] = numpy.sum(
        x228 * (x156 * x207 * x272 + x207 * x275 * x39 + x209 * x272 * x39)
    )
    result[4, 10] = numpy.sum(
        x164 * (x151 * x243 * x249 + x151 * x246 * x247 + x184 * x243 * x247)
    )
    result[4, 11] = numpy.sum(
        x228 * (x151 * x236 * x254 + x151 * x239 * x253 + x184 * x236 * x253)
    )
    result[4, 12] = numpy.sum(
        x305 * (x151 * x220 * x264 + x151 * x226 * x258 + x184 * x220 * x258)
    )
    result[4, 13] = numpy.sum(
        x228 * (x151 * x214 * x275 + x151 * x215 * x272 + x184 * x214 * x272)
    )
    result[4, 14] = numpy.sum(
        x164 * (x151 * x207 * x282 + x151 * x209 * x279 + x184 * x207 * x279)
    )
    result[5, 0] = numpy.sum(
        x162 * (x114 * x332 * x336 + x123 * x290 * x332 + x335 * x336)
    )
    result[5, 1] = numpy.sum(
        x227 * (x124 * x332 * x72 + x124 * x335 * x69 + x126 * x332 * x69)
    )
    result[5, 2] = numpy.sum(x227 * (x114 * x339 * x69 + x123 * x343 * x69 + x339 * x72))
    result[5, 3] = numpy.sum(
        x304 * (x140 * x332 * x63 + x140 * x335 * x61 + x144 * x332 * x61)
    )
    result[5, 4] = numpy.sum(
        x305 * (x124 * x338 * x63 + x124 * x343 * x61 + x126 * x338 * x61)
    )
    result[5, 5] = numpy.sum(
        x304 * (x114 * x346 * x349 + x123 * x346 * x63 + x348 * x349)
    )
    result[5, 6] = numpy.sum(
        x227 * (x156 * x176 * x332 + x176 * x335 * x39 + x177 * x332 * x39)
    )
    result[5, 7] = numpy.sum(
        x305 * (x140 * x156 * x338 + x140 * x343 * x39 + x144 * x338 * x39)
    )
    result[5, 8] = numpy.sum(
        x305 * (x124 * x156 * x346 + x124 * x348 * x39 + x126 * x346 * x39)
    )
    result[5, 9] = numpy.sum(
        x227 * (x114 * x356 * x360 + x123 * x156 * x356 + x359 * x360)
    )
    result[5, 10] = numpy.sum(
        x162 * (x151 * x195 * x335 + x151 * x196 * x332 + x184 * x195 * x332)
    )
    result[5, 11] = numpy.sum(
        x227 * (x151 * x176 * x343 + x151 * x177 * x338 + x176 * x184 * x338)
    )
    result[5, 12] = numpy.sum(
        x304 * (x140 * x151 * x348 + x140 * x184 * x346 + x144 * x151 * x346)
    )
    result[5, 13] = numpy.sum(
        x227 * (x124 * x151 * x359 + x124 * x184 * x356 + x126 * x151 * x356)
    )
    result[5, 14] = numpy.sum(
        x162 * (x114 * x151 * x366 + x123 * x151 * x372 + x184 * x366)
    )
    result[6, 0] = numpy.sum(
        x131 * (x119 * x373 * x378 + x128 * x373 * x382 + x374 * x378)
    )
    result[6, 1] = numpy.sum(x217 * (x119 * x386 * x77 + x128 * x390 * x77 + x381 * x386))
    result[6, 2] = numpy.sum(
        x217 * (x133 * x373 * x381 + x133 * x374 * x77 + x135 * x373 * x77)
    )
    result[6, 3] = numpy.sum(
        x227 * (x119 * x393 * x396 + x128 * x393 * x54 + x395 * x396)
    )
    result[6, 4] = numpy.sum(
        x228 * (x133 * x35 * x390 + x133 * x385 * x54 + x135 * x35 * x385)
    )
    result[6, 5] = numpy.sum(
        x227 * (x169 * x35 * x374 + x169 * x373 * x54 + x173 * x35 * x373)
    )
    result[6, 6] = numpy.sum(x217 * (x119 * x25 * x399 + x128 * x25 * x402 + x27 * x399))
    result[6, 7] = numpy.sum(
        x228 * (x133 * x25 * x395 + x133 * x27 * x393 + x135 * x25 * x393)
    )
    result[6, 8] = numpy.sum(
        x228 * (x169 * x25 * x390 + x169 * x27 * x385 + x173 * x25 * x385)
    )
    result[6, 9] = numpy.sum(
        x217 * (x189 * x25 * x374 + x189 * x27 * x373 + x190 * x25 * x373)
    )
    result[6, 10] = numpy.sum(x131 * (x119 * x406 * x412 + x128 * x31 * x406 + x411 * x6))
    result[6, 11] = numpy.sum(
        x217 * (x132 * x402 * x412 + x133 * x31 * x398 + x135 * x23 * x398)
    )
    result[6, 12] = numpy.sum(
        x227 * (x169 * x23 * x395 + x169 * x31 * x393 + x173 * x23 * x393)
    )
    result[6, 13] = numpy.sum(
        x217 * (x189 * x23 * x390 + x189 * x31 * x385 + x190 * x23 * x385)
    )
    result[6, 14] = numpy.sum(
        x131 * (x204 * x23 * x374 + x204 * x31 * x373 + x205 * x23 * x373)
    )
    result[7, 0] = numpy.sum(
        x164 * (x247 * x285 * x382 + x247 * x288 * x377 + x249 * x285 * x377)
    )
    result[7, 1] = numpy.sum(
        x228 * (x247 * x292 * x381 + x247 * x297 * x77 + x249 * x292 * x77)
    )
    result[7, 2] = numpy.sum(
        x228 * (x253 * x285 * x381 + x253 * x288 * x77 + x254 * x285 * x77)
    )
    result[7, 3] = numpy.sum(
        x305 * (x247 * x300 * x54 + x247 * x302 * x35 + x249 * x300 * x35)
    )
    result[7, 4] = numpy.sum(
        x329 * (x253 * x292 * x54 + x253 * x297 * x35 + x254 * x292 * x35)
    )
    result[7, 5] = numpy.sum(
        x305 * (x258 * x285 * x54 + x258 * x288 * x35 + x264 * x285 * x35)
    )
    result[7, 6] = numpy.sum(
        x228 * (x247 * x25 * x315 + x247 * x27 * x312 + x249 * x25 * x312)
    )
    result[7, 7] = numpy.sum(
        x329 * (x25 * x253 * x302 + x25 * x254 * x300 + x253 * x27 * x300)
    )
    result[7, 8] = numpy.sum(
        x329 * (x25 * x258 * x297 + x25 * x264 * x292 + x258 * x27 * x292)
    )
    result[7, 9] = numpy.sum(
        x228 * (x25 * x272 * x288 + x25 * x275 * x285 + x27 * x272 * x285)
    )
    result[7, 10] = numpy.sum(
        x164 * (x117 * x328 * x412 + x23 * x249 * x321 + x247 * x31 * x321)
    )
    result[7, 11] = numpy.sum(
        x228 * (x23 * x253 * x315 + x23 * x254 * x312 + x253 * x31 * x312)
    )
    result[7, 12] = numpy.sum(
        x305 * (x23 * x258 * x302 + x23 * x264 * x300 + x258 * x300 * x31)
    )
    result[7, 13] = numpy.sum(
        x228 * (x23 * x272 * x297 + x23 * x275 * x292 + x272 * x292 * x31)
    )
    result[7, 14] = numpy.sum(
        x164 * (x23 * x279 * x288 + x23 * x282 * x285 + x279 * x285 * x31)
    )
    result[8, 0] = numpy.sum(
        x164 * (x207 * x332 * x382 + x207 * x335 * x377 + x209 * x332 * x377)
    )
    result[8, 1] = numpy.sum(
        x228 * (x214 * x332 * x381 + x214 * x335 * x77 + x215 * x332 * x77)
    )
    result[8, 2] = numpy.sum(
        x228 * (x207 * x338 * x381 + x207 * x343 * x77 + x209 * x338 * x77)
    )
    result[8, 3] = numpy.sum(
        x305 * (x220 * x332 * x54 + x220 * x335 * x35 + x226 * x332 * x35)
    )
    result[8, 4] = numpy.sum(
        x329 * (x214 * x338 * x54 + x214 * x343 * x35 + x215 * x338 * x35)
    )
    result[8, 5] = numpy.sum(
        x305 * (x207 * x346 * x54 + x207 * x348 * x35 + x209 * x346 * x35)
    )
    result[8, 6] = numpy.sum(
        x228 * (x236 * x25 * x335 + x236 * x27 * x332 + x239 * x25 * x332)
    )
    result[8, 7] = numpy.sum(
        x329 * (x220 * x25 * x343 + x220 * x27 * x338 + x226 * x25 * x338)
    )
    result[8, 8] = numpy.sum(
        x329 * (x214 * x25 * x348 + x214 * x27 * x346 + x215 * x25 * x346)
    )
    result[8, 9] = numpy.sum(
        x228 * (x207 * x25 * x359 + x207 * x27 * x356 + x209 * x25 * x356)
    )
    result[8, 10] = numpy.sum(
        x164 * (x23 * x243 * x335 + x23 * x246 * x332 + x243 * x31 * x332)
    )
    result[8, 11] = numpy.sum(
        x228 * (x23 * x236 * x343 + x23 * x239 * x338 + x236 * x31 * x338)
    )
    result[8, 12] = numpy.sum(
        x305 * (x220 * x23 * x348 + x220 * x31 * x346 + x226 * x23 * x346)
    )
    result[8, 13] = numpy.sum(
        x228 * (x214 * x23 * x359 + x214 * x31 * x356 + x215 * x23 * x356)
    )
    result[8, 14] = numpy.sum(
        x164 * (x112 * x372 * x414 + x207 * x31 * x365 + x209 * x23 * x365)
    )
    result[9, 0] = numpy.sum(
        x131 * (x114 * x415 * x417 + x123 * x382 * x415 + x416 * x417)
    )
    result[9, 1] = numpy.sum(
        x217 * (x124 * x381 * x415 + x124 * x416 * x77 + x126 * x415 * x77)
    )
    result[9, 2] = numpy.sum(x217 * (x114 * x421 * x77 + x123 * x425 * x77 + x381 * x421))
    result[9, 3] = numpy.sum(
        x227 * (x140 * x35 * x416 + x140 * x415 * x54 + x144 * x35 * x415)
    )
    result[9, 4] = numpy.sum(
        x228 * (x124 * x35 * x425 + x124 * x420 * x54 + x126 * x35 * x420)
    )
    result[9, 5] = numpy.sum(
        x227 * (x114 * x428 * x431 + x123 * x428 * x54 + x430 * x431)
    )
    result[9, 6] = numpy.sum(
        x217 * (x176 * x25 * x416 + x176 * x27 * x415 + x177 * x25 * x415)
    )
    result[9, 7] = numpy.sum(
        x228 * (x140 * x25 * x425 + x140 * x27 * x420 + x144 * x25 * x420)
    )
    result[9, 8] = numpy.sum(
        x228 * (x124 * x25 * x430 + x124 * x27 * x428 + x126 * x25 * x428)
    )
    result[9, 9] = numpy.sum(x217 * (x114 * x25 * x434 + x123 * x25 * x437 + x27 * x434))
    result[9, 10] = numpy.sum(
        x131 * (x195 * x23 * x416 + x195 * x31 * x415 + x196 * x23 * x415)
    )
    result[9, 11] = numpy.sum(
        x217 * (x176 * x23 * x425 + x176 * x31 * x420 + x177 * x23 * x420)
    )
    result[9, 12] = numpy.sum(
        x227 * (x140 * x23 * x430 + x140 * x31 * x428 + x144 * x23 * x428)
    )
    result[9, 13] = numpy.sum(
        x217 * (x122 * x414 * x437 + x124 * x31 * x433 + x126 * x23 * x433)
    )
    result[9, 14] = numpy.sum(x131 * (x114 * x414 * x441 + x123 * x31 * x441 + x445 * x6))
    result[10, 0] = numpy.sum(
        x121 * (x119 * x447 * x451 + x128 * x447 * x452 + x448 * x451)
    )
    result[10, 1] = numpy.sum(
        x131 * (x119 * x375 * x455 + x128 * x375 * x456 + x380 * x455)
    )
    result[10, 2] = numpy.sum(
        x131 * (x133 * x375 * x452 + x133 * x380 * x450 + x135 * x375 * x450)
    )
    result[10, 3] = numpy.sum(
        x162 * (x119 * x45 * x458 + x128 * x45 * x459 + x379 * x458)
    )
    result[10, 4] = numpy.sum(
        x164 * (x133 * x379 * x454 + x133 * x45 * x456 + x135 * x45 * x454)
    )
    result[10, 5] = numpy.sum(
        x162 * (x169 * x379 * x450 + x169 * x45 * x452 + x173 * x45 * x450)
    )
    result[10, 6] = numpy.sum(x131 * (x119 * x460 * x462 + x128 * x20 * x460 + x461 * x5))
    result[10, 7] = numpy.sum(
        x164 * (x132 * x459 * x462 + x133 * x20 * x457 + x135 * x16 * x457)
    )
    result[10, 8] = numpy.sum(
        x164 * (x16 * x169 * x456 + x16 * x173 * x454 + x169 * x20 * x454)
    )
    result[10, 9] = numpy.sum(
        x131 * (x16 * x189 * x452 + x16 * x190 * x450 + x189 * x20 * x450)
    )
    result[10, 10] = numpy.sum(
        x121
        * (
            x10 * x465
            + x119 * x465
            + x410
            * (
                x112 * x409
                - x18 * (-2.0 * ax * x464 + 3.0 * x319 + x463)
                + x2 * (7.0 * x324 + 3.0 * x325 + 3.0 * x327 + 4.0 * x400 + 4.0 * x401)
            )
        )
    )
    result[10, 11] = numpy.sum(
        x131 * (x132 * x460 * x466 + x132 * x461 + x135 * x15 * x460)
    )
    result[10, 12] = numpy.sum(
        x162 * (x10 * x169 * x467 + x15 * x169 * x459 + x173 * x467)
    )
    result[10, 13] = numpy.sum(
        x131 * (x10 * x189 * x468 + x15 * x189 * x456 + x190 * x468)
    )
    result[10, 14] = numpy.sum(
        x121 * (x10 * x204 * x469 + x15 * x204 * x452 + x205 * x469)
    )
    result[11, 0] = numpy.sum(
        x131 * (x247 * x373 * x448 + x247 * x374 * x447 + x249 * x373 * x447)
    )
    result[11, 1] = numpy.sum(
        x217 * (x247 * x375 * x390 + x247 * x380 * x385 + x249 * x375 * x385)
    )
    result[11, 2] = numpy.sum(
        x217 * (x253 * x373 * x380 + x253 * x374 * x375 + x254 * x373 * x375)
    )
    result[11, 3] = numpy.sum(
        x227 * (x247 * x379 * x393 + x247 * x395 * x45 + x249 * x393 * x45)
    )
    result[11, 4] = numpy.sum(
        x228 * (x253 * x379 * x385 + x253 * x390 * x45 + x254 * x385 * x45)
    )
    result[11, 5] = numpy.sum(
        x227 * (x258 * x373 * x379 + x258 * x374 * x45 + x264 * x373 * x45)
    )
    result[11, 6] = numpy.sum(
        x217 * (x117 * x402 * x462 + x16 * x249 * x398 + x20 * x247 * x398)
    )
    result[11, 7] = numpy.sum(
        x228 * (x16 * x253 * x395 + x16 * x254 * x393 + x20 * x253 * x393)
    )
    result[11, 8] = numpy.sum(
        x228 * (x16 * x258 * x390 + x16 * x264 * x385 + x20 * x258 * x385)
    )
    result[11, 9] = numpy.sum(
        x217 * (x16 * x272 * x374 + x16 * x275 * x373 + x20 * x272 * x373)
    )
    result[11, 10] = numpy.sum(
        x131 * (x117 * x406 * x466 + x117 * x411 + x15 * x249 * x406)
    )
    result[11, 11] = numpy.sum(
        x217 * (x10 * x253 * x470 + x15 * x253 * x402 + x254 * x470)
    )
    result[11, 12] = numpy.sum(
        x227 * (x10 * x393 * x471 + x15 * x264 * x393 + x395 * x471)
    )
    result[11, 13] = numpy.sum(
        x217 * (x10 * x272 * x472 + x15 * x272 * x390 + x275 * x472)
    )
    result[11, 14] = numpy.sum(
        x131 * (x10 * x373 * x473 + x15 * x282 * x373 + x374 * x473)
    )
    result[12, 0] = numpy.sum(
        x162 * (x285 * x332 * x448 + x285 * x335 * x447 + x288 * x332 * x447)
    )
    result[12, 1] = numpy.sum(
        x227 * (x292 * x332 * x380 + x292 * x335 * x375 + x297 * x332 * x375)
    )
    result[12, 2] = numpy.sum(
        x227 * (x285 * x338 * x380 + x285 * x343 * x375 + x288 * x338 * x375)
    )
    result[12, 3] = numpy.sum(
        x304 * (x300 * x332 * x379 + x300 * x335 * x45 + x302 * x332 * x45)
    )
    result[12, 4] = numpy.sum(
        x305 * (x292 * x338 * x379 + x292 * x343 * x45 + x297 * x338 * x45)
    )
    result[12, 5] = numpy.sum(
        x304 * (x285 * x346 * x379 + x285 * x348 * x45 + x288 * x346 * x45)
    )
    result[12, 6] = numpy.sum(
        x227 * (x16 * x312 * x335 + x16 * x315 * x332 + x20 * x312 * x332)
    )
    result[12, 7] = numpy.sum(
        x305 * (x16 * x300 * x343 + x16 * x302 * x338 + x20 * x300 * x338)
    )
    result[12, 8] = numpy.sum(
        x305 * (x16 * x292 * x348 + x16 * x297 * x346 + x20 * x292 * x346)
    )
    result[12, 9] = numpy.sum(
        x227 * (x16 * x285 * x359 + x16 * x288 * x356 + x20 * x285 * x356)
    )
    result[12, 10] = numpy.sum(
        x162 * (x10 * x332 * x474 + x15 * x328 * x332 + x335 * x474)
    )
    result[12, 11] = numpy.sum(
        x227 * (x10 * x312 * x475 + x15 * x312 * x343 + x315 * x475)
    )
    result[12, 12] = numpy.sum(
        x304 * (x10 * x346 * x476 + x15 * x302 * x346 + x348 * x476)
    )
    result[12, 13] = numpy.sum(
        x227 * (x10 * x356 * x477 + x15 * x297 * x356 + x359 * x477)
    )
    result[12, 14] = numpy.sum(
        x162 * (x10 * x285 * x478 + x15 * x285 * x372 + x288 * x478)
    )
    result[13, 0] = numpy.sum(
        x131 * (x207 * x415 * x448 + x207 * x416 * x447 + x209 * x415 * x447)
    )
    result[13, 1] = numpy.sum(
        x217 * (x214 * x375 * x416 + x214 * x380 * x415 + x215 * x375 * x415)
    )
    result[13, 2] = numpy.sum(
        x217 * (x207 * x375 * x425 + x207 * x380 * x420 + x209 * x375 * x420)
    )
    result[13, 3] = numpy.sum(
        x227 * (x220 * x379 * x415 + x220 * x416 * x45 + x226 * x415 * x45)
    )
    result[13, 4] = numpy.sum(
        x228 * (x214 * x379 * x420 + x214 * x425 * x45 + x215 * x420 * x45)
    )
    result[13, 5] = numpy.sum(
        x227 * (x207 * x379 * x428 + x207 * x430 * x45 + x209 * x428 * x45)
    )
    result[13, 6] = numpy.sum(
        x217 * (x16 * x236 * x416 + x16 * x239 * x415 + x20 * x236 * x415)
    )
    result[13, 7] = numpy.sum(
        x228 * (x16 * x220 * x425 + x16 * x226 * x420 + x20 * x220 * x420)
    )
    result[13, 8] = numpy.sum(
        x228 * (x16 * x214 * x430 + x16 * x215 * x428 + x20 * x214 * x428)
    )
    result[13, 9] = numpy.sum(
        x217 * (x16 * x209 * x433 + x20 * x207 * x433 + x437 * x479 * x5)
    )
    result[13, 10] = numpy.sum(
        x131 * (x10 * x415 * x480 + x15 * x246 * x415 + x416 * x480)
    )
    result[13, 11] = numpy.sum(
        x217 * (x10 * x236 * x481 + x15 * x236 * x425 + x239 * x481)
    )
    result[13, 12] = numpy.sum(
        x227 * (x10 * x428 * x482 + x15 * x226 * x428 + x430 * x482)
    )
    result[13, 13] = numpy.sum(
        x217 * (x10 * x214 * x483 + x15 * x214 * x437 + x215 * x483)
    )
    result[13, 14] = numpy.sum(
        x131 * (x10 * x441 * x479 + x112 * x445 + x15 * x209 * x441)
    )
    result[14, 0] = numpy.sum(
        x121 * (x114 * x447 * x486 + x123 * x447 * x487 + x448 * x486)
    )
    result[14, 1] = numpy.sum(
        x131 * (x124 * x375 * x487 + x124 * x380 * x485 + x126 * x375 * x485)
    )
    result[14, 2] = numpy.sum(
        x131 * (x114 * x375 * x490 + x123 * x375 * x491 + x380 * x490)
    )
    result[14, 3] = numpy.sum(
        x162 * (x140 * x379 * x485 + x140 * x45 * x487 + x144 * x45 * x485)
    )
    result[14, 4] = numpy.sum(
        x164 * (x124 * x379 * x489 + x124 * x45 * x491 + x126 * x45 * x489)
    )
    result[14, 5] = numpy.sum(
        x162 * (x114 * x45 * x493 + x123 * x45 * x494 + x379 * x493)
    )
    result[14, 6] = numpy.sum(
        x131 * (x16 * x176 * x487 + x16 * x177 * x485 + x176 * x20 * x485)
    )
    result[14, 7] = numpy.sum(
        x164 * (x140 * x16 * x491 + x140 * x20 * x489 + x144 * x16 * x489)
    )
    result[14, 8] = numpy.sum(
        x164 * (x122 * x494 * x495 + x124 * x20 * x492 + x126 * x16 * x492)
    )
    result[14, 9] = numpy.sum(x131 * (x114 * x495 * x496 + x123 * x20 * x496 + x497 * x5))
    result[14, 10] = numpy.sum(
        x121 * (x10 * x195 * x498 + x15 * x195 * x487 + x196 * x498)
    )
    result[14, 11] = numpy.sum(
        x131 * (x10 * x176 * x499 + x15 * x176 * x491 + x177 * x499)
    )
    result[14, 12] = numpy.sum(
        x162 * (x10 * x140 * x500 + x140 * x15 * x494 + x144 * x500)
    )
    result[14, 13] = numpy.sum(
        x131 * (x10 * x122 * x413 * x496 + x122 * x497 + x126 * x15 * x496)
    )
    result[14, 14] = numpy.sum(
        x121
        * (
            x10 * x503
            + x114 * x503
            + x413
            * (
                x117 * x444
                - x18 * (-2.0 * ax * x502 + 3.0 * x363 + x501)
                + x2 * (7.0 * x368 + 3.0 * x369 + 3.0 * x371 + 4.0 * x435 + 4.0 * x436)
            )
        )
    )
    return result


kinetic3d = {
    (0, 0): kinetic3d_00,
    (0, 1): kinetic3d_01,
    (0, 2): kinetic3d_02,
    (0, 3): kinetic3d_03,
    (0, 4): kinetic3d_04,
    (1, 0): kinetic3d_10,
    (1, 1): kinetic3d_11,
    (1, 2): kinetic3d_12,
    (1, 3): kinetic3d_13,
    (1, 4): kinetic3d_14,
    (2, 0): kinetic3d_20,
    (2, 1): kinetic3d_21,
    (2, 2): kinetic3d_22,
    (2, 3): kinetic3d_23,
    (2, 4): kinetic3d_24,
    (3, 0): kinetic3d_30,
    (3, 1): kinetic3d_31,
    (3, 2): kinetic3d_32,
    (3, 3): kinetic3d_33,
    (3, 4): kinetic3d_34,
    (4, 0): kinetic3d_40,
    (4, 1): kinetic3d_41,
    (4, 2): kinetic3d_42,
    (4, 3): kinetic3d_43,
    (4, 4): kinetic3d_44,
}
