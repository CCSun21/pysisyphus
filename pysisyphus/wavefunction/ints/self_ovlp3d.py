"""
Molecular integrals over Gaussian basis functions generated by sympleints.
See https://github.com/eljost/sympleints for more information.

sympleints version: 0.1.dev3+g666ae1b.d20221114
symppy version: 1.10.1

sympleints was executed with the following arguments:
	lmax = 4
	lauxmax = 6
	write = False
	out_dir = devel_ints
	keys = ['sovlp']
	sph = False
	norm_pgto = True
	opt_basic = False
"""


import numpy


def self_ovlp3d_00(ax, da, A, bx, db, B):
    """Cartesian 3D (ss) self overlap.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)

    # 1 item(s)
    result[0, 0] = numpy.sum(
        2.828427124746191
        * da
        * db
        * x0**1.5
        * numpy.sqrt(ax**1.5)
        * numpy.sqrt(bx**1.5)
    )
    return result


def self_ovlp3d_11(ax, da, A, bx, db, B):
    """Cartesian 3D (pp) self overlap.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = 1.772453850905516 * numpy.sqrt(x0)
    x2 = 0.5 * x1 / (ax + bx)
    x3 = 6.383076486422924 * da * db * x0 * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**2.5)

    # 3 item(s)
    result[0, 0] = numpy.sum(x3 * (x1 * (x0 * (ax + bx) - 1.0) ** 2 * A[0] ** 2 + x2))
    result[0, 1] = numpy.sum(x3 * (x1 * (x0 * (ax + bx) - 1.0) ** 2 * A[1] ** 2 + x2))
    result[0, 2] = numpy.sum(x3 * (x1 * (x0 * (ax + bx) - 1.0) ** 2 * A[2] ** 2 + x2))
    return result


def self_ovlp3d_22(ax, da, A, bx, db, B):
    """Cartesian 3D (dd) self overlap.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = (x1 * (ax + bx) - 1.0) * A[0]
    x3 = numpy.sqrt(x1)
    x4 = 1.772453850905516 * x3
    x5 = x2**2 * x4
    x6 = x0 * x4
    x7 = 3.0 * x6
    x8 = x5 + x6
    x9 = 2.0 * x6
    x10 = da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**3.5)
    x11 = 8.510768648563898 * x1 * x10
    x12 = (x1 * (ax + bx) - 1.0) * A[1]
    x13 = x12**2 * x4
    x14 = x13 + x6
    x15 = 0.3183098861837907
    x16 = 45.25483399593905 * x10 * x15 * x3 * x8
    x17 = (x1 * (ax + bx) - 1.0) * A[2]
    x18 = x17**2 * x4
    x19 = x18 + x6

    # 6 item(s)
    result[0, 0] = numpy.sum(x11 * (x0 * (3.0 * x5 + x7) + x2**2 * (x8 + x9)))
    result[0, 1] = numpy.sum(x14 * x16)
    result[0, 2] = numpy.sum(x16 * x19)
    result[0, 3] = numpy.sum(x11 * (x0 * (3.0 * x13 + x7) + x12**2 * (x14 + x9)))
    result[0, 4] = numpy.sum(45.25483399593905 * x10 * x14 * x15 * x19 * x3)
    result[0, 5] = numpy.sum(x11 * (x0 * (3.0 * x18 + x7) + x17**2 * (x19 + x9)))
    return result


def self_ovlp3d_33(ax, da, A, bx, db, B):
    """Cartesian 3D (ff) self overlap.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = (x1 * (ax + bx) - 1.0) * A[0]
    x3 = numpy.sqrt(x1)
    x4 = 1.772453850905516 * x3
    x5 = x2**2 * x4
    x6 = x0 * x4
    x7 = 3.0 * x6
    x8 = x0 * (3.0 * x5 + x7)
    x9 = x5 + x6
    x10 = x2 * x9
    x11 = x2 * x6
    x12 = x2 * (x10 + 2.0 * x11)
    x13 = x12 + x8
    x14 = da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**4.5)
    x15 = 6.808614918851117 * x1 * x14
    x16 = (x1 * (ax + bx) - 1.0) * A[1]
    x17 = x16**2 * x4
    x18 = x17 + x6
    x19 = x14 * x18
    x20 = 19.20674807801826 * x3
    x21 = x13 * x20
    x22 = (x1 * (ax + bx) - 1.0) * A[2]
    x23 = x22**2 * x4
    x24 = x23 + x6
    x25 = x14 * x24
    x26 = x0 * (3.0 * x17 + x7)
    x27 = x16 * x18
    x28 = 2.0 * x6
    x29 = x16 * (x16 * x28 + x27)
    x30 = x26 + x29
    x31 = x20 * x30
    x32 = x14 * x9
    x33 = x0 * (3.0 * x23 + x7)
    x34 = x22 * x24
    x35 = x22 * (x22 * x28 + x34)
    x36 = x33 + x35
    x37 = x20 * x36
    x38 = 8.0 * x6

    # 10 item(s)
    result[0, 0] = numpy.sum(
        x15 * (5.0 * x0 * (x12 + x8) + x2 * (4.0 * x0 * (x10 + 2.0 * x11) + x13 * x2))
    )
    result[0, 1] = numpy.sum(x19 * x21)
    result[0, 2] = numpy.sum(x21 * x25)
    result[0, 3] = numpy.sum(x31 * x32)
    result[0, 4] = numpy.sum(32.50874159833138 * x19 * x24 * x9)
    result[0, 5] = numpy.sum(x32 * x37)
    result[0, 6] = numpy.sum(
        x15 * (5.0 * x0 * (x26 + x29) + x16 * (x0 * (x16 * x38 + 4.0 * x27) + x16 * x30))
    )
    result[0, 7] = numpy.sum(x25 * x31)
    result[0, 8] = numpy.sum(x19 * x37)
    result[0, 9] = numpy.sum(
        x15 * (5.0 * x0 * (x33 + x35) + x22 * (x0 * (x22 * x38 + 4.0 * x34) + x22 * x36))
    )
    return result


def self_ovlp3d_44(ax, da, A, bx, db, B):
    """Cartesian 3D (gg) self overlap.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 15), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = (x1 * (ax + bx) - 1.0) * A[0]
    x3 = numpy.sqrt(x1)
    x4 = 1.772453850905516 * x3
    x5 = x2**2 * x4
    x6 = x0 * x4
    x7 = 3.0 * x6
    x8 = x0 * (3.0 * x5 + x7)
    x9 = x5 + x6
    x10 = x2 * x9
    x11 = x2 * x6
    x12 = x2 * (x10 + 2.0 * x11)
    x13 = 5.0 * x0 * (x12 + x8)
    x14 = 4.0 * x0 * (x10 + 2.0 * x11)
    x15 = x12 + x8
    x16 = x15 * x2
    x17 = x2 * (x14 + x16)
    x18 = x13 + x17
    x19 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**5.5)
    x20 = 3.890637096486354 * x1 * x19
    x21 = (x1 * (ax + bx) - 1.0) * A[1]
    x22 = x21**2 * x4
    x23 = x22 + x6
    x24 = x19 * x23
    x25 = 0.3183098861837907 * x3
    x26 = 48.27182292900164 * x25
    x27 = x18 * x26
    x28 = (x1 * (ax + bx) - 1.0) * A[2]
    x29 = x28**2 * x4
    x30 = x29 + x6
    x31 = x19 * x30
    x32 = x0 * (3.0 * x22 + x7)
    x33 = x21 * x23
    x34 = 2.0 * x6
    x35 = x21 * (x21 * x34 + x33)
    x36 = x32 + x35
    x37 = 80.45303821500274 * x15 * x19 * x25
    x38 = 43.34498879777517
    x39 = x24 * x38
    x40 = x0 * (3.0 * x29 + x7)
    x41 = x28 * x30
    x42 = x28 * (x28 * x34 + x41)
    x43 = x40 + x42
    x44 = 5.0 * x0 * (x32 + x35)
    x45 = 8.0 * x6
    x46 = x0 * (x21 * x45 + 4.0 * x33)
    x47 = x21 * x36
    x48 = x21 * (x46 + x47)
    x49 = x44 + x48
    x50 = x26 * x49
    x51 = x19 * x9
    x52 = 5.0 * x0 * (x40 + x42)
    x53 = x0 * (x28 * x45 + 4.0 * x41)
    x54 = x28 * x43
    x55 = x28 * (x53 + x54)
    x56 = x52 + x55
    x57 = x26 * x56

    # 15 item(s)
    result[0, 0] = numpy.sum(
        x20 * (7.0 * x0 * (x13 + x17) + x2 * (6.0 * x0 * (x14 + x16) + x18 * x2))
    )
    result[0, 1] = numpy.sum(x24 * x27)
    result[0, 2] = numpy.sum(x27 * x31)
    result[0, 3] = numpy.sum(x36 * x37)
    result[0, 4] = numpy.sum(x15 * x30 * x39)
    result[0, 5] = numpy.sum(x37 * x43)
    result[0, 6] = numpy.sum(x50 * x51)
    result[0, 7] = numpy.sum(x31 * x36 * x38 * x9)
    result[0, 8] = numpy.sum(x39 * x43 * x9)
    result[0, 9] = numpy.sum(x51 * x57)
    result[0, 10] = numpy.sum(
        x20 * (7.0 * x0 * (x44 + x48) + x21 * (6.0 * x0 * (x46 + x47) + x21 * x49))
    )
    result[0, 11] = numpy.sum(x31 * x50)
    result[0, 12] = numpy.sum(80.45303821500274 * x19 * x25 * x36 * x43)
    result[0, 13] = numpy.sum(x24 * x57)
    result[0, 14] = numpy.sum(
        x20 * (7.0 * x0 * (x52 + x55) + x28 * (6.0 * x0 * (x53 + x54) + x28 * x56))
    )
    return result


self_ovlp3d = {
    (0, 0): self_ovlp3d_00,
    (1, 1): self_ovlp3d_11,
    (2, 2): self_ovlp3d_22,
    (3, 3): self_ovlp3d_33,
    (4, 4): self_ovlp3d_44,
}
