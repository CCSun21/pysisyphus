"""
Molecular integrals over Gaussian basis functions generated by sympleints.
See https://github.com/eljost/sympleints for more information.

sympleints version: 0.1.dev47+gf2d2a9c.d20230308
symppy version: 1.10.1

sympleints was executed with the following arguments:
	lmax = 4
	lauxmax = 6
	write = False
	out_dir = regen
	keys = ['ovlp', 'kin', 'dpm', 'qpm', 'dqpm']
	sph = False
	norm_pgto = True
	opt_basic = False
"""


import numpy


def ovlp3d_00(ax, da, A, bx, db, B):
    """Cartesian 3D (ss) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0

    # 1 item(s)
    result[0, 0] = numpy.sum(
        2.828427124746191
        * da
        * db
        * x0**1.5
        * numpy.sqrt(ax**1.5)
        * numpy.sqrt(bx**1.5)
        * numpy.exp(-x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2))
    )
    return result


def ovlp3d_01(ax, da, A, bx, db, B):
    """Cartesian 3D (sp) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = (
        5.656854249492381
        * da
        * db
        * x0**1.5
        * numpy.sqrt(ax**1.5)
        * numpy.sqrt(bx**2.5)
        * numpy.exp(-x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2))
    )

    # 3 item(s)
    result[0, 0] = numpy.sum(x2 * (x0 * (ax * A[0] + bx * B[0]) - B[0]))
    result[0, 1] = numpy.sum(x2 * (x0 * (ax * A[1] + bx * B[1]) - B[1]))
    result[0, 2] = numpy.sum(x2 * (x0 * (ax * A[2] + bx * B[2]) - B[2]))
    return result


def ovlp3d_02(ax, da, A, bx, db, B):
    """Cartesian 3D (sd) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = x0 * (ax * A[0] + bx * B[0]) - B[0]
    x2 = ax * bx * x0
    x3 = numpy.exp(-x2 * (A[0] - B[0]) ** 2)
    x4 = numpy.sqrt(x0)
    x5 = 1.772453850905516 * x4
    x6 = x3 * x5
    x7 = 0.5 / (ax + bx)
    x8 = numpy.exp(-x2 * (A[1] - B[1]) ** 2)
    x9 = numpy.exp(-x2 * (A[2] - B[2]) ** 2)
    x10 = numpy.sqrt(ax**1.5)
    x11 = numpy.sqrt(bx**3.5)
    x12 = da * db * x0 * x10 * x11 * x8 * x9
    x13 = 3.685270927694246
    x14 = x0 * (ax * A[1] + bx * B[1]) - B[1]
    x15 = 11.31370849898476 * x1 * x12 * x3 * x4
    x16 = x0 * (ax * A[2] + bx * B[2]) - B[2]
    x17 = x5 * x8
    x18 = da * db * x0 * x10 * x11 * x13 * x3
    x19 = x5 * x9

    # 6 item(s)
    result[0, 0] = numpy.sum(x12 * x13 * x6 * (x1**2 + x7))
    result[0, 1] = numpy.sum(x14 * x15)
    result[0, 2] = numpy.sum(x15 * x16)
    result[0, 3] = numpy.sum(x17 * x18 * x9 * (x14**2 + x7))
    result[0, 4] = numpy.sum(11.31370849898476 * x12 * x14 * x16 * x3 * x4)
    result[0, 5] = numpy.sum(x18 * x19 * x8 * (x16**2 + x7))
    return result


def ovlp3d_03(ax, da, A, bx, db, B):
    """Cartesian 3D (sf) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = numpy.exp(-x1 * (A[1] - B[1]) ** 2)
    x3 = x0 * (ax * A[0] + bx * B[0]) - B[0]
    x4 = numpy.exp(-x1 * (A[0] - B[0]) ** 2)
    x5 = numpy.sqrt(x0)
    x6 = 1.772453850905516 * x5
    x7 = x4 * x6
    x8 = 0.5 / (ax + bx)
    x9 = x7 * x8
    x10 = x3**2 * x7 + x9
    x11 = numpy.exp(-x1 * (A[2] - B[2]) ** 2)
    x12 = 0.5641895835477563
    x13 = numpy.sqrt(ax**1.5)
    x14 = numpy.sqrt(bx**4.5)
    x15 = da * db * x0 * x11 * x12 * x13 * x14
    x16 = 5.842373946721772 * x15
    x17 = x0 * (ax * A[1] + bx * B[1]) - B[1]
    x18 = 13.06394529484362 * x15
    x19 = x10 * x18 * x2
    x20 = x0 * (ax * A[2] + bx * B[2]) - B[2]
    x21 = x2 * x6
    x22 = x21 * x8
    x23 = x17**2 * x21 + x22
    x24 = x18 * x23 * x4
    x25 = da * db * x0 * x13 * x14 * x2 * x4
    x26 = x11 * x6
    x27 = x26 * x8
    x28 = x20**2 * x26 + x27
    x29 = x12 * x25
    x30 = 13.06394529484362 * x28 * x29

    # 10 item(s)
    result[0, 0] = numpy.sum(x16 * x2 * x3 * (x10 + 2.0 * x9))
    result[0, 1] = numpy.sum(x17 * x19)
    result[0, 2] = numpy.sum(x19 * x20)
    result[0, 3] = numpy.sum(x24 * x3)
    result[0, 4] = numpy.sum(22.62741699796953 * x11 * x17 * x20 * x25 * x3 * x5)
    result[0, 5] = numpy.sum(x3 * x30)
    result[0, 6] = numpy.sum(x16 * x17 * x4 * (2.0 * x22 + x23))
    result[0, 7] = numpy.sum(x20 * x24)
    result[0, 8] = numpy.sum(x17 * x30)
    result[0, 9] = numpy.sum(5.842373946721772 * x20 * x29 * (2.0 * x27 + x28))
    return result


def ovlp3d_04(ax, da, A, bx, db, B):
    """Cartesian 3D (sg) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 15), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = numpy.exp(-x1 * (A[1] - B[1]) ** 2)
    x3 = 0.5 / (ax + bx)
    x4 = x0 * (ax * A[0] + bx * B[0]) - B[0]
    x5 = numpy.exp(-x1 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x0)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x4**2 * x8
    x10 = x3 * x8
    x11 = x10 + x9
    x12 = x4 * (2.0 * x10 + x11)
    x13 = 0.5641895835477563
    x14 = numpy.exp(-x1 * (A[2] - B[2]) ** 2)
    x15 = da * db * numpy.sqrt(ax**1.5) * numpy.sqrt(bx**5.5)
    x16 = x14 * x15
    x17 = x0 * x13 * x16
    x18 = 4.416419579791068 * x17
    x19 = x0 * (ax * A[1] + bx * B[1]) - B[1]
    x20 = x19 * x2
    x21 = 11.68474789344354 * x17
    x22 = x12 * x21
    x23 = x0 * (ax * A[2] + bx * B[2]) - B[2]
    x24 = x2 * x7
    x25 = x19**2 * x24
    x26 = x24 * x3
    x27 = x25 + x26
    x28 = 0.3183098861837907
    x29 = 15.08494466531301 * x11 * x28 * x6
    x30 = 26.12789058968724 * x17 * x23
    x31 = x14 * x7
    x32 = x23**2 * x31
    x33 = x3 * x31
    x34 = x32 + x33
    x35 = x15 * x34
    x36 = x2 * x35
    x37 = x19 * (2.0 * x26 + x27)
    x38 = x21 * x37 * x5
    x39 = x27 * x5
    x40 = x0 * x13 * x5
    x41 = x23 * (2.0 * x33 + x34)
    x42 = x15 * x2 * x40
    x43 = 11.68474789344354 * x41 * x42

    # 15 item(s)
    result[0, 0] = numpy.sum(x18 * x2 * (x12 * x4 + 3.0 * x3 * (x10 + x9)))
    result[0, 1] = numpy.sum(x20 * x22)
    result[0, 2] = numpy.sum(x2 * x22 * x23)
    result[0, 3] = numpy.sum(x16 * x27 * x29)
    result[0, 4] = numpy.sum(x11 * x20 * x30)
    result[0, 5] = numpy.sum(x29 * x36)
    result[0, 6] = numpy.sum(x38 * x4)
    result[0, 7] = numpy.sum(x30 * x39 * x4)
    result[0, 8] = numpy.sum(26.12789058968724 * x19 * x36 * x4 * x40)
    result[0, 9] = numpy.sum(x4 * x43)
    result[0, 10] = numpy.sum(x18 * x5 * (x19 * x37 + 3.0 * x3 * (x25 + x26)))
    result[0, 11] = numpy.sum(x23 * x38)
    result[0, 12] = numpy.sum(15.08494466531301 * x28 * x35 * x39 * x6)
    result[0, 13] = numpy.sum(x19 * x43)
    result[0, 14] = numpy.sum(
        4.416419579791068 * x42 * (x23 * x41 + 3.0 * x3 * (x32 + x33))
    )
    return result


def ovlp3d_10(ax, da, A, bx, db, B):
    """Cartesian 3D (ps) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = (
        5.656854249492381
        * da
        * db
        * x0**1.5
        * numpy.sqrt(ax**2.5)
        * numpy.sqrt(bx**1.5)
        * numpy.exp(-x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2))
    )

    # 3 item(s)
    result[0, 0] = numpy.sum(x2 * (x0 * (ax * A[0] + bx * B[0]) - A[0]))
    result[1, 0] = numpy.sum(x2 * (x0 * (ax * A[1] + bx * B[1]) - A[1]))
    result[2, 0] = numpy.sum(x2 * (x0 * (ax * A[2] + bx * B[2]) - A[2]))
    return result


def ovlp3d_11(ax, da, A, bx, db, B):
    """Cartesian 3D (pp) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = numpy.exp(-x1 * (A[1] - B[1]) ** 2)
    x3 = numpy.exp(-x1 * (A[0] - B[0]) ** 2)
    x4 = numpy.sqrt(x0)
    x5 = 1.772453850905516 * x4
    x6 = 0.5 * x5 / (ax + bx)
    x7 = -x0 * (ax * A[0] + bx * B[0])
    x8 = -x7 - B[0]
    x9 = -x3 * (x7 + A[0])
    x10 = 0.5641895835477563
    x11 = numpy.exp(-x1 * (A[2] - B[2]) ** 2)
    x12 = numpy.sqrt(ax**2.5)
    x13 = numpy.sqrt(bx**2.5)
    x14 = 11.31370849898476 * da * db * x0 * x11 * x12 * x13
    x15 = x10 * x14
    x16 = x4 * x9
    x17 = -x0 * (ax * A[1] + bx * B[1])
    x18 = -x2 * (x17 + B[1])
    x19 = x14 * x18
    x20 = -x0 * (ax * A[2] + bx * B[2])
    x21 = -x11 * (x20 + B[2])
    x22 = 11.31370849898476 * da * db * x0 * x12 * x13
    x23 = -x17 - A[1]
    x24 = x23 * x4
    x25 = x2 * x3
    x26 = x14 * x25 * x8
    x27 = x22 * x25
    x28 = -x20 - A[2]
    x29 = x28 * x4

    # 9 item(s)
    result[0, 0] = numpy.sum(x15 * x2 * (x3 * x6 + x5 * x8 * x9))
    result[0, 1] = numpy.sum(x16 * x19)
    result[0, 2] = numpy.sum(x16 * x2 * x21 * x22)
    result[1, 0] = numpy.sum(x24 * x26)
    result[1, 1] = numpy.sum(x15 * x3 * (x18 * x23 * x5 + x2 * x6))
    result[1, 2] = numpy.sum(x21 * x24 * x27)
    result[2, 0] = numpy.sum(x26 * x29)
    result[2, 1] = numpy.sum(x19 * x29 * x3)
    result[2, 2] = numpy.sum(x10 * x27 * (x11 * x6 + x21 * x28 * x5))
    return result


def ovlp3d_12(ax, da, A, bx, db, B):
    """Cartesian 3D (pd) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = numpy.sqrt(x1)
    x3 = 1.772453850905516 * x2
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = ax * bx * x1
    x6 = numpy.exp(-x5 * (A[0] - B[0]) ** 2)
    x7 = -x6 * (x4 + A[0])
    x8 = x3 * x7
    x9 = -x4 - B[0]
    x10 = x3 * x6
    x11 = x0 * x10
    x12 = x11 + x8 * x9
    x13 = numpy.exp(-x5 * (A[1] - B[1]) ** 2)
    x14 = numpy.exp(-x5 * (A[2] - B[2]) ** 2)
    x15 = 0.5641895835477563
    x16 = numpy.sqrt(ax**2.5)
    x17 = numpy.sqrt(bx**3.5)
    x18 = da * db * x1 * x14 * x15 * x16 * x17
    x19 = 13.06394529484362 * x18
    x20 = x13 * x19
    x21 = -x1 * (ax * A[1] + bx * B[1])
    x22 = -x21 - B[1]
    x23 = 22.62741699796953 * x18
    x24 = x12 * x13 * x23
    x25 = -x1 * (ax * A[2] + bx * B[2])
    x26 = -x25 - B[2]
    x27 = x13 * x3
    x28 = x0 * x27
    x29 = x22**2 * x27 + x28
    x30 = da * db * x1 * x13 * x16 * x17
    x31 = x30 * x7
    x32 = 22.62741699796953 * x22
    x33 = x14 * x2
    x34 = x26 * x33
    x35 = x14 * x3
    x36 = x0 * x35
    x37 = x26**2 * x35 + x36
    x38 = 13.06394529484362 * x15
    x39 = -x21 - A[1]
    x40 = x20 * (x10 * x9**2 + x11)
    x41 = x27 * x39
    x42 = x22 * x41 + x28
    x43 = x23 * x42 * x6
    x44 = x30 * x6
    x45 = 22.62741699796953 * x44 * x9
    x46 = x19 * x6
    x47 = x38 * x44
    x48 = -x25 - A[2]
    x49 = x35 * x48
    x50 = x26 * x49 + x36
    x51 = x15 * x50

    # 18 item(s)
    result[0, 0] = numpy.sum(x20 * (x0 * (x10 * x9 + x8) + x12 * x9))
    result[0, 1] = numpy.sum(x22 * x24)
    result[0, 2] = numpy.sum(x24 * x26)
    result[0, 3] = numpy.sum(x19 * x29 * x7)
    result[0, 4] = numpy.sum(x31 * x32 * x34)
    result[0, 5] = numpy.sum(x31 * x37 * x38)
    result[1, 0] = numpy.sum(x39 * x40)
    result[1, 1] = numpy.sum(x43 * x9)
    result[1, 2] = numpy.sum(x34 * x39 * x45)
    result[1, 3] = numpy.sum(x46 * (x0 * (x22 * x27 + x41) + x22 * x42))
    result[1, 4] = numpy.sum(x26 * x43)
    result[1, 5] = numpy.sum(x37 * x39 * x47)
    result[2, 0] = numpy.sum(x40 * x48)
    result[2, 1] = numpy.sum(x22 * x33 * x45 * x48)
    result[2, 2] = numpy.sum(x45 * x51)
    result[2, 3] = numpy.sum(x29 * x46 * x48)
    result[2, 4] = numpy.sum(x32 * x44 * x51)
    result[2, 5] = numpy.sum(x47 * (x0 * (x26 * x35 + x49) + x26 * x50))
    return result


def ovlp3d_13(ax, da, A, bx, db, B):
    """Cartesian 3D (pf) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - B[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3**2 * x8
    x10 = x0 * x8
    x11 = -x2 - A[0]
    x12 = x11 * x8
    x13 = x12 * x3
    x14 = x3 * x8
    x15 = x10 + x13
    x16 = x0 * (x12 + x14) + x15 * x3
    x17 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x18 = 0.5641895835477563
    x19 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x20 = da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**4.5)
    x21 = x19 * x20
    x22 = x1 * x18 * x21
    x23 = 11.68474789344354 * x22
    x24 = x17 * x23
    x25 = -x1 * (ax * A[1] + bx * B[1])
    x26 = -x25 - B[1]
    x27 = x17 * x26
    x28 = 26.12789058968724 * x22
    x29 = x16 * x28
    x30 = -x1 * (ax * A[2] + bx * B[2])
    x31 = -x30 - B[2]
    x32 = x17 * x31
    x33 = x17 * x7
    x34 = x26**2 * x33
    x35 = x0 * x33
    x36 = x34 + x35
    x37 = 26.12789058968724 * x36
    x38 = 0.3183098861837907 * x6
    x39 = x15 * x38
    x40 = x22 * x27
    x41 = 45.25483399593905 * x31
    x42 = x17 * x20
    x43 = x19 * x7
    x44 = x31**2 * x43
    x45 = x0 * x43
    x46 = x44 + x45
    x47 = 26.12789058968724 * x46
    x48 = x42 * x47
    x49 = x23 * x5
    x50 = x26 * x49 * (2.0 * x35 + x36)
    x51 = x31 * x5
    x52 = x22 * x37
    x53 = x1 * x18 * x5
    x54 = x48 * x53
    x55 = x42 * x53
    x56 = 11.68474789344354 * x55
    x57 = x31 * x56 * (2.0 * x45 + x46)
    x58 = -x25 - A[1]
    x59 = x10 + x9
    x60 = x24 * (2.0 * x0 * x14 + x3 * x59)
    x61 = x33 * x58
    x62 = x26 * x61
    x63 = x35 + x62
    x64 = x38 * x63
    x65 = 26.12789058968724 * x59
    x66 = x3 * x5
    x67 = x0 * (x26 * x33 + x61) + x26 * x63
    x68 = x28 * x67
    x69 = x20 * x5
    x70 = -x30 - A[2]
    x71 = x43 * x70
    x72 = x31 * x71
    x73 = x45 + x72
    x74 = x38 * x73
    x75 = x3 * x55
    x76 = x0 * (x31 * x43 + x71) + x31 * x73
    x77 = 26.12789058968724 * x76

    # 30 item(s)
    result[0, 0] = numpy.sum(x24 * (x0 * (3.0 * x10 + 2.0 * x13 + x9) + x16 * x3))
    result[0, 1] = numpy.sum(x27 * x29)
    result[0, 2] = numpy.sum(x29 * x32)
    result[0, 3] = numpy.sum(x21 * x37 * x39)
    result[0, 4] = numpy.sum(x15 * x40 * x41)
    result[0, 5] = numpy.sum(x39 * x48)
    result[0, 6] = numpy.sum(x11 * x50)
    result[0, 7] = numpy.sum(x11 * x51 * x52)
    result[0, 8] = numpy.sum(x11 * x26 * x54)
    result[0, 9] = numpy.sum(x11 * x57)
    result[1, 0] = numpy.sum(x58 * x60)
    result[1, 1] = numpy.sum(x21 * x64 * x65)
    result[1, 2] = numpy.sum(x22 * x32 * x58 * x65)
    result[1, 3] = numpy.sum(x66 * x68)
    result[1, 4] = numpy.sum(x22 * x41 * x63 * x66)
    result[1, 5] = numpy.sum(x3 * x54 * x58)
    result[1, 6] = numpy.sum(x49 * (x0 * (x34 + 3.0 * x35 + 2.0 * x62) + x26 * x67))
    result[1, 7] = numpy.sum(x51 * x68)
    result[1, 8] = numpy.sum(x47 * x64 * x69)
    result[1, 9] = numpy.sum(x57 * x58)
    result[2, 0] = numpy.sum(x60 * x70)
    result[2, 1] = numpy.sum(x40 * x65 * x70)
    result[2, 2] = numpy.sum(x42 * x65 * x74)
    result[2, 3] = numpy.sum(x52 * x66 * x70)
    result[2, 4] = numpy.sum(45.25483399593905 * x26 * x73 * x75)
    result[2, 5] = numpy.sum(x75 * x77)
    result[2, 6] = numpy.sum(x50 * x70)
    result[2, 7] = numpy.sum(x37 * x69 * x74)
    result[2, 8] = numpy.sum(x26 * x55 * x77)
    result[2, 9] = numpy.sum(x56 * (x0 * (x44 + 3.0 * x45 + 2.0 * x72) + x31 * x76))
    return result


def ovlp3d_14(ax, da, A, bx, db, B):
    """Cartesian 3D (pg) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 15), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3 * x8
    x10 = -x2 - B[0]
    x11 = x0 * (x10 * x8 + x9)
    x12 = x0 * x8
    x13 = x10 * x9
    x14 = x12 + x13
    x15 = x10 * x14
    x16 = x10**2 * x8
    x17 = x12 + x16
    x18 = x10 * (2.0 * x12 + x17)
    x19 = 3.0 * x12
    x20 = x11 + x15
    x21 = x0 * (2.0 * x13 + x16 + x19) + x10 * x20
    x22 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x23 = 0.5641895835477563
    x24 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x25 = da * db * numpy.sqrt(ax**2.5) * numpy.sqrt(bx**5.5)
    x26 = x24 * x25
    x27 = x1 * x23 * x26
    x28 = 8.832839159582136 * x27
    x29 = x22 * x28
    x30 = -x1 * (ax * A[1] + bx * B[1])
    x31 = -x30 - B[1]
    x32 = x22 * x31
    x33 = 23.36949578688709 * x27
    x34 = x21 * x33
    x35 = -x1 * (ax * A[2] + bx * B[2])
    x36 = -x35 - B[2]
    x37 = x22 * x36
    x38 = 30.16988933062603 * x20
    x39 = x22 * x7
    x40 = x31**2 * x39
    x41 = x0 * x39
    x42 = x40 + x41
    x43 = 0.3183098861837907 * x6
    x44 = x26 * x43
    x45 = x42 * x44
    x46 = 52.25578117937447 * x27 * x36
    x47 = x24 * x7
    x48 = x36**2 * x47
    x49 = x0 * x47
    x50 = x48 + x49
    x51 = x25 * x43
    x52 = x22 * x51
    x53 = x50 * x52
    x54 = x31 * (2.0 * x41 + x42)
    x55 = 23.36949578688709 * x14
    x56 = 52.25578117937447 * x14
    x57 = x36 * (2.0 * x49 + x50)
    x58 = 3.0 * x41
    x59 = x28 * x5
    x60 = x59 * (x0 * (3.0 * x40 + x58) + x31 * x54)
    x61 = x33 * x5
    x62 = x54 * x61
    x63 = x5 * x51
    x64 = x50 * x63
    x65 = x1 * x22 * x23 * x25 * x5
    x66 = 23.36949578688709 * x65
    x67 = x57 * x66
    x68 = 3.0 * x49
    x69 = 8.832839159582136 * x65
    x70 = x69 * (x0 * (3.0 * x48 + x68) + x36 * x57)
    x71 = -x30 - A[1]
    x72 = x29 * (x0 * (3.0 * x16 + x19) + x10 * x18)
    x73 = x39 * x71
    x74 = x31 * x73
    x75 = x41 + x74
    x76 = 23.36949578688709 * x75
    x77 = x18 * x33
    x78 = x0 * (x31 * x39 + x73)
    x79 = x31 * x75
    x80 = x78 + x79
    x81 = 30.16988933062603 * x80
    x82 = x17 * x44
    x83 = 52.25578117937447 * x75
    x84 = 30.16988933062603 * x17
    x85 = x0 * (x40 + x58 + 2.0 * x74) + x31 * x80
    x86 = x61 * x85
    x87 = -x35 - A[2]
    x88 = x47 * x87
    x89 = x36 * x88
    x90 = x49 + x89
    x91 = 23.36949578688709 * x90
    x92 = x17 * x52
    x93 = 52.25578117937447 * x90
    x94 = x0 * (x36 * x47 + x88)
    x95 = x36 * x90
    x96 = x94 + x95
    x97 = 30.16988933062603 * x96
    x98 = x42 * x63
    x99 = x0 * (x48 + x68 + 2.0 * x89) + x36 * x96
    x100 = x66 * x99

    # 45 item(s)
    result[0, 0] = numpy.sum(x29 * (x0 * (3.0 * x11 + 3.0 * x15 + x18) + x10 * x21))
    result[0, 1] = numpy.sum(x32 * x34)
    result[0, 2] = numpy.sum(x34 * x37)
    result[0, 3] = numpy.sum(x38 * x45)
    result[0, 4] = numpy.sum(x20 * x32 * x46)
    result[0, 5] = numpy.sum(x38 * x53)
    result[0, 6] = numpy.sum(x44 * x54 * x55)
    result[0, 7] = numpy.sum(x36 * x45 * x56)
    result[0, 8] = numpy.sum(x31 * x53 * x56)
    result[0, 9] = numpy.sum(x52 * x55 * x57)
    result[0, 10] = numpy.sum(x3 * x60)
    result[0, 11] = numpy.sum(x3 * x36 * x62)
    result[0, 12] = numpy.sum(30.16988933062603 * x3 * x42 * x64)
    result[0, 13] = numpy.sum(x3 * x31 * x67)
    result[0, 14] = numpy.sum(x3 * x70)
    result[1, 0] = numpy.sum(x71 * x72)
    result[1, 1] = numpy.sum(x18 * x44 * x76)
    result[1, 2] = numpy.sum(x37 * x71 * x77)
    result[1, 3] = numpy.sum(x81 * x82)
    result[1, 4] = numpy.sum(x36 * x82 * x83)
    result[1, 5] = numpy.sum(x53 * x71 * x84)
    result[1, 6] = numpy.sum(x10 * x86)
    result[1, 7] = numpy.sum(x10 * x46 * x5 * x80)
    result[1, 8] = numpy.sum(x10 * x64 * x83)
    result[1, 9] = numpy.sum(x10 * x67 * x71)
    result[1, 10] = numpy.sum(x59 * (x0 * (x54 + 3.0 * x78 + 3.0 * x79) + x31 * x85))
    result[1, 11] = numpy.sum(x36 * x86)
    result[1, 12] = numpy.sum(x64 * x81)
    result[1, 13] = numpy.sum(x57 * x63 * x76)
    result[1, 14] = numpy.sum(x70 * x71)
    result[2, 0] = numpy.sum(x72 * x87)
    result[2, 1] = numpy.sum(x32 * x77 * x87)
    result[2, 2] = numpy.sum(x18 * x52 * x91)
    result[2, 3] = numpy.sum(x45 * x84 * x87)
    result[2, 4] = numpy.sum(x31 * x92 * x93)
    result[2, 5] = numpy.sum(x92 * x97)
    result[2, 6] = numpy.sum(x10 * x62 * x87)
    result[2, 7] = numpy.sum(x10 * x93 * x98)
    result[2, 8] = numpy.sum(52.25578117937447 * x10 * x31 * x65 * x96)
    result[2, 9] = numpy.sum(x10 * x100)
    result[2, 10] = numpy.sum(x60 * x87)
    result[2, 11] = numpy.sum(x54 * x63 * x91)
    result[2, 12] = numpy.sum(x97 * x98)
    result[2, 13] = numpy.sum(x100 * x31)
    result[2, 14] = numpy.sum(x69 * (x0 * (x57 + 3.0 * x94 + 3.0 * x95) + x36 * x99))
    return result


def ovlp3d_20(ax, da, A, bx, db, B):
    """Cartesian 3D (ds) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = x0 * (ax * A[0] + bx * B[0]) - A[0]
    x2 = ax * bx * x0
    x3 = numpy.exp(-x2 * (A[0] - B[0]) ** 2)
    x4 = numpy.sqrt(x0)
    x5 = 1.772453850905516 * x4
    x6 = x3 * x5
    x7 = 0.5 / (ax + bx)
    x8 = numpy.exp(-x2 * (A[1] - B[1]) ** 2)
    x9 = numpy.exp(-x2 * (A[2] - B[2]) ** 2)
    x10 = numpy.sqrt(ax**3.5)
    x11 = numpy.sqrt(bx**1.5)
    x12 = da * db * x0 * x10 * x11 * x8 * x9
    x13 = 3.685270927694246
    x14 = x0 * (ax * A[1] + bx * B[1]) - A[1]
    x15 = 11.31370849898476 * x1 * x12 * x3 * x4
    x16 = x0 * (ax * A[2] + bx * B[2]) - A[2]
    x17 = x5 * x8
    x18 = da * db * x0 * x10 * x11 * x13 * x3
    x19 = x5 * x9

    # 6 item(s)
    result[0, 0] = numpy.sum(x12 * x13 * x6 * (x1**2 + x7))
    result[1, 0] = numpy.sum(x14 * x15)
    result[2, 0] = numpy.sum(x15 * x16)
    result[3, 0] = numpy.sum(x17 * x18 * x9 * (x14**2 + x7))
    result[4, 0] = numpy.sum(11.31370849898476 * x12 * x14 * x16 * x3 * x4)
    result[5, 0] = numpy.sum(x18 * x19 * x8 * (x16**2 + x7))
    return result


def ovlp3d_21(ax, da, A, bx, db, B):
    """Cartesian 3D (dp) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = numpy.sqrt(x1)
    x3 = 1.772453850905516 * x2
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = -x4 - A[0]
    x6 = ax * bx * x1
    x7 = numpy.exp(-x6 * (A[0] - B[0]) ** 2)
    x8 = x5 * x7
    x9 = x3 * x8
    x10 = -x4 - B[0]
    x11 = x3 * x7
    x12 = x0 * x11
    x13 = x10 * x9 + x12
    x14 = numpy.exp(-x6 * (A[1] - B[1]) ** 2)
    x15 = numpy.exp(-x6 * (A[2] - B[2]) ** 2)
    x16 = 0.5641895835477563
    x17 = numpy.sqrt(ax**3.5)
    x18 = numpy.sqrt(bx**2.5)
    x19 = da * db * x1 * x15 * x16 * x17 * x18
    x20 = 13.06394529484362 * x19
    x21 = x14 * x20
    x22 = -x1 * (ax * A[1] + bx * B[1])
    x23 = -x22 - B[1]
    x24 = x21 * (x11 * x5**2 + x12)
    x25 = -x1 * (ax * A[2] + bx * B[2])
    x26 = -x25 - B[2]
    x27 = -x22 - A[1]
    x28 = 22.62741699796953 * x19
    x29 = x13 * x14 * x28
    x30 = x0 * x3
    x31 = x14 * x30
    x32 = x14 * x3
    x33 = x27 * x32
    x34 = x23 * x33 + x31
    x35 = x28 * x34
    x36 = da * db * x1 * x14 * x17 * x18
    x37 = 22.62741699796953 * x15 * x2 * x36 * x8
    x38 = -x25 - A[2]
    x39 = x16 * x36
    x40 = x15 * x30
    x41 = x15 * x3
    x42 = x38 * x41
    x43 = x26 * x42 + x40
    x44 = 22.62741699796953 * x43
    x45 = x20 * x7
    x46 = x45 * (x27**2 * x32 + x31)
    x47 = x38 * x7
    x48 = x39 * x7
    x49 = 13.06394529484362 * x48
    x50 = x49 * (x38**2 * x41 + x40)

    # 18 item(s)
    result[0, 0] = numpy.sum(x21 * (x0 * (x10 * x11 + x9) + x13 * x5))
    result[0, 1] = numpy.sum(x23 * x24)
    result[0, 2] = numpy.sum(x24 * x26)
    result[1, 0] = numpy.sum(x27 * x29)
    result[1, 1] = numpy.sum(x35 * x8)
    result[1, 2] = numpy.sum(x26 * x27 * x37)
    result[2, 0] = numpy.sum(x29 * x38)
    result[2, 1] = numpy.sum(x23 * x37 * x38)
    result[2, 2] = numpy.sum(x39 * x44 * x8)
    result[3, 0] = numpy.sum(x10 * x46)
    result[3, 1] = numpy.sum(x45 * (x0 * (x23 * x32 + x33) + x27 * x34))
    result[3, 2] = numpy.sum(x26 * x46)
    result[4, 0] = numpy.sum(22.62741699796953 * x10 * x15 * x2 * x27 * x36 * x47)
    result[4, 1] = numpy.sum(x35 * x47)
    result[4, 2] = numpy.sum(x27 * x44 * x48)
    result[5, 0] = numpy.sum(x10 * x50)
    result[5, 1] = numpy.sum(x23 * x50)
    result[5, 2] = numpy.sum(x49 * (x0 * (x26 * x41 + x42) + x38 * x43))
    return result


def ovlp3d_22(ax, da, A, bx, db, B):
    """Cartesian 3D (dd) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - B[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3**2 * x8
    x10 = x0 * x8
    x11 = -x2 - A[0]
    x12 = x11 * x8
    x13 = x12 * x3
    x14 = x0 * (x12 + x3 * x8)
    x15 = x10 + x13
    x16 = x14 + x15 * x3
    x17 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x18 = da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**3.5)
    x19 = x17 * x18
    x20 = 15.08494466531302 * x19
    x21 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x22 = 0.5641895835477563 * x1
    x23 = x21 * x22
    x24 = -x1 * (ax * A[1] + bx * B[1])
    x25 = -x24 - B[1]
    x26 = 26.12789058968724 * x19
    x27 = x23 * x26
    x28 = x27 * (x11 * x15 + x14)
    x29 = -x1 * (ax * A[2] + bx * B[2])
    x30 = -x29 - B[2]
    x31 = x21 * x7
    x32 = x25**2 * x31
    x33 = x0 * x31
    x34 = x32 + x33
    x35 = x10 + x11**2 * x8
    x36 = 0.3183098861837907 * x6
    x37 = x35 * x36
    x38 = x18 * x21
    x39 = x17 * x7
    x40 = x30**2 * x39
    x41 = x0 * x39
    x42 = x40 + x41
    x43 = 15.08494466531302 * x42
    x44 = -x24 - A[1]
    x45 = x16 * x27
    x46 = 45.25483399593905 * x15 * x36
    x47 = x31 * x44
    x48 = x25 * x47
    x49 = x33 + x48
    x50 = x19 * x49
    x51 = 45.25483399593905 * x30
    x52 = x15 * x19 * x23
    x53 = x0 * (x25 * x31 + x47)
    x54 = x25 * x49 + x53
    x55 = x22 * x5
    x56 = x26 * x55
    x57 = x54 * x56
    x58 = x50 * x55
    x59 = x18 * x5
    x60 = x23 * x59
    x61 = 26.12789058968724 * x60
    x62 = -x29 - A[2]
    x63 = 45.25483399593905 * x62
    x64 = x39 * x62
    x65 = x30 * x64
    x66 = x41 + x65
    x67 = 45.25483399593905 * x66
    x68 = x60 * x67
    x69 = x0 * (x30 * x39 + x64)
    x70 = x30 * x66 + x69
    x71 = x61 * x70
    x72 = x10 + x9
    x73 = x31 * x44**2 + x33
    x74 = x36 * x73
    x75 = x56 * (x44 * x49 + x53)
    x76 = x36 * x59
    x77 = x39 * x62**2 + x41
    x78 = 15.08494466531302 * x77
    x79 = x61 * (x62 * x66 + x69)

    # 36 item(s)
    result[0, 0] = numpy.sum(x20 * x23 * (x0 * (3.0 * x10 + 2.0 * x13 + x9) + x11 * x16))
    result[0, 1] = numpy.sum(x25 * x28)
    result[0, 2] = numpy.sum(x28 * x30)
    result[0, 3] = numpy.sum(x20 * x34 * x37)
    result[0, 4] = numpy.sum(x25 * x27 * x30 * x35)
    result[0, 5] = numpy.sum(x37 * x38 * x43)
    result[1, 0] = numpy.sum(x44 * x45)
    result[1, 1] = numpy.sum(x46 * x50)
    result[1, 2] = numpy.sum(x44 * x51 * x52)
    result[1, 3] = numpy.sum(x11 * x57)
    result[1, 4] = numpy.sum(x11 * x51 * x58)
    result[1, 5] = numpy.sum(x11 * x42 * x44 * x61)
    result[2, 0] = numpy.sum(x45 * x62)
    result[2, 1] = numpy.sum(x25 * x52 * x63)
    result[2, 2] = numpy.sum(x38 * x46 * x66)
    result[2, 3] = numpy.sum(x11 * x34 * x56 * x62)
    result[2, 4] = numpy.sum(x11 * x25 * x68)
    result[2, 5] = numpy.sum(x11 * x71)
    result[3, 0] = numpy.sum(x20 * x72 * x74)
    result[3, 1] = numpy.sum(x3 * x75)
    result[3, 2] = numpy.sum(x3 * x30 * x56 * x73)
    result[3, 3] = numpy.sum(x20 * x55 * (x0 * (x32 + 3.0 * x33 + 2.0 * x48) + x44 * x54))
    result[3, 4] = numpy.sum(x30 * x75)
    result[3, 5] = numpy.sum(x43 * x59 * x74)
    result[4, 0] = numpy.sum(x27 * x44 * x62 * x72)
    result[4, 1] = numpy.sum(x3 * x58 * x63)
    result[4, 2] = numpy.sum(x3 * x44 * x68)
    result[4, 3] = numpy.sum(x57 * x62)
    result[4, 4] = numpy.sum(x49 * x67 * x76)
    result[4, 5] = numpy.sum(x44 * x71)
    result[5, 0] = numpy.sum(x36 * x38 * x72 * x78)
    result[5, 1] = numpy.sum(x25 * x3 * x61 * x77)
    result[5, 2] = numpy.sum(x3 * x79)
    result[5, 3] = numpy.sum(x34 * x76 * x78)
    result[5, 4] = numpy.sum(x25 * x79)
    result[5, 5] = numpy.sum(
        15.08494466531302 * x60 * (x0 * (x40 + 3.0 * x41 + 2.0 * x65) + x62 * x70)
    )
    return result


def ovlp3d_23(ax, da, A, bx, db, B):
    """Cartesian 3D (df) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x0 * x8
    x10 = -x2 - B[0]
    x11 = x3 * x8
    x12 = x10 * x11
    x13 = x12 + x9
    x14 = x13 * x3
    x15 = x10 * x13
    x16 = x0 * (x10 * x8 + x11)
    x17 = x10**2 * x8
    x18 = x0 * (2.0 * x12 + x17 + 3.0 * x9)
    x19 = x15 + x16
    x20 = x18 + x19 * x3
    x21 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x22 = da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**4.5)
    x23 = x21 * x22
    x24 = 13.49238468338508 * x23
    x25 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x26 = 0.5641895835477563 * x1
    x27 = x25 * x26
    x28 = -x1 * (ax * A[1] + bx * B[1])
    x29 = -x28 - B[1]
    x30 = x27 * x29
    x31 = 30.16988933062603 * x23
    x32 = x20 * x31
    x33 = -x1 * (ax * A[2] + bx * B[2])
    x34 = -x33 - B[2]
    x35 = x27 * x34
    x36 = x14 + x16
    x37 = x25 * x7
    x38 = x29**2 * x37
    x39 = x0 * x37
    x40 = x38 + x39
    x41 = 0.3183098861837907 * x6
    x42 = x40 * x41
    x43 = x31 * x42
    x44 = 52.25578117937447 * x23 * x34
    x45 = x22 * x41
    x46 = x25 * x45
    x47 = x21 * x7
    x48 = x34**2 * x47
    x49 = x0 * x47
    x50 = x48 + x49
    x51 = 30.16988933062603 * x50
    x52 = x46 * x51
    x53 = x29 * (2.0 * x39 + x40)
    x54 = x3**2 * x8 + x9
    x55 = x24 * x41
    x56 = x34 * (2.0 * x49 + x50)
    x57 = 13.49238468338508 * x56
    x58 = -x28 - A[1]
    x59 = 23.36949578688709 * x23
    x60 = x27 * x59 * (x10 * x19 + x18)
    x61 = 52.25578117937447 * x19
    x62 = x37 * x58
    x63 = x29 * x62
    x64 = x39 + x63
    x65 = x23 * x41
    x66 = x64 * x65
    x67 = x0 * (x29 * x37 + x62)
    x68 = x29 * x64
    x69 = x67 + x68
    x70 = 52.25578117937447 * x13
    x71 = 90.5096679918781 * x13
    x72 = x46 * x70
    x73 = x26 * x5
    x74 = x3 * x73
    x75 = x0 * (x38 + 3.0 * x39 + 2.0 * x63)
    x76 = x59 * (x29 * x69 + x75)
    x77 = x45 * x5
    x78 = 52.25578117937447 * x77
    x79 = x64 * x78
    x80 = x22 * x5
    x81 = x27 * x80
    x82 = -x33 - A[2]
    x83 = x23 * x82
    x84 = x47 * x82
    x85 = x34 * x84
    x86 = x49 + x85
    x87 = x46 * x86
    x88 = x0 * (x34 * x47 + x84)
    x89 = x34 * x86
    x90 = x88 + x89
    x91 = x59 * x82
    x92 = x42 * x80
    x93 = 52.25578117937447 * x3
    x94 = x29 * x81
    x95 = x0 * (x48 + 3.0 * x49 + 2.0 * x85)
    x96 = 23.36949578688709 * x81 * (x34 * x90 + x95)
    x97 = x17 + x9
    x98 = x10 * (2.0 * x9 + x97)
    x99 = x37 * x58**2 + x39
    x100 = x58 * x64
    x101 = x100 + x67
    x102 = x31 * x41 * x97
    x103 = x10 * x73
    x104 = x58 * x69 + x75
    x105 = x104 * x31
    x106 = x51 * x77
    x107 = 52.25578117937447 * x97
    x108 = x10 * x81
    x109 = 52.25578117937447 * x108
    x110 = x47 * x82**2 + x49
    x111 = 13.49238468338508 * x110
    x112 = x46 * x97
    x113 = 30.16988933062603 * x110
    x114 = x82 * x86
    x115 = x114 + x88
    x116 = 30.16988933062603 * x115
    x117 = x82 * x90 + x95
    x118 = 30.16988933062603 * x117

    # 60 item(s)
    result[0, 0] = numpy.sum(x24 * x27 * (2.0 * x0 * (x14 + x15 + 2.0 * x16) + x10 * x20))
    result[0, 1] = numpy.sum(x30 * x32)
    result[0, 2] = numpy.sum(x32 * x35)
    result[0, 3] = numpy.sum(x36 * x43)
    result[0, 4] = numpy.sum(x30 * x36 * x44)
    result[0, 5] = numpy.sum(x36 * x52)
    result[0, 6] = numpy.sum(x53 * x54 * x55)
    result[0, 7] = numpy.sum(x34 * x43 * x54)
    result[0, 8] = numpy.sum(x29 * x52 * x54)
    result[0, 9] = numpy.sum(x46 * x54 * x57)
    result[1, 0] = numpy.sum(x58 * x60)
    result[1, 1] = numpy.sum(x61 * x66)
    result[1, 2] = numpy.sum(x23 * x35 * x58 * x61)
    result[1, 3] = numpy.sum(x65 * x69 * x70)
    result[1, 4] = numpy.sum(x34 * x66 * x71)
    result[1, 5] = numpy.sum(x50 * x58 * x72)
    result[1, 6] = numpy.sum(x74 * x76)
    result[1, 7] = numpy.sum(x44 * x69 * x74)
    result[1, 8] = numpy.sum(x3 * x50 * x79)
    result[1, 9] = numpy.sum(23.36949578688709 * x3 * x56 * x58 * x81)
    result[2, 0] = numpy.sum(x60 * x82)
    result[2, 1] = numpy.sum(x30 * x61 * x83)
    result[2, 2] = numpy.sum(x61 * x87)
    result[2, 3] = numpy.sum(x42 * x70 * x83)
    result[2, 4] = numpy.sum(x29 * x71 * x87)
    result[2, 5] = numpy.sum(x72 * x90)
    result[2, 6] = numpy.sum(x53 * x74 * x91)
    result[2, 7] = numpy.sum(x86 * x92 * x93)
    result[2, 8] = numpy.sum(x90 * x93 * x94)
    result[2, 9] = numpy.sum(x3 * x96)
    result[3, 0] = numpy.sum(x55 * x98 * x99)
    result[3, 1] = numpy.sum(x101 * x102)
    result[3, 2] = numpy.sum(x102 * x34 * x99)
    result[3, 3] = numpy.sum(x103 * x105)
    result[3, 4] = numpy.sum(x101 * x103 * x44)
    result[3, 5] = numpy.sum(x10 * x106 * x99)
    result[3, 6] = numpy.sum(
        x24 * x73 * (2.0 * x0 * (x100 + 2.0 * x67 + x68) + x104 * x29)
    )
    result[3, 7] = numpy.sum(x105 * x34 * x73)
    result[3, 8] = numpy.sum(x101 * x106)
    result[3, 9] = numpy.sum(x57 * x77 * x99)
    result[4, 0] = numpy.sum(x27 * x58 * x91 * x98)
    result[4, 1] = numpy.sum(x107 * x66 * x82)
    result[4, 2] = numpy.sum(x107 * x58 * x87)
    result[4, 3] = numpy.sum(52.25578117937447 * x103 * x69 * x83)
    result[4, 4] = numpy.sum(90.5096679918781 * x10 * x64 * x77 * x86)
    result[4, 5] = numpy.sum(x109 * x58 * x90)
    result[4, 6] = numpy.sum(x73 * x76 * x82)
    result[4, 7] = numpy.sum(x69 * x78 * x86)
    result[4, 8] = numpy.sum(x79 * x90)
    result[4, 9] = numpy.sum(x58 * x96)
    result[5, 0] = numpy.sum(x111 * x46 * x98)
    result[5, 1] = numpy.sum(x112 * x113 * x29)
    result[5, 2] = numpy.sum(x112 * x116)
    result[5, 3] = numpy.sum(x10 * x113 * x92)
    result[5, 4] = numpy.sum(x109 * x115 * x29)
    result[5, 5] = numpy.sum(x108 * x118)
    result[5, 6] = numpy.sum(x111 * x53 * x77)
    result[5, 7] = numpy.sum(x116 * x92)
    result[5, 8] = numpy.sum(x118 * x94)
    result[5, 9] = numpy.sum(
        13.49238468338508 * x81 * (2.0 * x0 * (x114 + 2.0 * x88 + x89) + x117 * x34)
    )
    return result


def ovlp3d_24(ax, da, A, bx, db, B):
    """Cartesian 3D (dg) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 15), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - B[0]
    x4 = numpy.sqrt(x1)
    x5 = 1.772453850905516 * x4
    x6 = -x2 - A[0]
    x7 = ax * bx * x1
    x8 = numpy.exp(-x7 * (A[0] - B[0]) ** 2)
    x9 = x6 * x8
    x10 = x5 * x9
    x11 = x5 * x8
    x12 = x11 * x3
    x13 = x0 * (x10 + x12)
    x14 = x0 * x11
    x15 = x10 * x3
    x16 = x14 + x15
    x17 = x16 * x3
    x18 = x13 + x17
    x19 = x18 * x3
    x20 = x18 * x6
    x21 = x11 * x3**2
    x22 = 3.0 * x14
    x23 = x0 * (2.0 * x15 + x21 + x22)
    x24 = x16 * x6
    x25 = x20 + x23
    x26 = 2.0 * x0 * (2.0 * x13 + x17 + x24) + x25 * x3
    x27 = numpy.exp(-x7 * (A[2] - B[2]) ** 2)
    x28 = da * db * numpy.sqrt(ax**3.5) * numpy.sqrt(bx**5.5)
    x29 = x27 * x28
    x30 = 10.19928413298683 * x29
    x31 = numpy.exp(-x7 * (A[1] - B[1]) ** 2)
    x32 = 0.5641895835477563 * x1
    x33 = x31 * x32
    x34 = -x1 * (ax * A[1] + bx * B[1])
    x35 = -x34 - B[1]
    x36 = 26.98476936677017 * x35
    x37 = x29 * x33
    x38 = x26 * x37
    x39 = -x1 * (ax * A[2] + bx * B[2])
    x40 = -x39 - B[2]
    x41 = 26.98476936677017 * x40
    x42 = x25 * x29
    x43 = x31 * x5
    x44 = x35**2 * x43
    x45 = x0 * x43
    x46 = x44 + x45
    x47 = 34.83718745291631 * x46
    x48 = 0.3183098861837907 * x4
    x49 = x47 * x48
    x50 = 60.33977866125206 * x40
    x51 = x33 * x35
    x52 = x28 * x48
    x53 = x31 * x52
    x54 = x27 * x5
    x55 = x40**2 * x54
    x56 = x0 * x54
    x57 = x55 + x56
    x58 = 34.83718745291631 * x57
    x59 = x13 + x24
    x60 = 26.98476936677017 * x59
    x61 = x35 * (2.0 * x45 + x46)
    x62 = x29 * x48
    x63 = x61 * x62
    x64 = 60.33977866125206 * x59
    x65 = x40 * x62
    x66 = x35 * x53
    x67 = x40 * (2.0 * x56 + x57)
    x68 = x53 * x67
    x69 = x11 * x6**2 + x14
    x70 = 3.0 * x45
    x71 = x0 * (3.0 * x44 + x70) + x35 * x61
    x72 = x30 * x48
    x73 = 0.1795871221251666 * x28
    x74 = x57 * x73
    x75 = 3.0 * x56
    x76 = x0 * (3.0 * x55 + x75) + x40 * x67
    x77 = 10.19928413298683 * x76
    x78 = -x34 - A[1]
    x79 = 17.66567831916427 * x78
    x80 = x14 + x21
    x81 = 2.0 * x0 * x12 + x3 * x80
    x82 = x19 + x23
    x83 = x37 * (x0 * (3.0 * x13 + 3.0 * x17 + x81) + x3 * x82)
    x84 = x43 * x78
    x85 = x35 * x84
    x86 = x45 + x85
    x87 = 46.73899157377418 * x62
    x88 = x86 * x87
    x89 = 46.73899157377418 * x40
    x90 = x37 * x82
    x91 = 60.33977866125205 * x18
    x92 = x0 * (x35 * x43 + x84)
    x93 = x35 * x86
    x94 = x92 + x93
    x95 = x62 * x94
    x96 = 104.5115623587489 * x86
    x97 = x53 * x91
    x98 = x0 * (x44 + x70 + 2.0 * x85)
    x99 = x35 * x94
    x100 = x98 + x99
    x101 = 104.5115623587489 * x16
    x102 = 46.73899157377418 * x16
    x103 = x29 * (x0 * (x61 + 3.0 * x92 + 3.0 * x93) + x100 * x35)
    x104 = 17.66567831916427 * x9
    x105 = x104 * x32
    x106 = x100 * x29
    x107 = 60.33977866125205 * x94
    x108 = x52 * x9
    x109 = 46.73899157377418 * x108
    x110 = x28 * x33
    x111 = x110 * x9
    x112 = -x39 - A[2]
    x113 = 17.66567831916427 * x112
    x114 = 46.73899157377418 * x35
    x115 = x112 * x54
    x116 = x115 * x40
    x117 = x116 + x56
    x118 = 46.73899157377418 * x53
    x119 = x117 * x118
    x120 = 104.5115623587489 * x117
    x121 = x0 * (x115 + x40 * x54)
    x122 = x117 * x40
    x123 = x121 + x122
    x124 = x117 * x73
    x125 = x0 * (2.0 * x116 + x55 + x75)
    x126 = x123 * x40
    x127 = x125 + x126
    x128 = 60.33977866125205 * x123
    x129 = x0 * (3.0 * x121 + 3.0 * x122 + x67) + x127 * x40
    x130 = x43 * x78**2 + x45
    x131 = x0 * (3.0 * x21 + x22) + x3 * x81
    x132 = x78 * x86
    x133 = x132 + x92
    x134 = 26.98476936677017 * x133
    x135 = x62 * x81
    x136 = x78 * x94
    x137 = x136 + x98
    x138 = 34.83718745291631 * x80
    x139 = 60.33977866125206 * x133
    x140 = 26.98476936677017 * x3
    x141 = 2.0 * x0 * (x132 + 2.0 * x92 + x93) + x137 * x35
    x142 = x32 * x8
    x143 = x141 * x142 * x29
    x144 = x142 * x3
    x145 = x52 * x8
    x146 = x145 * x3
    x147 = x145 * x67
    x148 = x123 * x145
    x149 = x28 * x8
    x150 = x149 * x33
    x151 = 46.73899157377418 * x145
    x152 = x112**2 * x54 + x56
    x153 = 10.19928413298683 * x152
    x154 = x53 * x81
    x155 = x112 * x117
    x156 = x121 + x155
    x157 = 26.98476936677017 * x156
    x158 = 60.33977866125206 * x156
    x159 = x112 * x123
    x160 = x125 + x159
    x161 = x145 * x61
    x162 = x149 * x160
    x163 = 2.0 * x0 * (2.0 * x121 + x122 + x155) + x160 * x40
    x164 = x150 * x163

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x30 * x33 * (x0 * (2.0 * x19 + 3.0 * x20 + 5.0 * x23) + x26 * x3)
    )
    result[0, 1] = numpy.sum(x36 * x38)
    result[0, 2] = numpy.sum(x38 * x41)
    result[0, 3] = numpy.sum(x42 * x49)
    result[0, 4] = numpy.sum(x42 * x50 * x51)
    result[0, 5] = numpy.sum(x25 * x53 * x58)
    result[0, 6] = numpy.sum(x60 * x63)
    result[0, 7] = numpy.sum(x46 * x64 * x65)
    result[0, 8] = numpy.sum(x57 * x64 * x66)
    result[0, 9] = numpy.sum(x60 * x68)
    result[0, 10] = numpy.sum(x69 * x71 * x72)
    result[0, 11] = numpy.sum(x41 * x63 * x69)
    result[0, 12] = numpy.sum(x47 * x69 * x74)
    result[0, 13] = numpy.sum(x36 * x68 * x69)
    result[0, 14] = numpy.sum(x53 * x69 * x77)
    result[1, 0] = numpy.sum(x79 * x83)
    result[1, 1] = numpy.sum(x82 * x88)
    result[1, 2] = numpy.sum(x78 * x89 * x90)
    result[1, 3] = numpy.sum(x91 * x95)
    result[1, 4] = numpy.sum(x18 * x65 * x96)
    result[1, 5] = numpy.sum(x57 * x78 * x97)
    result[1, 6] = numpy.sum(x100 * x16 * x87)
    result[1, 7] = numpy.sum(x101 * x40 * x95)
    result[1, 8] = numpy.sum(x101 * x74 * x86)
    result[1, 9] = numpy.sum(x102 * x68 * x78)
    result[1, 10] = numpy.sum(x103 * x105)
    result[1, 11] = numpy.sum(x106 * x32 * x89 * x9)
    result[1, 12] = numpy.sum(x107 * x108 * x57)
    result[1, 13] = numpy.sum(x109 * x67 * x86)
    result[1, 14] = numpy.sum(x111 * x76 * x79)
    result[2, 0] = numpy.sum(x113 * x83)
    result[2, 1] = numpy.sum(x112 * x114 * x90)
    result[2, 2] = numpy.sum(x119 * x82)
    result[2, 3] = numpy.sum(x112 * x46 * x62 * x91)
    result[2, 4] = numpy.sum(x120 * x18 * x66)
    result[2, 5] = numpy.sum(x123 * x97)
    result[2, 6] = numpy.sum(x102 * x112 * x63)
    result[2, 7] = numpy.sum(x101 * x124 * x46)
    result[2, 8] = numpy.sum(x101 * x123 * x66)
    result[2, 9] = numpy.sum(x118 * x127 * x16)
    result[2, 10] = numpy.sum(x105 * x112 * x29 * x71)
    result[2, 11] = numpy.sum(x109 * x117 * x61)
    result[2, 12] = numpy.sum(x108 * x128 * x46)
    result[2, 13] = numpy.sum(x111 * x114 * x127)
    result[2, 14] = numpy.sum(x104 * x110 * x129)
    result[3, 0] = numpy.sum(x130 * x131 * x72)
    result[3, 1] = numpy.sum(x134 * x135)
    result[3, 2] = numpy.sum(x130 * x135 * x41)
    result[3, 3] = numpy.sum(x137 * x138 * x62)
    result[3, 4] = numpy.sum(x139 * x65 * x80)
    result[3, 5] = numpy.sum(x130 * x138 * x74)
    result[3, 6] = numpy.sum(x140 * x143)
    result[3, 7] = numpy.sum(x137 * x144 * x29 * x50)
    result[3, 8] = numpy.sum(x139 * x146 * x57)
    result[3, 9] = numpy.sum(x130 * x140 * x147)
    result[3, 10] = numpy.sum(
        x142 * x30 * (x0 * (3.0 * x136 + 5.0 * x98 + 2.0 * x99) + x141 * x35)
    )
    result[3, 11] = numpy.sum(x143 * x41)
    result[3, 12] = numpy.sum(x137 * x145 * x58)
    result[3, 13] = numpy.sum(x134 * x147)
    result[3, 14] = numpy.sum(x130 * x145 * x77)
    result[4, 0] = numpy.sum(x112 * x131 * x37 * x79)
    result[4, 1] = numpy.sum(x112 * x81 * x88)
    result[4, 2] = numpy.sum(x119 * x78 * x81)
    result[4, 3] = numpy.sum(60.33977866125205 * x112 * x80 * x95)
    result[4, 4] = numpy.sum(x124 * x80 * x96)
    result[4, 5] = numpy.sum(x128 * x53 * x78 * x80)
    result[4, 6] = numpy.sum(46.73899157377418 * x106 * x112 * x144)
    result[4, 7] = numpy.sum(x120 * x146 * x94)
    result[4, 8] = numpy.sum(x148 * x3 * x96)
    result[4, 9] = numpy.sum(46.73899157377418 * x127 * x150 * x3 * x78)
    result[4, 10] = numpy.sum(x103 * x113 * x142)
    result[4, 11] = numpy.sum(x100 * x117 * x151)
    result[4, 12] = numpy.sum(x107 * x148)
    result[4, 13] = numpy.sum(x127 * x151 * x86)
    result[4, 14] = numpy.sum(x129 * x150 * x79)
    result[5, 0] = numpy.sum(x131 * x153 * x53)
    result[5, 1] = numpy.sum(x152 * x154 * x36)
    result[5, 2] = numpy.sum(x154 * x157)
    result[5, 3] = numpy.sum(x152 * x47 * x73 * x80)
    result[5, 4] = numpy.sum(x158 * x66 * x80)
    result[5, 5] = numpy.sum(x138 * x160 * x53)
    result[5, 6] = numpy.sum(x140 * x152 * x161)
    result[5, 7] = numpy.sum(x146 * x158 * x46)
    result[5, 8] = numpy.sum(60.33977866125206 * x162 * x3 * x51)
    result[5, 9] = numpy.sum(x140 * x164)
    result[5, 10] = numpy.sum(x145 * x153 * x71)
    result[5, 11] = numpy.sum(x157 * x161)
    result[5, 12] = numpy.sum(x162 * x49)
    result[5, 13] = numpy.sum(x164 * x36)
    result[5, 14] = numpy.sum(
        10.19928413298683
        * x150
        * (x0 * (5.0 * x125 + 2.0 * x126 + 3.0 * x159) + x163 * x40)
    )
    return result


def ovlp3d_30(ax, da, A, bx, db, B):
    """Cartesian 3D (fs) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = numpy.exp(-x1 * (A[1] - B[1]) ** 2)
    x3 = x0 * (ax * A[0] + bx * B[0]) - A[0]
    x4 = numpy.exp(-x1 * (A[0] - B[0]) ** 2)
    x5 = numpy.sqrt(x0)
    x6 = 1.772453850905516 * x5
    x7 = x4 * x6
    x8 = 0.5 / (ax + bx)
    x9 = x7 * x8
    x10 = x3**2 * x7 + x9
    x11 = numpy.exp(-x1 * (A[2] - B[2]) ** 2)
    x12 = 0.5641895835477563
    x13 = numpy.sqrt(ax**4.5)
    x14 = numpy.sqrt(bx**1.5)
    x15 = da * db * x0 * x11 * x12 * x13 * x14
    x16 = 5.842373946721772 * x15
    x17 = x0 * (ax * A[1] + bx * B[1]) - A[1]
    x18 = 13.06394529484362 * x15
    x19 = x10 * x18 * x2
    x20 = x0 * (ax * A[2] + bx * B[2]) - A[2]
    x21 = x2 * x6
    x22 = x21 * x8
    x23 = x17**2 * x21 + x22
    x24 = x18 * x23 * x4
    x25 = da * db * x0 * x13 * x14 * x2 * x4
    x26 = x11 * x6
    x27 = x26 * x8
    x28 = x20**2 * x26 + x27
    x29 = x12 * x25
    x30 = 13.06394529484362 * x28 * x29

    # 10 item(s)
    result[0, 0] = numpy.sum(x16 * x2 * x3 * (x10 + 2.0 * x9))
    result[1, 0] = numpy.sum(x17 * x19)
    result[2, 0] = numpy.sum(x19 * x20)
    result[3, 0] = numpy.sum(x24 * x3)
    result[4, 0] = numpy.sum(22.62741699796953 * x11 * x17 * x20 * x25 * x3 * x5)
    result[5, 0] = numpy.sum(x3 * x30)
    result[6, 0] = numpy.sum(x16 * x17 * x4 * (2.0 * x22 + x23))
    result[7, 0] = numpy.sum(x20 * x24)
    result[8, 0] = numpy.sum(x17 * x30)
    result[9, 0] = numpy.sum(5.842373946721772 * x20 * x29 * (2.0 * x27 + x28))
    return result


def ovlp3d_31(ax, da, A, bx, db, B):
    """Cartesian 3D (fp) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3**2 * x8
    x10 = x0 * x8
    x11 = -x2 - B[0]
    x12 = x3 * x8
    x13 = x11 * x12
    x14 = x10 + x13
    x15 = x0 * (x11 * x8 + x12) + x14 * x3
    x16 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x17 = 0.5641895835477563
    x18 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x19 = da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**2.5)
    x20 = x18 * x19
    x21 = x1 * x17 * x20
    x22 = 11.68474789344354 * x21
    x23 = x16 * x22
    x24 = -x1 * (ax * A[1] + bx * B[1])
    x25 = -x24 - B[1]
    x26 = x10 + x9
    x27 = x23 * (2.0 * x0 * x12 + x26 * x3)
    x28 = -x1 * (ax * A[2] + bx * B[2])
    x29 = -x28 - B[2]
    x30 = -x24 - A[1]
    x31 = x16 * x30
    x32 = 26.12789058968724 * x21
    x33 = x15 * x32
    x34 = x0 * x7
    x35 = x16 * x34
    x36 = x16 * x7
    x37 = x30 * x36
    x38 = x25 * x37
    x39 = x35 + x38
    x40 = 26.12789058968724 * x26
    x41 = 0.3183098861837907 * x6
    x42 = x40 * x41
    x43 = x21 * x40
    x44 = -x28 - A[2]
    x45 = x16 * x44
    x46 = x18 * x34
    x47 = x18 * x7
    x48 = x44 * x47
    x49 = x29 * x48
    x50 = x46 + x49
    x51 = x16 * x19
    x52 = x50 * x51
    x53 = x30**2 * x36
    x54 = x35 + x53
    x55 = 26.12789058968724 * x41
    x56 = x14 * x55
    x57 = x3 * x32
    x58 = x0 * (x25 * x36 + x37) + x30 * x39
    x59 = x5 * x58
    x60 = x5 * x54
    x61 = 45.25483399593905 * x21 * x44
    x62 = x39 * x5
    x63 = x1 * x17 * x5
    x64 = x44**2 * x47
    x65 = x46 + x64
    x66 = x51 * x65
    x67 = 26.12789058968724 * x3
    x68 = x63 * x66
    x69 = x0 * (x29 * x47 + x48) + x44 * x50
    x70 = x51 * x63
    x71 = x69 * x70
    x72 = x22 * x5
    x73 = x30 * x72 * (2.0 * x35 + x54)
    x74 = x32 * x44
    x75 = x19 * x55
    x76 = 26.12789058968724 * x30
    x77 = 11.68474789344354 * x70
    x78 = x44 * x77 * (2.0 * x46 + x65)

    # 30 item(s)
    result[0, 0] = numpy.sum(x23 * (x0 * (3.0 * x10 + 2.0 * x13 + x9) + x15 * x3))
    result[0, 1] = numpy.sum(x25 * x27)
    result[0, 2] = numpy.sum(x27 * x29)
    result[1, 0] = numpy.sum(x31 * x33)
    result[1, 1] = numpy.sum(x20 * x39 * x42)
    result[1, 2] = numpy.sum(x29 * x31 * x43)
    result[2, 0] = numpy.sum(x33 * x45)
    result[2, 1] = numpy.sum(x25 * x43 * x45)
    result[2, 2] = numpy.sum(x42 * x52)
    result[3, 0] = numpy.sum(x20 * x54 * x56)
    result[3, 1] = numpy.sum(x57 * x59)
    result[3, 2] = numpy.sum(x29 * x57 * x60)
    result[4, 0] = numpy.sum(x14 * x31 * x61)
    result[4, 1] = numpy.sum(x3 * x61 * x62)
    result[4, 2] = numpy.sum(45.25483399593905 * x3 * x30 * x52 * x63)
    result[5, 0] = numpy.sum(x56 * x66)
    result[5, 1] = numpy.sum(x25 * x67 * x68)
    result[5, 2] = numpy.sum(x67 * x71)
    result[6, 0] = numpy.sum(x11 * x73)
    result[6, 1] = numpy.sum(x72 * (x0 * (3.0 * x35 + 2.0 * x38 + x53) + x30 * x58))
    result[6, 2] = numpy.sum(x29 * x73)
    result[7, 0] = numpy.sum(x11 * x60 * x74)
    result[7, 1] = numpy.sum(x59 * x74)
    result[7, 2] = numpy.sum(x50 * x60 * x75)
    result[8, 0] = numpy.sum(x11 * x68 * x76)
    result[8, 1] = numpy.sum(x62 * x65 * x75)
    result[8, 2] = numpy.sum(x71 * x76)
    result[9, 0] = numpy.sum(x11 * x78)
    result[9, 1] = numpy.sum(x25 * x78)
    result[9, 2] = numpy.sum(x77 * (x0 * (3.0 * x46 + 2.0 * x49 + x64) + x44 * x69))
    return result


def ovlp3d_32(ax, da, A, bx, db, B):
    """Cartesian 3D (fd) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x0 * x8
    x10 = -x2 - B[0]
    x11 = x3 * x8
    x12 = x10 * x11
    x13 = x12 + x9
    x14 = x13 * x3
    x15 = x10 * x13
    x16 = x0 * (x10 * x8 + x11)
    x17 = x10**2 * x8
    x18 = 2.0 * x12 + 3.0 * x9
    x19 = x15 + x16
    x20 = x0 * (x17 + x18) + x19 * x3
    x21 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x22 = da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**3.5)
    x23 = x21 * x22
    x24 = 13.49238468338508 * x23
    x25 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x26 = 0.5641895835477563 * x1
    x27 = x25 * x26
    x28 = -x1 * (ax * A[1] + bx * B[1])
    x29 = -x28 - B[1]
    x30 = 23.36949578688709 * x29
    x31 = x3**2 * x8
    x32 = x14 + x16
    x33 = x23 * x27
    x34 = x33 * (x0 * (x18 + x31) + x3 * x32)
    x35 = -x1 * (ax * A[2] + bx * B[2])
    x36 = -x35 - B[2]
    x37 = 23.36949578688709 * x36
    x38 = x25 * x7
    x39 = x29**2 * x38
    x40 = x0 * x38
    x41 = x39 + x40
    x42 = x31 + x9
    x43 = x3 * (x42 + 2.0 * x9)
    x44 = 0.3183098861837907 * x6
    x45 = x43 * x44
    x46 = x33 * x36
    x47 = x22 * x25
    x48 = x21 * x7
    x49 = x36**2 * x48
    x50 = x0 * x48
    x51 = x49 + x50
    x52 = 13.49238468338508 * x51
    x53 = -x28 - A[1]
    x54 = 30.16988933062603 * x53
    x55 = x20 * x33
    x56 = 52.25578117937447 * x32
    x57 = x38 * x53
    x58 = x29 * x57
    x59 = x40 + x58
    x60 = x23 * x44
    x61 = x59 * x60
    x62 = x0 * (x29 * x38 + x57)
    x63 = x29 * x59
    x64 = x62 + x63
    x65 = 30.16988933062603 * x42
    x66 = x60 * x65
    x67 = 52.25578117937447 * x42
    x68 = x44 * x47
    x69 = x65 * x68
    x70 = -x35 - A[2]
    x71 = 30.16988933062603 * x70
    x72 = x33 * x70
    x73 = x48 * x70
    x74 = x36 * x73
    x75 = x50 + x74
    x76 = x68 * x75
    x77 = x0 * (x36 * x48 + x73)
    x78 = x36 * x75
    x79 = x77 + x78
    x80 = 30.16988933062603 * x19
    x81 = x38 * x53**2
    x82 = x40 + x81
    x83 = x60 * x82
    x84 = x53 * x59
    x85 = x62 + x84
    x86 = 52.25578117937447 * x13
    x87 = 30.16988933062603 * x3
    x88 = 3.0 * x40 + 2.0 * x58
    x89 = x0 * (x39 + x88) + x53 * x64
    x90 = x26 * x5
    x91 = x23 * x90
    x92 = x89 * x91
    x93 = 52.25578117937447 * x85
    x94 = x3 * x91
    x95 = x22 * x5
    x96 = x44 * x95
    x97 = 30.16988933062603 * x96
    x98 = x82 * x97
    x99 = 52.25578117937447 * x53
    x100 = 90.5096679918781 * x13
    x101 = x75 * x96
    x102 = x27 * x95
    x103 = x102 * x3
    x104 = x48 * x70**2
    x105 = x104 + x50
    x106 = x105 * x68
    x107 = x70 * x75
    x108 = x107 + x77
    x109 = x105 * x97
    x110 = 52.25578117937447 * x108
    x111 = 3.0 * x50 + 2.0 * x74
    x112 = x0 * (x111 + x49) + x70 * x79
    x113 = x102 * x112
    x114 = x17 + x9
    x115 = x53 * (2.0 * x40 + x82)
    x116 = x115 * x44
    x117 = x91 * (x0 * (x81 + x88) + x53 * x85)
    x118 = 23.36949578688709 * x10
    x119 = x10 * x91
    x120 = 52.25578117937447 * x10
    x121 = x59 * x96
    x122 = x10 * x102
    x123 = x70 * (x105 + 2.0 * x50)
    x124 = 13.49238468338508 * x123
    x125 = x102 * (x0 * (x104 + x111) + x108 * x70)

    # 60 item(s)
    result[0, 0] = numpy.sum(x24 * x27 * (2.0 * x0 * (x14 + x15 + 2.0 * x16) + x20 * x3))
    result[0, 1] = numpy.sum(x30 * x34)
    result[0, 2] = numpy.sum(x34 * x37)
    result[0, 3] = numpy.sum(x24 * x41 * x45)
    result[0, 4] = numpy.sum(x30 * x43 * x46)
    result[0, 5] = numpy.sum(x45 * x47 * x52)
    result[1, 0] = numpy.sum(x54 * x55)
    result[1, 1] = numpy.sum(x56 * x61)
    result[1, 2] = numpy.sum(x46 * x53 * x56)
    result[1, 3] = numpy.sum(x64 * x66)
    result[1, 4] = numpy.sum(x36 * x61 * x67)
    result[1, 5] = numpy.sum(x51 * x53 * x69)
    result[2, 0] = numpy.sum(x55 * x71)
    result[2, 1] = numpy.sum(x29 * x56 * x72)
    result[2, 2] = numpy.sum(x56 * x76)
    result[2, 3] = numpy.sum(x41 * x66 * x70)
    result[2, 4] = numpy.sum(x29 * x67 * x76)
    result[2, 5] = numpy.sum(x69 * x79)
    result[3, 0] = numpy.sum(x80 * x83)
    result[3, 1] = numpy.sum(x60 * x85 * x86)
    result[3, 2] = numpy.sum(x36 * x83 * x86)
    result[3, 3] = numpy.sum(x87 * x92)
    result[3, 4] = numpy.sum(x36 * x93 * x94)
    result[3, 5] = numpy.sum(x3 * x51 * x98)
    result[4, 0] = numpy.sum(x19 * x72 * x99)
    result[4, 1] = numpy.sum(x100 * x61 * x70)
    result[4, 2] = numpy.sum(x100 * x53 * x76)
    result[4, 3] = numpy.sum(52.25578117937447 * x64 * x70 * x94)
    result[4, 4] = numpy.sum(90.5096679918781 * x101 * x3 * x59)
    result[4, 5] = numpy.sum(x103 * x79 * x99)
    result[5, 0] = numpy.sum(x106 * x80)
    result[5, 1] = numpy.sum(x106 * x29 * x86)
    result[5, 2] = numpy.sum(x108 * x68 * x86)
    result[5, 3] = numpy.sum(x109 * x3 * x41)
    result[5, 4] = numpy.sum(x103 * x110 * x29)
    result[5, 5] = numpy.sum(x113 * x87)
    result[6, 0] = numpy.sum(x114 * x116 * x24)
    result[6, 1] = numpy.sum(x117 * x118)
    result[6, 2] = numpy.sum(x115 * x119 * x37)
    result[6, 3] = numpy.sum(x24 * x90 * (2.0 * x0 * (2.0 * x62 + x63 + x84) + x53 * x89))
    result[6, 4] = numpy.sum(x117 * x37)
    result[6, 5] = numpy.sum(x116 * x52 * x95)
    result[7, 0] = numpy.sum(x114 * x71 * x83)
    result[7, 1] = numpy.sum(x119 * x70 * x93)
    result[7, 2] = numpy.sum(x101 * x120 * x82)
    result[7, 3] = numpy.sum(x71 * x92)
    result[7, 4] = numpy.sum(x101 * x93)
    result[7, 5] = numpy.sum(x79 * x98)
    result[8, 0] = numpy.sum(x106 * x114 * x54)
    result[8, 1] = numpy.sum(x105 * x120 * x121)
    result[8, 2] = numpy.sum(x110 * x122 * x53)
    result[8, 3] = numpy.sum(x109 * x64)
    result[8, 4] = numpy.sum(x110 * x121)
    result[8, 5] = numpy.sum(x113 * x54)
    result[9, 0] = numpy.sum(x114 * x124 * x68)
    result[9, 1] = numpy.sum(x122 * x123 * x30)
    result[9, 2] = numpy.sum(x118 * x125)
    result[9, 3] = numpy.sum(x124 * x41 * x96)
    result[9, 4] = numpy.sum(x125 * x30)
    result[9, 5] = numpy.sum(
        13.49238468338508 * x102 * (2.0 * x0 * (x107 + 2.0 * x77 + x78) + x112 * x70)
    )
    return result


def ovlp3d_33(ax, da, A, bx, db, B):
    """Cartesian 3D (ff) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - B[0]
    x4 = numpy.sqrt(x1)
    x5 = 1.772453850905516 * x4
    x6 = -x2 - A[0]
    x7 = ax * bx * x1
    x8 = numpy.exp(-x7 * (A[0] - B[0]) ** 2)
    x9 = x6 * x8
    x10 = x5 * x9
    x11 = x5 * x8
    x12 = x11 * x3
    x13 = x0 * (x10 + x12)
    x14 = x0 * x11
    x15 = x10 * x3
    x16 = x14 + x15
    x17 = x16 * x3
    x18 = x13 + x17
    x19 = x18 * x3
    x20 = x18 * x6
    x21 = x11 * x3**2
    x22 = 3.0 * x14 + 2.0 * x15
    x23 = x0 * (x21 + x22)
    x24 = x16 * x6
    x25 = 2.0 * x0 * (2.0 * x13 + x17 + x24)
    x26 = x20 + x23
    x27 = x25 + x26 * x3
    x28 = numpy.exp(-x7 * (A[2] - B[2]) ** 2)
    x29 = da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**4.5)
    x30 = x28 * x29
    x31 = 12.06795573225041 * x30
    x32 = numpy.exp(-x7 * (A[1] - B[1]) ** 2)
    x33 = 0.5641895835477563 * x1
    x34 = x32 * x33
    x35 = -x1 * (ax * A[1] + bx * B[1])
    x36 = -x35 - B[1]
    x37 = 26.98476936677017 * x30
    x38 = x34 * x37
    x39 = x38 * (x25 + x26 * x6)
    x40 = -x1 * (ax * A[2] + bx * B[2])
    x41 = -x40 - B[2]
    x42 = x11 * x6**2
    x43 = x13 + x24
    x44 = x0 * (x22 + x42) + x43 * x6
    x45 = x32 * x5
    x46 = x36**2 * x45
    x47 = x0 * x45
    x48 = x46 + x47
    x49 = 0.3183098861837907 * x4
    x50 = x48 * x49
    x51 = x37 * x50
    x52 = x34 * x36
    x53 = x30 * x41
    x54 = 46.73899157377418 * x53
    x55 = x28 * x5
    x56 = x41**2 * x55
    x57 = x0 * x55
    x58 = x56 + x57
    x59 = x29 * x58
    x60 = x32 * x49
    x61 = 26.98476936677017 * x60
    x62 = x59 * x61
    x63 = x14 + x42
    x64 = 2.0 * x0
    x65 = x10 * x64 + x6 * x63
    x66 = 2.0 * x47
    x67 = x36 * (x48 + x66)
    x68 = x31 * x49
    x69 = 2.0 * x57
    x70 = x41 * (x58 + x69)
    x71 = 12.06795573225041 * x29
    x72 = x70 * x71
    x73 = -x35 - A[1]
    x74 = x27 * x38
    x75 = x45 * x73
    x76 = x36 * x75
    x77 = x47 + x76
    x78 = 60.33977866125206 * x29
    x79 = x49 * x78
    x80 = x28 * x79
    x81 = x26 * x78
    x82 = x34 * x73
    x83 = x28 * x41
    x84 = x0 * (x36 * x45 + x75)
    x85 = x36 * x77
    x86 = x84 + x85
    x87 = x80 * x86
    x88 = 104.5115623587489 * x43
    x89 = x49 * x77
    x90 = 60.33977866125206 * x59
    x91 = x60 * x73
    x92 = 3.0 * x47 + 2.0 * x76
    x93 = x0 * (x46 + x92)
    x94 = x36 * x86
    x95 = x93 + x94
    x96 = x37 * x49
    x97 = x63 * x96
    x98 = 0.1795871221251666
    x99 = x77 * x98
    x100 = x29 * x61
    x101 = x100 * x63
    x102 = -x40 - A[2]
    x103 = x102 * x28
    x104 = x102 * x55
    x105 = x104 * x41
    x106 = x105 + x57
    x107 = x106 * x29
    x108 = 60.33977866125206 * x107
    x109 = x50 * x78
    x110 = x36 * x60
    x111 = x0 * (x104 + x41 * x55)
    x112 = x106 * x41
    x113 = x111 + x112
    x114 = x60 * x78
    x115 = x113 * x114
    x116 = x48 * x98
    x117 = 2.0 * x105 + 3.0 * x57
    x118 = x0 * (x117 + x56)
    x119 = x113 * x41
    x120 = x118 + x119
    x121 = x19 + x23
    x122 = x45 * x73**2
    x123 = x122 + x47
    x124 = x123 * x96
    x125 = x73 * x77
    x126 = x125 + x84
    x127 = x18 * x80
    x128 = x73 * x86
    x129 = x128 + x93
    x130 = x126 * x49
    x131 = 104.5115623587489 * x16
    x132 = x123 * x98
    x133 = 2.0 * x0 * (x125 + 2.0 * x84 + x85)
    x134 = x129 * x36 + x133
    x135 = x134 * x37
    x136 = x33 * x9
    x137 = x129 * x78
    x138 = 26.98476936677017 * x29
    x139 = x49 * x9
    x140 = x138 * x139
    x141 = x102 * x30
    x142 = 46.73899157377418 * x141
    x143 = 104.5115623587489 * x18
    x144 = x113 * x29
    x145 = 104.5115623587489 * x107
    x146 = 46.73899157377418 * x29
    x147 = x102**2 * x55
    x148 = x147 + x57
    x149 = x100 * x148
    x150 = x148 * x78
    x151 = x102 * x106
    x152 = x111 + x151
    x153 = x114 * x152
    x154 = x152 * x29
    x155 = x102 * x113
    x156 = x118 + x155
    x157 = x156 * x78
    x158 = 2.0 * x0 * (2.0 * x111 + x112 + x151)
    x159 = x156 * x41 + x158
    x160 = x159 * x34
    x161 = x73 * (x123 + x66)
    x162 = x14 + x21
    x163 = x12 * x64 + x162 * x3
    x164 = x0 * (x122 + x92) + x126 * x73
    x165 = x162 * x96
    x166 = x33 * x8
    x167 = x166 * x3
    x168 = x37 * (x129 * x73 + x133)
    x169 = x49 * x8
    x170 = 26.98476936677017 * x169
    x171 = x170 * x59
    x172 = x169 * x3
    x173 = x79 * x8
    x174 = x113 * x173
    x175 = x170 * x29
    x176 = x34 * x8
    x177 = x176 * x3
    x178 = x138 * x8
    x179 = x102 * (x148 + x69)
    x180 = x179 * x71
    x181 = x100 * x162
    x182 = x0 * (x117 + x147) + x102 * x152
    x183 = x178 * x50
    x184 = x178 * x34 * (x102 * x156 + x158)

    # 100 item(s)
    result[0, 0] = numpy.sum(
        x31 * x34 * (x0 * (2.0 * x19 + 3.0 * x20 + 5.0 * x23) + x27 * x6)
    )
    result[0, 1] = numpy.sum(x36 * x39)
    result[0, 2] = numpy.sum(x39 * x41)
    result[0, 3] = numpy.sum(x44 * x51)
    result[0, 4] = numpy.sum(x44 * x52 * x54)
    result[0, 5] = numpy.sum(x44 * x62)
    result[0, 6] = numpy.sum(x65 * x67 * x68)
    result[0, 7] = numpy.sum(x41 * x51 * x65)
    result[0, 8] = numpy.sum(x36 * x62 * x65)
    result[0, 9] = numpy.sum(x60 * x65 * x72)
    result[1, 0] = numpy.sum(x73 * x74)
    result[1, 1] = numpy.sum(x26 * x77 * x80)
    result[1, 2] = numpy.sum(x81 * x82 * x83)
    result[1, 3] = numpy.sum(x43 * x87)
    result[1, 4] = numpy.sum(x53 * x88 * x89)
    result[1, 5] = numpy.sum(x43 * x90 * x91)
    result[1, 6] = numpy.sum(x95 * x97)
    result[1, 7] = numpy.sum(x41 * x63 * x87)
    result[1, 8] = numpy.sum(x63 * x90 * x99)
    result[1, 9] = numpy.sum(x101 * x70 * x73)
    result[2, 0] = numpy.sum(x102 * x74)
    result[2, 1] = numpy.sum(x103 * x52 * x81)
    result[2, 2] = numpy.sum(x108 * x26 * x60)
    result[2, 3] = numpy.sum(x103 * x109 * x43)
    result[2, 4] = numpy.sum(x107 * x110 * x88)
    result[2, 5] = numpy.sum(x115 * x43)
    result[2, 6] = numpy.sum(x102 * x67 * x97)
    result[2, 7] = numpy.sum(x108 * x116 * x63)
    result[2, 8] = numpy.sum(x115 * x36 * x63)
    result[2, 9] = numpy.sum(x101 * x120)
    result[3, 0] = numpy.sum(x121 * x124)
    result[3, 1] = numpy.sum(x126 * x127)
    result[3, 2] = numpy.sum(x123 * x127 * x41)
    result[3, 3] = numpy.sum(x129 * x16 * x80)
    result[3, 4] = numpy.sum(x130 * x131 * x53)
    result[3, 5] = numpy.sum(x132 * x16 * x90)
    result[3, 6] = numpy.sum(x135 * x136)
    result[3, 7] = numpy.sum(x136 * x137 * x83)
    result[3, 8] = numpy.sum(x130 * x9 * x90)
    result[3, 9] = numpy.sum(x123 * x140 * x70)
    result[4, 0] = numpy.sum(x121 * x142 * x82)
    result[4, 1] = numpy.sum(x141 * x143 * x89)
    result[4, 2] = numpy.sum(x107 * x143 * x91)
    result[4, 3] = numpy.sum(x131 * x141 * x49 * x86)
    result[4, 4] = numpy.sum(181.0193359837562 * x107 * x16 * x99)
    result[4, 5] = numpy.sum(x131 * x144 * x91)
    result[4, 6] = numpy.sum(x136 * x142 * x95)
    result[4, 7] = numpy.sum(x139 * x145 * x86)
    result[4, 8] = numpy.sum(104.5115623587489 * x144 * x89 * x9)
    result[4, 9] = numpy.sum(x120 * x146 * x82 * x9)
    result[5, 0] = numpy.sum(x121 * x149)
    result[5, 1] = numpy.sum(x110 * x150 * x18)
    result[5, 2] = numpy.sum(x153 * x18)
    result[5, 3] = numpy.sum(x116 * x150 * x16)
    result[5, 4] = numpy.sum(x110 * x131 * x154)
    result[5, 5] = numpy.sum(x114 * x156 * x16)
    result[5, 6] = numpy.sum(x140 * x148 * x67)
    result[5, 7] = numpy.sum(x109 * x152 * x9)
    result[5, 8] = numpy.sum(x157 * x52 * x9)
    result[5, 9] = numpy.sum(x138 * x160 * x9)
    result[6, 0] = numpy.sum(x161 * x163 * x68)
    result[6, 1] = numpy.sum(x164 * x165)
    result[6, 2] = numpy.sum(x161 * x165 * x41)
    result[6, 3] = numpy.sum(x167 * x168)
    result[6, 4] = numpy.sum(x164 * x167 * x54)
    result[6, 5] = numpy.sum(x161 * x171 * x3)
    result[6, 6] = numpy.sum(
        x166 * x31 * (x0 * (3.0 * x128 + 5.0 * x93 + 2.0 * x94) + x134 * x73)
    )
    result[6, 7] = numpy.sum(x166 * x168 * x41)
    result[6, 8] = numpy.sum(x164 * x171)
    result[6, 9] = numpy.sum(x161 * x169 * x72)
    result[7, 0] = numpy.sum(x102 * x124 * x163)
    result[7, 1] = numpy.sum(x102 * x126 * x162 * x80)
    result[7, 2] = numpy.sum(x108 * x132 * x162)
    result[7, 3] = numpy.sum(x103 * x137 * x167)
    result[7, 4] = numpy.sum(x126 * x145 * x172)
    result[7, 5] = numpy.sum(x123 * x174 * x3)
    result[7, 6] = numpy.sum(x102 * x135 * x166)
    result[7, 7] = numpy.sum(x108 * x129 * x169)
    result[7, 8] = numpy.sum(x126 * x174)
    result[7, 9] = numpy.sum(x120 * x123 * x175)
    result[8, 0] = numpy.sum(x149 * x163 * x73)
    result[8, 1] = numpy.sum(x150 * x162 * x99)
    result[8, 2] = numpy.sum(x153 * x162 * x73)
    result[8, 3] = numpy.sum(x150 * x172 * x86)
    result[8, 4] = numpy.sum(104.5115623587489 * x154 * x172 * x77)
    result[8, 5] = numpy.sum(x157 * x177 * x73)
    result[8, 6] = numpy.sum(x148 * x175 * x95)
    result[8, 7] = numpy.sum(x152 * x173 * x86)
    result[8, 8] = numpy.sum(x156 * x173 * x77)
    result[8, 9] = numpy.sum(x160 * x178 * x73)
    result[9, 0] = numpy.sum(x163 * x180 * x60)
    result[9, 1] = numpy.sum(x179 * x181 * x36)
    result[9, 2] = numpy.sum(x181 * x182)
    result[9, 3] = numpy.sum(x179 * x183 * x3)
    result[9, 4] = numpy.sum(x146 * x177 * x182 * x36)
    result[9, 5] = numpy.sum(x184 * x3)
    result[9, 6] = numpy.sum(x169 * x180 * x67)
    result[9, 7] = numpy.sum(x182 * x183)
    result[9, 8] = numpy.sum(x184 * x36)
    result[9, 9] = numpy.sum(
        x176 * x71 * (x0 * (5.0 * x118 + 2.0 * x119 + 3.0 * x155) + x102 * x159)
    )
    return result


def ovlp3d_34(ax, da, A, bx, db, B):
    """Cartesian 3D (fg) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 15), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = -x2 - B[0]
    x5 = ax * bx * x1
    x6 = numpy.exp(-x5 * (A[0] - B[0]) ** 2)
    x7 = numpy.sqrt(x1)
    x8 = 1.772453850905516 * x7
    x9 = x6 * x8
    x10 = x4**2 * x9
    x11 = x0 * x9
    x12 = 3.0 * x11
    x13 = x3 * x9
    x14 = x13 * x4
    x15 = x12 + 2.0 * x14
    x16 = x0 * (x10 + x15)
    x17 = x4 * x9
    x18 = x0 * (x13 + x17)
    x19 = x11 + x14
    x20 = x19 * x4
    x21 = x18 + x20
    x22 = x21 * x3
    x23 = x16 + x22
    x24 = x23 * x3
    x25 = x23 * x4
    x26 = x19 * x3
    x27 = 2.0 * x0 * (2.0 * x18 + x20 + x26)
    x28 = x21 * x4
    x29 = x0 * (5.0 * x16 + 3.0 * x22 + 2.0 * x28)
    x30 = x25 + x27
    x31 = x29 + x3 * x30
    x32 = numpy.exp(-x5 * (A[2] - B[2]) ** 2)
    x33 = da * db * numpy.sqrt(ax**4.5) * numpy.sqrt(bx**5.5)
    x34 = x32 * x33
    x35 = 9.122517057277419 * x34
    x36 = numpy.exp(-x5 * (A[1] - B[1]) ** 2)
    x37 = 0.5641895835477563 * x1
    x38 = x36 * x37
    x39 = -x1 * (ax * A[1] + bx * B[1])
    x40 = -x39 - B[1]
    x41 = 24.13591146450082 * x40
    x42 = x34 * x38
    x43 = x31 * x42
    x44 = -x1 * (ax * A[2] + bx * B[2])
    x45 = -x44 - B[2]
    x46 = 24.13591146450082 * x45
    x47 = x24 + x27
    x48 = x34 * x47
    x49 = x36 * x8
    x50 = x40**2 * x49
    x51 = x0 * x49
    x52 = x50 + x51
    x53 = 31.15932771584945 * x52
    x54 = 0.3183098861837907 * x7
    x55 = x53 * x54
    x56 = 53.96953873354034 * x45
    x57 = x38 * x40
    x58 = x33 * x54
    x59 = x36 * x58
    x60 = x32 * x8
    x61 = x45**2 * x60
    x62 = x0 * x60
    x63 = x61 + x62
    x64 = 31.15932771584945 * x63
    x65 = x3**2 * x9
    x66 = x18 + x26
    x67 = x0 * (x15 + x65) + x3 * x66
    x68 = 24.13591146450082 * x67
    x69 = 2.0 * x51
    x70 = x40 * (x52 + x69)
    x71 = x34 * x54
    x72 = x70 * x71
    x73 = 53.96953873354034 * x71
    x74 = x45 * x73
    x75 = 53.96953873354034 * x59
    x76 = x40 * x75
    x77 = 2.0 * x62
    x78 = x45 * (x63 + x77)
    x79 = x59 * x78
    x80 = x11 + x65
    x81 = 2.0 * x0
    x82 = x13 * x81 + x3 * x80
    x83 = 3.0 * x51
    x84 = x0 * (3.0 * x50 + x83) + x40 * x70
    x85 = x35 * x54
    x86 = 0.1795871221251666 * x33
    x87 = x63 * x86
    x88 = 3.0 * x62
    x89 = x0 * (3.0 * x61 + x88) + x45 * x78
    x90 = 9.122517057277419 * x89
    x91 = -x39 - A[1]
    x92 = 20.39856826597365 * x91
    x93 = x42 * (x29 + x30 * x4)
    x94 = x49 * x91
    x95 = x40 * x94
    x96 = x51 + x95
    x97 = x30 * x42
    x98 = x0 * (x40 * x49 + x94)
    x99 = x40 * x96
    x100 = x98 + x99
    x101 = 69.67437490583262 * x100
    x102 = x23 * x71
    x103 = 120.6795573225041 * x45
    x104 = x23 * x59
    x105 = 69.67437490583262 * x63
    x106 = x83 + 2.0 * x95
    x107 = x0 * (x106 + x50)
    x108 = x100 * x40
    x109 = x107 + x108
    x110 = x109 * x73
    x111 = 120.6795573225041 * x66
    x112 = x100 * x71
    x113 = 53.96953873354034 * x78
    x114 = x59 * x91
    x115 = x0 * (x70 + 3.0 * x98 + 3.0 * x99) + x109 * x40
    x116 = 20.39856826597365 * x80
    x117 = x116 * x71
    x118 = 69.67437490583262 * x80
    x119 = x86 * x96
    x120 = x116 * x59
    x121 = -x44 - A[2]
    x122 = 20.39856826597365 * x121
    x123 = 53.96953873354034 * x40
    x124 = x121 * x60
    x125 = x124 * x45
    x126 = x125 + x62
    x127 = 69.67437490583262 * x52
    x128 = 120.6795573225041 * x40
    x129 = x0 * (x124 + x45 * x60)
    x130 = x126 * x45
    x131 = x129 + x130
    x132 = 69.67437490583262 * x131
    x133 = 53.96953873354034 * x70
    x134 = x121 * x71
    x135 = x126 * x86
    x136 = 2.0 * x125 + x88
    x137 = x0 * (x136 + x61)
    x138 = x131 * x45
    x139 = x137 + x138
    x140 = x139 * x75
    x141 = x52 * x86
    x142 = x0 * (3.0 * x129 + 3.0 * x130 + x78) + x139 * x45
    x143 = x10 + x11
    x144 = x143 * x4 + x17 * x81
    x145 = x16 + x28
    x146 = x0 * (x144 + 3.0 * x18 + 3.0 * x20) + x145 * x4
    x147 = 20.39856826597365 * x146
    x148 = x49 * x91**2
    x149 = x148 + x51
    x150 = x149 * x71
    x151 = x91 * x96
    x152 = x151 + x98
    x153 = x145 * x73
    x154 = 69.67437490583262 * x21
    x155 = x100 * x91
    x156 = x107 + x155
    x157 = x156 * x71
    x158 = 2.0 * x0 * (x151 + 2.0 * x98 + x99)
    x159 = x156 * x40
    x160 = x158 + x159
    x161 = 120.6795573225041 * x19
    x162 = x19 * x86
    x163 = 20.39856826597365 * x3
    x164 = x0 * (5.0 * x107 + 2.0 * x108 + 3.0 * x155)
    x165 = x37 * x6
    x166 = x165 * x34
    x167 = x166 * (x160 * x40 + x164)
    x168 = x166 * x3
    x169 = x58 * x6
    x170 = x156 * x169
    x171 = x169 * x3
    x172 = 20.39856826597365 * x169
    x173 = x149 * x172
    x174 = 35.33135663832854 * x121
    x175 = 93.47798314754836 * x145
    x176 = 120.6795573225041 * x21
    x177 = 209.0231247174979 * x119
    x178 = 93.47798314754836 * x19
    x179 = 93.47798314754836 * x171
    x180 = x33 * x6
    x181 = x180 * x38
    x182 = x181 * x3
    x183 = x121**2 * x60
    x184 = x183 + x62
    x185 = x184 * x59
    x186 = x145 * x75
    x187 = x121 * x126
    x188 = x129 + x187
    x189 = x121 * x131
    x190 = x137 + x189
    x191 = x190 * x59
    x192 = 2.0 * x0 * (2.0 * x129 + x130 + x187)
    x193 = x190 * x45
    x194 = x192 + x193
    x195 = x172 * x184
    x196 = x169 * x190
    x197 = x0 * (5.0 * x137 + 2.0 * x138 + 3.0 * x189)
    x198 = x181 * (x194 * x45 + x197)
    x199 = x91 * (x149 + x69)
    x200 = x0 * (3.0 * x10 + x12) + x144 * x4
    x201 = x0 * (x106 + x148) + x152 * x91
    x202 = 24.13591146450082 * x201
    x203 = x144 * x71
    x204 = x156 * x91
    x205 = x158 + x204
    x206 = 31.15932771584945 * x143
    x207 = 24.13591146450082 * x4
    x208 = x160 * x91 + x164
    x209 = x166 * x208
    x210 = x166 * x4
    x211 = 53.96953873354034 * x169
    x212 = x211 * x4
    x213 = x169 * x78
    x214 = 53.96953873354034 * x144
    x215 = 69.67437490583262 * x143
    x216 = 120.6795573225041 * x143
    x217 = x143 * x86
    x218 = 120.6795573225041 * x4
    x219 = x169 * x218
    x220 = x139 * x211
    x221 = x109 * x211
    x222 = 53.96953873354034 * x4
    x223 = x121 * (x184 + x77)
    x224 = 9.122517057277419 * x223
    x225 = x144 * x59
    x226 = x0 * (x136 + x183) + x121 * x188
    x227 = 24.13591146450082 * x226
    x228 = x121 * x190
    x229 = x192 + x228
    x230 = x169 * x70
    x231 = x180 * x229
    x232 = x121 * x194 + x197
    x233 = x181 * x232

    # 150 item(s)
    result[0, 0] = numpy.sum(x35 * x38 * (3.0 * x0 * (x24 + x25 + 2.0 * x27) + x31 * x4))
    result[0, 1] = numpy.sum(x41 * x43)
    result[0, 2] = numpy.sum(x43 * x46)
    result[0, 3] = numpy.sum(x48 * x55)
    result[0, 4] = numpy.sum(x48 * x56 * x57)
    result[0, 5] = numpy.sum(x47 * x59 * x64)
    result[0, 6] = numpy.sum(x68 * x72)
    result[0, 7] = numpy.sum(x52 * x67 * x74)
    result[0, 8] = numpy.sum(x63 * x67 * x76)
    result[0, 9] = numpy.sum(x68 * x79)
    result[0, 10] = numpy.sum(x82 * x84 * x85)
    result[0, 11] = numpy.sum(x46 * x72 * x82)
    result[0, 12] = numpy.sum(x53 * x82 * x87)
    result[0, 13] = numpy.sum(x41 * x79 * x82)
    result[0, 14] = numpy.sum(x59 * x82 * x90)
    result[1, 0] = numpy.sum(x92 * x93)
    result[1, 1] = numpy.sum(x30 * x73 * x96)
    result[1, 2] = numpy.sum(x56 * x91 * x97)
    result[1, 3] = numpy.sum(x101 * x102)
    result[1, 4] = numpy.sum(x102 * x103 * x96)
    result[1, 5] = numpy.sum(x104 * x105 * x91)
    result[1, 6] = numpy.sum(x110 * x66)
    result[1, 7] = numpy.sum(x111 * x112 * x45)
    result[1, 8] = numpy.sum(x111 * x87 * x96)
    result[1, 9] = numpy.sum(x113 * x114 * x66)
    result[1, 10] = numpy.sum(x115 * x117)
    result[1, 11] = numpy.sum(x110 * x45 * x80)
    result[1, 12] = numpy.sum(x100 * x118 * x87)
    result[1, 13] = numpy.sum(x113 * x119 * x80)
    result[1, 14] = numpy.sum(x120 * x89 * x91)
    result[2, 0] = numpy.sum(x122 * x93)
    result[2, 1] = numpy.sum(x121 * x123 * x97)
    result[2, 2] = numpy.sum(x126 * x30 * x75)
    result[2, 3] = numpy.sum(x102 * x121 * x127)
    result[2, 4] = numpy.sum(x104 * x126 * x128)
    result[2, 5] = numpy.sum(x104 * x132)
    result[2, 6] = numpy.sum(x133 * x134 * x66)
    result[2, 7] = numpy.sum(x111 * x135 * x52)
    result[2, 8] = numpy.sum(x111 * x131 * x40 * x59)
    result[2, 9] = numpy.sum(x140 * x66)
    result[2, 10] = numpy.sum(x117 * x121 * x84)
    result[2, 11] = numpy.sum(x133 * x135 * x80)
    result[2, 12] = numpy.sum(x118 * x131 * x141)
    result[2, 13] = numpy.sum(x140 * x40 * x80)
    result[2, 14] = numpy.sum(x120 * x142)
    result[3, 0] = numpy.sum(x147 * x150)
    result[3, 1] = numpy.sum(x152 * x153)
    result[3, 2] = numpy.sum(x149 * x153 * x45)
    result[3, 3] = numpy.sum(x154 * x157)
    result[3, 4] = numpy.sum(x103 * x152 * x21 * x71)
    result[3, 5] = numpy.sum(x149 * x154 * x87)
    result[3, 6] = numpy.sum(x160 * x19 * x73)
    result[3, 7] = numpy.sum(x157 * x161 * x45)
    result[3, 8] = numpy.sum(x152 * x161 * x87)
    result[3, 9] = numpy.sum(x113 * x149 * x162)
    result[3, 10] = numpy.sum(x163 * x167)
    result[3, 11] = numpy.sum(x160 * x168 * x56)
    result[3, 12] = numpy.sum(x105 * x170 * x3)
    result[3, 13] = numpy.sum(x113 * x152 * x171)
    result[3, 14] = numpy.sum(x173 * x3 * x89)
    result[4, 0] = numpy.sum(x146 * x174 * x42 * x91)
    result[4, 1] = numpy.sum(x134 * x175 * x96)
    result[4, 2] = numpy.sum(x114 * x126 * x175)
    result[4, 3] = numpy.sum(x112 * x121 * x176)
    result[4, 4] = numpy.sum(x126 * x177 * x21)
    result[4, 5] = numpy.sum(x114 * x131 * x176)
    result[4, 6] = numpy.sum(x109 * x134 * x178)
    result[4, 7] = numpy.sum(209.0231247174979 * x100 * x135 * x19)
    result[4, 8] = numpy.sum(x131 * x177 * x19)
    result[4, 9] = numpy.sum(x114 * x139 * x178)
    result[4, 10] = numpy.sum(x115 * x168 * x174)
    result[4, 11] = numpy.sum(x109 * x126 * x179)
    result[4, 12] = numpy.sum(120.6795573225041 * x100 * x131 * x171)
    result[4, 13] = numpy.sum(x139 * x179 * x96)
    result[4, 14] = numpy.sum(35.33135663832854 * x142 * x182 * x91)
    result[5, 0] = numpy.sum(x147 * x185)
    result[5, 1] = numpy.sum(x184 * x186 * x40)
    result[5, 2] = numpy.sum(x186 * x188)
    result[5, 3] = numpy.sum(x141 * x154 * x184)
    result[5, 4] = numpy.sum(x128 * x188 * x21 * x59)
    result[5, 5] = numpy.sum(x154 * x191)
    result[5, 6] = numpy.sum(x133 * x162 * x184)
    result[5, 7] = numpy.sum(x141 * x161 * x188)
    result[5, 8] = numpy.sum(x161 * x191 * x40)
    result[5, 9] = numpy.sum(x19 * x194 * x75)
    result[5, 10] = numpy.sum(x195 * x3 * x84)
    result[5, 11] = numpy.sum(x133 * x171 * x188)
    result[5, 12] = numpy.sum(x127 * x196 * x3)
    result[5, 13] = numpy.sum(x123 * x182 * x194)
    result[5, 14] = numpy.sum(x163 * x198)
    result[6, 0] = numpy.sum(x199 * x200 * x85)
    result[6, 1] = numpy.sum(x202 * x203)
    result[6, 2] = numpy.sum(x199 * x203 * x46)
    result[6, 3] = numpy.sum(x205 * x206 * x71)
    result[6, 4] = numpy.sum(x143 * x201 * x74)
    result[6, 5] = numpy.sum(x199 * x206 * x87)
    result[6, 6] = numpy.sum(x207 * x209)
    result[6, 7] = numpy.sum(x205 * x210 * x56)
    result[6, 8] = numpy.sum(x201 * x212 * x63)
    result[6, 9] = numpy.sum(x199 * x207 * x213)
    result[6, 10] = numpy.sum(
        x165 * x35 * (3.0 * x0 * (2.0 * x158 + x159 + x204) + x208 * x40)
    )
    result[6, 11] = numpy.sum(x209 * x46)
    result[6, 12] = numpy.sum(x169 * x205 * x64)
    result[6, 13] = numpy.sum(x202 * x213)
    result[6, 14] = numpy.sum(x169 * x199 * x90)
    result[7, 0] = numpy.sum(x122 * x150 * x200)
    result[7, 1] = numpy.sum(x134 * x152 * x214)
    result[7, 2] = numpy.sum(x135 * x149 * x214)
    result[7, 3] = numpy.sum(x121 * x157 * x215)
    result[7, 4] = numpy.sum(x135 * x152 * x216)
    result[7, 5] = numpy.sum(x132 * x149 * x217)
    result[7, 6] = numpy.sum(53.96953873354034 * x121 * x160 * x210)
    result[7, 7] = numpy.sum(x126 * x170 * x218)
    result[7, 8] = numpy.sum(x131 * x152 * x219)
    result[7, 9] = numpy.sum(x149 * x220 * x4)
    result[7, 10] = numpy.sum(x122 * x167)
    result[7, 11] = numpy.sum(x126 * x160 * x211)
    result[7, 12] = numpy.sum(x132 * x170)
    result[7, 13] = numpy.sum(x152 * x220)
    result[7, 14] = numpy.sum(x142 * x173)
    result[8, 0] = numpy.sum(x185 * x200 * x92)
    result[8, 1] = numpy.sum(x119 * x184 * x214)
    result[8, 2] = numpy.sum(x114 * x188 * x214)
    result[8, 3] = numpy.sum(x101 * x184 * x217)
    result[8, 4] = numpy.sum(x119 * x188 * x216)
    result[8, 5] = numpy.sum(x191 * x215 * x91)
    result[8, 6] = numpy.sum(x184 * x221 * x4)
    result[8, 7] = numpy.sum(x100 * x188 * x219)
    result[8, 8] = numpy.sum(x196 * x218 * x96)
    result[8, 9] = numpy.sum(x181 * x194 * x222 * x91)
    result[8, 10] = numpy.sum(x115 * x195)
    result[8, 11] = numpy.sum(x188 * x221)
    result[8, 12] = numpy.sum(x101 * x196)
    result[8, 13] = numpy.sum(x194 * x211 * x96)
    result[8, 14] = numpy.sum(x198 * x92)
    result[9, 0] = numpy.sum(x200 * x224 * x59)
    result[9, 1] = numpy.sum(x223 * x225 * x41)
    result[9, 2] = numpy.sum(x225 * x227)
    result[9, 3] = numpy.sum(x217 * x223 * x53)
    result[9, 4] = numpy.sum(x143 * x226 * x76)
    result[9, 5] = numpy.sum(x206 * x229 * x59)
    result[9, 6] = numpy.sum(x207 * x223 * x230)
    result[9, 7] = numpy.sum(x212 * x226 * x52)
    result[9, 8] = numpy.sum(x222 * x231 * x57)
    result[9, 9] = numpy.sum(x207 * x233)
    result[9, 10] = numpy.sum(x169 * x224 * x84)
    result[9, 11] = numpy.sum(x227 * x230)
    result[9, 12] = numpy.sum(x231 * x55)
    result[9, 13] = numpy.sum(x233 * x41)
    result[9, 14] = numpy.sum(
        9.122517057277419 * x181 * (3.0 * x0 * (2.0 * x192 + x193 + x228) + x232 * x45)
    )
    return result


def ovlp3d_40(ax, da, A, bx, db, B):
    """Cartesian 3D (gs) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 1), dtype=float)

    x0 = (ax + bx) ** (-1.0)
    x1 = ax * bx * x0
    x2 = numpy.exp(-x1 * (A[1] - B[1]) ** 2)
    x3 = 0.5 / (ax + bx)
    x4 = x0 * (ax * A[0] + bx * B[0]) - A[0]
    x5 = numpy.exp(-x1 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x0)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x4**2 * x8
    x10 = x3 * x8
    x11 = x10 + x9
    x12 = x4 * (2.0 * x10 + x11)
    x13 = 0.5641895835477563
    x14 = numpy.exp(-x1 * (A[2] - B[2]) ** 2)
    x15 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**1.5)
    x16 = x14 * x15
    x17 = x0 * x13 * x16
    x18 = 4.416419579791068 * x17
    x19 = x0 * (ax * A[1] + bx * B[1]) - A[1]
    x20 = x19 * x2
    x21 = 11.68474789344354 * x17
    x22 = x12 * x21
    x23 = x0 * (ax * A[2] + bx * B[2]) - A[2]
    x24 = x2 * x7
    x25 = x19**2 * x24
    x26 = x24 * x3
    x27 = x25 + x26
    x28 = 0.3183098861837907
    x29 = 15.08494466531301 * x11 * x28 * x6
    x30 = 26.12789058968724 * x17 * x23
    x31 = x14 * x7
    x32 = x23**2 * x31
    x33 = x3 * x31
    x34 = x32 + x33
    x35 = x15 * x34
    x36 = x2 * x35
    x37 = x19 * (2.0 * x26 + x27)
    x38 = x21 * x37 * x5
    x39 = x27 * x5
    x40 = x0 * x13 * x5
    x41 = x23 * (2.0 * x33 + x34)
    x42 = x15 * x2 * x40
    x43 = 11.68474789344354 * x41 * x42

    # 15 item(s)
    result[0, 0] = numpy.sum(x18 * x2 * (x12 * x4 + 3.0 * x3 * (x10 + x9)))
    result[1, 0] = numpy.sum(x20 * x22)
    result[2, 0] = numpy.sum(x2 * x22 * x23)
    result[3, 0] = numpy.sum(x16 * x27 * x29)
    result[4, 0] = numpy.sum(x11 * x20 * x30)
    result[5, 0] = numpy.sum(x29 * x36)
    result[6, 0] = numpy.sum(x38 * x4)
    result[7, 0] = numpy.sum(x30 * x39 * x4)
    result[8, 0] = numpy.sum(26.12789058968724 * x19 * x36 * x4 * x40)
    result[9, 0] = numpy.sum(x4 * x43)
    result[10, 0] = numpy.sum(x18 * x5 * (x19 * x37 + 3.0 * x3 * (x25 + x26)))
    result[11, 0] = numpy.sum(x23 * x38)
    result[12, 0] = numpy.sum(15.08494466531301 * x28 * x35 * x39 * x6)
    result[13, 0] = numpy.sum(x19 * x43)
    result[14, 0] = numpy.sum(
        4.416419579791068 * x42 * (x23 * x41 + 3.0 * x3 * (x32 + x33))
    )
    return result


def ovlp3d_41(ax, da, A, bx, db, B):
    """Cartesian 3D (gp) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 3), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3 * x8
    x10 = -x2 - B[0]
    x11 = x0 * (x10 * x8 + x9)
    x12 = x0 * x8
    x13 = x10 * x9
    x14 = x12 + x13
    x15 = x14 * x3
    x16 = x3**2 * x8
    x17 = x12 + x16
    x18 = x3 * (2.0 * x12 + x17)
    x19 = 3.0 * x12
    x20 = x11 + x15
    x21 = x0 * (2.0 * x13 + x16 + x19) + x20 * x3
    x22 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x23 = 0.5641895835477563
    x24 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x25 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**2.5)
    x26 = x24 * x25
    x27 = x1 * x23 * x26
    x28 = 8.832839159582136 * x27
    x29 = x22 * x28
    x30 = -x1 * (ax * A[1] + bx * B[1])
    x31 = -x30 - B[1]
    x32 = x29 * (x0 * (3.0 * x16 + x19) + x18 * x3)
    x33 = -x1 * (ax * A[2] + bx * B[2])
    x34 = -x33 - B[2]
    x35 = -x30 - A[1]
    x36 = x22 * x35
    x37 = x27 * x36
    x38 = 23.36949578688709 * x21
    x39 = 23.36949578688709 * x18
    x40 = x0 * x7
    x41 = x22 * x40
    x42 = x22 * x7
    x43 = x35 * x42
    x44 = x31 * x43
    x45 = x41 + x44
    x46 = 0.3183098861837907 * x6
    x47 = x26 * x46
    x48 = x45 * x47
    x49 = x22 * x39
    x50 = x27 * x34
    x51 = -x33 - A[2]
    x52 = x27 * x51
    x53 = x24 * x40
    x54 = x24 * x7
    x55 = x51 * x54
    x56 = x34 * x55
    x57 = x53 + x56
    x58 = x25 * x46
    x59 = x57 * x58
    x60 = x35**2 * x42
    x61 = x41 + x60
    x62 = 30.16988933062603 * x47
    x63 = x61 * x62
    x64 = x0 * (x31 * x42 + x43)
    x65 = x35 * x45
    x66 = x64 + x65
    x67 = 52.25578117937447 * x17
    x68 = x51**2 * x54
    x69 = x53 + x68
    x70 = x22 * x58
    x71 = 30.16988933062603 * x70
    x72 = x69 * x71
    x73 = x0 * (x34 * x54 + x55)
    x74 = x51 * x57
    x75 = x73 + x74
    x76 = x35 * (2.0 * x41 + x61)
    x77 = 23.36949578688709 * x14
    x78 = 3.0 * x41
    x79 = x0 * (2.0 * x44 + x60 + x78) + x35 * x66
    x80 = 23.36949578688709 * x5
    x81 = x3 * x80
    x82 = x76 * x80
    x83 = 52.25578117937447 * x14
    x84 = x5 * x66
    x85 = 52.25578117937447 * x3
    x86 = x5 * x61
    x87 = x45 * x58
    x88 = x1 * x22 * x23 * x25
    x89 = x5 * x88
    x90 = x51 * (2.0 * x53 + x69)
    x91 = x80 * x90
    x92 = x88 * x91
    x93 = 3.0 * x53
    x94 = x0 * (2.0 * x56 + x68 + x93) + x51 * x75
    x95 = x88 * x94
    x96 = x28 * x5
    x97 = x96 * (x0 * (3.0 * x60 + x78) + x35 * x76)
    x98 = 30.16988933062603 * x58
    x99 = x69 * x98
    x100 = 8.832839159582136 * x89
    x101 = x100 * (x0 * (3.0 * x68 + x93) + x51 * x90)

    # 45 item(s)
    result[0, 0] = numpy.sum(x29 * (x0 * (3.0 * x11 + 3.0 * x15 + x18) + x21 * x3))
    result[0, 1] = numpy.sum(x31 * x32)
    result[0, 2] = numpy.sum(x32 * x34)
    result[1, 0] = numpy.sum(x37 * x38)
    result[1, 1] = numpy.sum(x39 * x48)
    result[1, 2] = numpy.sum(x35 * x49 * x50)
    result[2, 0] = numpy.sum(x22 * x38 * x52)
    result[2, 1] = numpy.sum(x31 * x49 * x52)
    result[2, 2] = numpy.sum(x49 * x59)
    result[3, 0] = numpy.sum(x20 * x63)
    result[3, 1] = numpy.sum(x17 * x62 * x66)
    result[3, 2] = numpy.sum(x17 * x34 * x63)
    result[4, 0] = numpy.sum(52.25578117937447 * x20 * x37 * x51)
    result[4, 1] = numpy.sum(x48 * x51 * x67)
    result[4, 2] = numpy.sum(x36 * x59 * x67)
    result[5, 0] = numpy.sum(x20 * x72)
    result[5, 1] = numpy.sum(x17 * x31 * x72)
    result[5, 2] = numpy.sum(x17 * x71 * x75)
    result[6, 0] = numpy.sum(x47 * x76 * x77)
    result[6, 1] = numpy.sum(x27 * x79 * x81)
    result[6, 2] = numpy.sum(x3 * x50 * x82)
    result[7, 0] = numpy.sum(x47 * x51 * x61 * x83)
    result[7, 1] = numpy.sum(x52 * x84 * x85)
    result[7, 2] = numpy.sum(x59 * x85 * x86)
    result[8, 0] = numpy.sum(x35 * x69 * x70 * x83)
    result[8, 1] = numpy.sum(x5 * x69 * x85 * x87)
    result[8, 2] = numpy.sum(x35 * x75 * x85 * x89)
    result[9, 0] = numpy.sum(x70 * x77 * x90)
    result[9, 1] = numpy.sum(x3 * x31 * x92)
    result[9, 2] = numpy.sum(x81 * x95)
    result[10, 0] = numpy.sum(x10 * x97)
    result[10, 1] = numpy.sum(x96 * (x0 * (3.0 * x64 + 3.0 * x65 + x76) + x35 * x79))
    result[10, 2] = numpy.sum(x34 * x97)
    result[11, 0] = numpy.sum(x10 * x52 * x82)
    result[11, 1] = numpy.sum(x52 * x79 * x80)
    result[11, 2] = numpy.sum(x59 * x82)
    result[12, 0] = numpy.sum(x10 * x86 * x99)
    result[12, 1] = numpy.sum(x84 * x99)
    result[12, 2] = numpy.sum(x75 * x86 * x98)
    result[13, 0] = numpy.sum(x10 * x35 * x92)
    result[13, 1] = numpy.sum(x87 * x91)
    result[13, 2] = numpy.sum(x35 * x80 * x95)
    result[14, 0] = numpy.sum(x10 * x101)
    result[14, 1] = numpy.sum(x101 * x31)
    result[14, 2] = numpy.sum(x100 * (x0 * (3.0 * x73 + 3.0 * x74 + x90) + x51 * x94))
    return result


def ovlp3d_42(ax, da, A, bx, db, B):
    """Cartesian 3D (gd) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 6), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = ax * bx * x1
    x5 = numpy.exp(-x4 * (A[0] - B[0]) ** 2)
    x6 = numpy.sqrt(x1)
    x7 = 1.772453850905516 * x6
    x8 = x5 * x7
    x9 = x3**2 * x8
    x10 = x0 * x8
    x11 = 3.0 * x10
    x12 = -x2 - B[0]
    x13 = x3 * x8
    x14 = x12 * x13
    x15 = x11 + 2.0 * x14
    x16 = x0 * (x15 + x9)
    x17 = x0 * (x12 * x8 + x13)
    x18 = x10 + x14
    x19 = x18 * x3
    x20 = x17 + x19
    x21 = x20 * x3
    x22 = x12**2 * x8
    x23 = x0 * (x15 + x22)
    x24 = x12 * x18
    x25 = x17 + x24
    x26 = x25 * x3
    x27 = x23 + x26
    x28 = 2.0 * x0 * (2.0 * x17 + x19 + x24) + x27 * x3
    x29 = numpy.exp(-x4 * (A[2] - B[2]) ** 2)
    x30 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**3.5)
    x31 = x29 * x30
    x32 = 10.19928413298683 * x31
    x33 = numpy.exp(-x4 * (A[1] - B[1]) ** 2)
    x34 = 0.5641895835477563 * x1
    x35 = x33 * x34
    x36 = -x1 * (ax * A[1] + bx * B[1])
    x37 = -x36 - B[1]
    x38 = 17.66567831916427 * x37
    x39 = x10 + x9
    x40 = 2.0 * x0 * x13 + x3 * x39
    x41 = x16 + x21
    x42 = x31 * x35
    x43 = x42 * (x0 * (3.0 * x17 + 3.0 * x19 + x40) + x3 * x41)
    x44 = -x1 * (ax * A[2] + bx * B[2])
    x45 = -x44 - B[2]
    x46 = 17.66567831916427 * x45
    x47 = x33 * x7
    x48 = x37**2 * x47
    x49 = x0 * x47
    x50 = x48 + x49
    x51 = x0 * (x11 + 3.0 * x9) + x3 * x40
    x52 = 0.3183098861837907 * x6
    x53 = x51 * x52
    x54 = x42 * x45
    x55 = x30 * x33
    x56 = x29 * x7
    x57 = x45**2 * x56
    x58 = x0 * x56
    x59 = x57 + x58
    x60 = 10.19928413298683 * x59
    x61 = -x36 - A[1]
    x62 = 26.98476936677017 * x61
    x63 = x28 * x42
    x64 = 46.73899157377418 * x41
    x65 = x47 * x61
    x66 = x37 * x65
    x67 = x49 + x66
    x68 = x31 * x52
    x69 = x67 * x68
    x70 = 26.98476936677017 * x40
    x71 = x0 * (x37 * x47 + x65)
    x72 = x37 * x67
    x73 = x71 + x72
    x74 = x68 * x73
    x75 = 46.73899157377418 * x40
    x76 = x52 * x55
    x77 = x70 * x76
    x78 = -x44 - A[2]
    x79 = 26.98476936677017 * x78
    x80 = x42 * x78
    x81 = x56 * x78
    x82 = x45 * x81
    x83 = x58 + x82
    x84 = x76 * x83
    x85 = x68 * x78
    x86 = x0 * (x45 * x56 + x81)
    x87 = x45 * x83
    x88 = x86 + x87
    x89 = x47 * x61**2
    x90 = x49 + x89
    x91 = 34.83718745291631 * x90
    x92 = 60.33977866125205 * x20
    x93 = x61 * x67
    x94 = x71 + x93
    x95 = x68 * x94
    x96 = 3.0 * x49
    x97 = 2.0 * x66 + x96
    x98 = x0 * (x48 + x97)
    x99 = x61 * x73
    x100 = x98 + x99
    x101 = 34.83718745291631 * x39
    x102 = 0.1795871221251666 * x30
    x103 = x102 * x39
    x104 = 60.33977866125206 * x61
    x105 = 104.5115623587489 * x67
    x106 = 104.5115623587489 * x83
    x107 = x61 * x76
    x108 = 60.33977866125206 * x39
    x109 = x56 * x78**2
    x110 = x109 + x58
    x111 = 34.83718745291631 * x110
    x112 = x76 * x92
    x113 = x78 * x83
    x114 = x113 + x86
    x115 = 60.33977866125205 * x114
    x116 = 3.0 * x58
    x117 = x116 + 2.0 * x82
    x118 = x0 * (x117 + x57)
    x119 = x78 * x88
    x120 = x118 + x119
    x121 = 26.98476936677017 * x25
    x122 = x61 * (2.0 * x49 + x90)
    x123 = x122 * x68
    x124 = x0 * (x89 + x97)
    x125 = x61 * x94
    x126 = x124 + x125
    x127 = 46.73899157377418 * x18
    x128 = 26.98476936677017 * x3
    x129 = 2.0 * x0 * (2.0 * x71 + x72 + x93) + x100 * x61
    x130 = x34 * x5
    x131 = x130 * x31
    x132 = x129 * x131
    x133 = 46.73899157377418 * x126
    x134 = x131 * x3
    x135 = x30 * x5
    x136 = x135 * x52
    x137 = 26.98476936677017 * x136
    x138 = x122 * x137
    x139 = 60.33977866125206 * x90
    x140 = 104.5115623587489 * x18
    x141 = x102 * x18
    x142 = x136 * x94
    x143 = x136 * x3
    x144 = 60.33977866125206 * x110
    x145 = x135 * x35
    x146 = x145 * x3
    x147 = x78 * (x110 + 2.0 * x58)
    x148 = x147 * x76
    x149 = x0 * (x109 + x117)
    x150 = x114 * x78
    x151 = x149 + x150
    x152 = x137 * x147
    x153 = 46.73899157377418 * x151
    x154 = 2.0 * x0 * (x113 + 2.0 * x86 + x87) + x120 * x78
    x155 = x145 * x154
    x156 = x10 + x22
    x157 = x0 * (3.0 * x89 + x96) + x122 * x61
    x158 = x157 * x52
    x159 = x131 * (x0 * (x122 + 3.0 * x71 + 3.0 * x93) + x126 * x61)
    x160 = 17.66567831916427 * x12
    x161 = x12 * x131
    x162 = x136 * x83
    x163 = 46.73899157377418 * x12
    x164 = x136 * x67
    x165 = x12 * x145
    x166 = x0 * (3.0 * x109 + x116) + x147 * x78
    x167 = 10.19928413298683 * x166
    x168 = x145 * (x0 * (3.0 * x113 + x147 + 3.0 * x86) + x151 * x78)

    # 90 item(s)
    result[0, 0] = numpy.sum(
        x32 * x35 * (x0 * (2.0 * x16 + 2.0 * x21 + 3.0 * x23 + 3.0 * x26) + x28 * x3)
    )
    result[0, 1] = numpy.sum(x38 * x43)
    result[0, 2] = numpy.sum(x43 * x46)
    result[0, 3] = numpy.sum(x32 * x50 * x53)
    result[0, 4] = numpy.sum(x38 * x51 * x54)
    result[0, 5] = numpy.sum(x53 * x55 * x60)
    result[1, 0] = numpy.sum(x62 * x63)
    result[1, 1] = numpy.sum(x64 * x69)
    result[1, 2] = numpy.sum(x54 * x61 * x64)
    result[1, 3] = numpy.sum(x70 * x74)
    result[1, 4] = numpy.sum(x45 * x69 * x75)
    result[1, 5] = numpy.sum(x59 * x61 * x77)
    result[2, 0] = numpy.sum(x63 * x79)
    result[2, 1] = numpy.sum(x37 * x64 * x80)
    result[2, 2] = numpy.sum(x64 * x84)
    result[2, 3] = numpy.sum(x50 * x70 * x85)
    result[2, 4] = numpy.sum(x37 * x75 * x84)
    result[2, 5] = numpy.sum(x77 * x88)
    result[3, 0] = numpy.sum(x27 * x68 * x91)
    result[3, 1] = numpy.sum(x92 * x95)
    result[3, 2] = numpy.sum(x45 * x68 * x90 * x92)
    result[3, 3] = numpy.sum(x100 * x101 * x68)
    result[3, 4] = numpy.sum(60.33977866125205 * x39 * x45 * x95)
    result[3, 5] = numpy.sum(x103 * x59 * x91)
    result[4, 0] = numpy.sum(x104 * x27 * x80)
    result[4, 1] = numpy.sum(x105 * x20 * x85)
    result[4, 2] = numpy.sum(x106 * x107 * x20)
    result[4, 3] = numpy.sum(x108 * x74 * x78)
    result[4, 4] = numpy.sum(x103 * x106 * x67)
    result[4, 5] = numpy.sum(x107 * x108 * x88)
    result[5, 0] = numpy.sum(x111 * x27 * x76)
    result[5, 1] = numpy.sum(x110 * x112 * x37)
    result[5, 2] = numpy.sum(x112 * x114)
    result[5, 3] = numpy.sum(x103 * x111 * x50)
    result[5, 4] = numpy.sum(x115 * x37 * x39 * x76)
    result[5, 5] = numpy.sum(x101 * x120 * x76)
    result[6, 0] = numpy.sum(x121 * x123)
    result[6, 1] = numpy.sum(x126 * x127 * x68)
    result[6, 2] = numpy.sum(x123 * x127 * x45)
    result[6, 3] = numpy.sum(x128 * x132)
    result[6, 4] = numpy.sum(x133 * x134 * x45)
    result[6, 5] = numpy.sum(x138 * x3 * x59)
    result[7, 0] = numpy.sum(x139 * x25 * x85)
    result[7, 1] = numpy.sum(x140 * x78 * x95)
    result[7, 2] = numpy.sum(x106 * x141 * x90)
    result[7, 3] = numpy.sum(60.33977866125206 * x100 * x134 * x78)
    result[7, 4] = numpy.sum(x106 * x142 * x3)
    result[7, 5] = numpy.sum(x139 * x143 * x88)
    result[8, 0] = numpy.sum(x107 * x144 * x25)
    result[8, 1] = numpy.sum(x105 * x110 * x141)
    result[8, 2] = numpy.sum(x107 * x114 * x140)
    result[8, 3] = numpy.sum(x143 * x144 * x73)
    result[8, 4] = numpy.sum(x105 * x114 * x143)
    result[8, 5] = numpy.sum(x104 * x120 * x146)
    result[9, 0] = numpy.sum(x121 * x148)
    result[9, 1] = numpy.sum(x127 * x148 * x37)
    result[9, 2] = numpy.sum(x127 * x151 * x76)
    result[9, 3] = numpy.sum(x152 * x3 * x50)
    result[9, 4] = numpy.sum(x146 * x153 * x37)
    result[9, 5] = numpy.sum(x128 * x155)
    result[10, 0] = numpy.sum(x156 * x158 * x32)
    result[10, 1] = numpy.sum(x159 * x160)
    result[10, 2] = numpy.sum(x157 * x161 * x46)
    result[10, 3] = numpy.sum(
        x130 * x32 * (x0 * (2.0 * x124 + 2.0 * x125 + 3.0 * x98 + 3.0 * x99) + x129 * x61)
    )
    result[10, 4] = numpy.sum(x159 * x46)
    result[10, 5] = numpy.sum(x135 * x158 * x60)
    result[11, 0] = numpy.sum(x123 * x156 * x79)
    result[11, 1] = numpy.sum(x133 * x161 * x78)
    result[11, 2] = numpy.sum(x122 * x162 * x163)
    result[11, 3] = numpy.sum(x132 * x79)
    result[11, 4] = numpy.sum(x133 * x162)
    result[11, 5] = numpy.sum(x138 * x88)
    result[12, 0] = numpy.sum(x102 * x110 * x156 * x91)
    result[12, 1] = numpy.sum(60.33977866125205 * x110 * x12 * x142)
    result[12, 2] = numpy.sum(x115 * x12 * x136 * x90)
    result[12, 3] = numpy.sum(x100 * x111 * x136)
    result[12, 4] = numpy.sum(x115 * x142)
    result[12, 5] = numpy.sum(x120 * x136 * x91)
    result[13, 0] = numpy.sum(x148 * x156 * x62)
    result[13, 1] = numpy.sum(x147 * x163 * x164)
    result[13, 2] = numpy.sum(x153 * x165 * x61)
    result[13, 3] = numpy.sum(x152 * x73)
    result[13, 4] = numpy.sum(x153 * x164)
    result[13, 5] = numpy.sum(x155 * x62)
    result[14, 0] = numpy.sum(x156 * x167 * x76)
    result[14, 1] = numpy.sum(x165 * x166 * x38)
    result[14, 2] = numpy.sum(x160 * x168)
    result[14, 3] = numpy.sum(x136 * x167 * x50)
    result[14, 4] = numpy.sum(x168 * x38)
    result[14, 5] = numpy.sum(
        10.19928413298683
        * x145
        * (x0 * (3.0 * x118 + 3.0 * x119 + 2.0 * x149 + 2.0 * x150) + x154 * x78)
    )
    return result


def ovlp3d_43(ax, da, A, bx, db, B):
    """Cartesian 3D (gf) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 10), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = -x2 - B[0]
    x5 = ax * bx * x1
    x6 = numpy.exp(-x5 * (A[0] - B[0]) ** 2)
    x7 = numpy.sqrt(x1)
    x8 = 1.772453850905516 * x7
    x9 = x6 * x8
    x10 = x4**2 * x9
    x11 = x0 * x9
    x12 = 3.0 * x11
    x13 = x3 * x9
    x14 = x13 * x4
    x15 = x12 + 2.0 * x14
    x16 = x0 * (x10 + x15)
    x17 = x4 * x9
    x18 = x0 * (x13 + x17)
    x19 = x11 + x14
    x20 = x19 * x4
    x21 = x18 + x20
    x22 = x21 * x3
    x23 = x16 + x22
    x24 = x23 * x3
    x25 = x23 * x4
    x26 = x19 * x3
    x27 = 2.0 * x0 * (2.0 * x18 + x20 + x26)
    x28 = x21 * x4
    x29 = 3.0 * x22
    x30 = x25 + x27
    x31 = x0 * (5.0 * x16 + 2.0 * x28 + x29) + x3 * x30
    x32 = numpy.exp(-x5 * (A[2] - B[2]) ** 2)
    x33 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**4.5)
    x34 = x32 * x33
    x35 = 9.122517057277419 * x34
    x36 = numpy.exp(-x5 * (A[1] - B[1]) ** 2)
    x37 = 0.5641895835477563 * x1
    x38 = x36 * x37
    x39 = -x1 * (ax * A[1] + bx * B[1])
    x40 = -x39 - B[1]
    x41 = x38 * x40
    x42 = x3**2 * x9
    x43 = x0 * (x15 + x42)
    x44 = x18 + x26
    x45 = x3 * x44
    x46 = x24 + x27
    x47 = 20.39856826597365 * x34
    x48 = x47 * (x0 * (3.0 * x16 + x29 + 2.0 * x43 + 2.0 * x45) + x3 * x46)
    x49 = -x1 * (ax * A[2] + bx * B[2])
    x50 = -x49 - B[2]
    x51 = x38 * x50
    x52 = x11 + x42
    x53 = 2.0 * x0
    x54 = x13 * x53 + x3 * x52
    x55 = x43 + x45
    x56 = x0 * (3.0 * x18 + 3.0 * x26 + x54) + x3 * x55
    x57 = x36 * x8
    x58 = x40**2 * x57
    x59 = x0 * x57
    x60 = x58 + x59
    x61 = 0.3183098861837907 * x7
    x62 = x60 * x61
    x63 = x47 * x62
    x64 = x34 * x50
    x65 = 35.33135663832854 * x64
    x66 = x33 * x61
    x67 = x36 * x66
    x68 = x32 * x8
    x69 = x50**2 * x68
    x70 = x0 * x68
    x71 = x69 + x70
    x72 = 20.39856826597365 * x71
    x73 = x67 * x72
    x74 = 2.0 * x59
    x75 = x40 * (x60 + x74)
    x76 = x0 * (x12 + 3.0 * x42) + x3 * x54
    x77 = x35 * x61
    x78 = 2.0 * x70
    x79 = x50 * (x71 + x78)
    x80 = 9.122517057277419 * x79
    x81 = -x39 - A[1]
    x82 = x38 * x81
    x83 = 24.13591146450082 * x34
    x84 = x31 * x83
    x85 = x57 * x81
    x86 = x40 * x85
    x87 = x59 + x86
    x88 = 53.96953873354034 * x87
    x89 = x34 * x61
    x90 = 53.96953873354034 * x46
    x91 = 53.96953873354034 * x55
    x92 = x0 * (x40 * x57 + x85)
    x93 = x40 * x87
    x94 = x92 + x93
    x95 = x89 * x94
    x96 = 93.47798314754836 * x55
    x97 = x50 * x89
    x98 = x67 * x91
    x99 = 24.13591146450082 * x54
    x100 = 3.0 * x59
    x101 = x100 + 2.0 * x86
    x102 = x0 * (x101 + x58)
    x103 = x40 * x94
    x104 = x102 + x103
    x105 = x104 * x89
    x106 = 53.96953873354034 * x54
    x107 = 0.1795871221251666 * x33
    x108 = x107 * x71
    x109 = x67 * x99
    x110 = -x49 - A[2]
    x111 = x110 * x34
    x112 = x110 * x68
    x113 = x112 * x50
    x114 = x113 + x70
    x115 = 53.96953873354034 * x67
    x116 = x40 * x67
    x117 = x0 * (x112 + x50 * x68)
    x118 = x114 * x50
    x119 = x117 + x118
    x120 = x110 * x89
    x121 = x107 * x114
    x122 = 3.0 * x70
    x123 = 2.0 * x113 + x122
    x124 = x0 * (x123 + x69)
    x125 = x119 * x50
    x126 = x124 + x125
    x127 = x57 * x81**2
    x128 = x127 + x59
    x129 = 31.15932771584945 * x128
    x130 = x81 * x87
    x131 = x130 + x92
    x132 = 69.67437490583262 * x89
    x133 = x132 * x23
    x134 = x81 * x94
    x135 = x102 + x134
    x136 = x132 * x135
    x137 = 120.6795573225041 * x44
    x138 = 69.67437490583262 * x108
    x139 = 2.0 * x0 * (x130 + 2.0 * x92 + x93)
    x140 = x135 * x40
    x141 = x139 + x140
    x142 = 31.15932771584945 * x52
    x143 = x107 * x52
    x144 = 53.96953873354034 * x111
    x145 = 120.6795573225041 * x23
    x146 = x67 * x81
    x147 = 120.6795573225041 * x110
    x148 = 209.0231247174979 * x121
    x149 = 120.6795573225041 * x119
    x150 = 120.6795573225041 * x121
    x151 = x115 * x81
    x152 = x110**2 * x68
    x153 = x152 + x70
    x154 = 31.15932771584945 * x153
    x155 = 69.67437490583262 * x67
    x156 = x155 * x23
    x157 = x110 * x114
    x158 = x117 + x157
    x159 = 69.67437490583262 * x60
    x160 = x107 * x153
    x161 = x110 * x119
    x162 = x124 + x161
    x163 = x155 * x162
    x164 = 2.0 * x0 * (2.0 * x117 + x118 + x157)
    x165 = x162 * x50
    x166 = x164 + x165
    x167 = x16 + x28
    x168 = 24.13591146450082 * x167
    x169 = x81 * (x128 + x74)
    x170 = x169 * x89
    x171 = x0 * (x101 + x127)
    x172 = x131 * x81
    x173 = x171 + x172
    x174 = 53.96953873354034 * x173
    x175 = x21 * x89
    x176 = 53.96953873354034 * x169
    x177 = x135 * x81
    x178 = x139 + x177
    x179 = 53.96953873354034 * x19
    x180 = 93.47798314754836 * x19
    x181 = x37 * x6
    x182 = x181 * x3
    x183 = 3.0 * x134
    x184 = x0 * (5.0 * x102 + 2.0 * x103 + x183) + x141 * x81
    x185 = x184 * x83
    x186 = x6 * x66
    x187 = x174 * x186
    x188 = 24.13591146450082 * x186
    x189 = x169 * x188
    x190 = 120.6795573225041 * x135
    x191 = x107 * x19
    x192 = x186 * x3
    x193 = 53.96953873354034 * x186
    x194 = x193 * x3
    x195 = 120.6795573225041 * x160
    x196 = 120.6795573225041 * x146
    x197 = 120.6795573225041 * x192
    x198 = x33 * x6
    x199 = x198 * x38
    x200 = 53.96953873354034 * x3
    x201 = x110 * (x153 + x78)
    x202 = x201 * x67
    x203 = x115 * x21
    x204 = x0 * (x123 + x152)
    x205 = x110 * x158
    x206 = x204 + x205
    x207 = x107 * x201
    x208 = x110 * x162
    x209 = x164 + x208
    x210 = x188 * x201
    x211 = x198 * x62
    x212 = x199 * x40
    x213 = 3.0 * x161
    x214 = x0 * (5.0 * x124 + 2.0 * x125 + x213) + x110 * x166
    x215 = 24.13591146450082 * x199 * x214
    x216 = x10 + x11
    x217 = x17 * x53 + x216 * x4
    x218 = x0 * (x100 + 3.0 * x127) + x169 * x81
    x219 = x0 * (3.0 * x130 + x169 + 3.0 * x92) + x173 * x81
    x220 = x216 * x47 * x61
    x221 = x181 * x4
    x222 = x47 * (x0 * (3.0 * x102 + 2.0 * x171 + 2.0 * x172 + x183) + x178 * x81)
    x223 = x186 * x72
    x224 = 24.13591146450082 * x217
    x225 = x186 * x4
    x226 = 93.47798314754836 * x225
    x227 = 69.67437490583262 * x216
    x228 = 69.67437490583262 * x186
    x229 = x135 * x228
    x230 = x162 * x228
    x231 = x193 * x94
    x232 = x199 * x4
    x233 = x0 * (x122 + 3.0 * x152) + x110 * x201
    x234 = 9.122517057277419 * x233
    x235 = x216 * x67
    x236 = 20.39856826597365 * x233
    x237 = x0 * (3.0 * x117 + 3.0 * x157 + x201) + x110 * x206
    x238 = 20.39856826597365 * x237
    x239 = (
        20.39856826597365 * x0 * (3.0 * x124 + 2.0 * x204 + 2.0 * x205 + x213)
        + 20.39856826597365 * x110 * x209
    )

    # 150 item(s)
    result[0, 0] = numpy.sum(x35 * x38 * (3.0 * x0 * (x24 + x25 + 2.0 * x27) + x3 * x31))
    result[0, 1] = numpy.sum(x41 * x48)
    result[0, 2] = numpy.sum(x48 * x51)
    result[0, 3] = numpy.sum(x56 * x63)
    result[0, 4] = numpy.sum(x41 * x56 * x65)
    result[0, 5] = numpy.sum(x56 * x73)
    result[0, 6] = numpy.sum(x75 * x76 * x77)
    result[0, 7] = numpy.sum(x50 * x63 * x76)
    result[0, 8] = numpy.sum(x40 * x73 * x76)
    result[0, 9] = numpy.sum(x67 * x76 * x80)
    result[1, 0] = numpy.sum(x82 * x84)
    result[1, 1] = numpy.sum(x46 * x88 * x89)
    result[1, 2] = numpy.sum(x34 * x51 * x81 * x90)
    result[1, 3] = numpy.sum(x91 * x95)
    result[1, 4] = numpy.sum(x87 * x96 * x97)
    result[1, 5] = numpy.sum(x71 * x81 * x98)
    result[1, 6] = numpy.sum(x105 * x99)
    result[1, 7] = numpy.sum(x106 * x50 * x95)
    result[1, 8] = numpy.sum(x108 * x54 * x88)
    result[1, 9] = numpy.sum(x109 * x79 * x81)
    result[2, 0] = numpy.sum(x110 * x38 * x84)
    result[2, 1] = numpy.sum(x111 * x41 * x90)
    result[2, 2] = numpy.sum(x114 * x115 * x46)
    result[2, 3] = numpy.sum(x111 * x62 * x91)
    result[2, 4] = numpy.sum(x114 * x116 * x96)
    result[2, 5] = numpy.sum(x119 * x98)
    result[2, 6] = numpy.sum(x120 * x75 * x99)
    result[2, 7] = numpy.sum(x106 * x121 * x60)
    result[2, 8] = numpy.sum(x106 * x116 * x119)
    result[2, 9] = numpy.sum(x109 * x126)
    result[3, 0] = numpy.sum(x129 * x30 * x89)
    result[3, 1] = numpy.sum(x131 * x133)
    result[3, 2] = numpy.sum(x128 * x133 * x50)
    result[3, 3] = numpy.sum(x136 * x44)
    result[3, 4] = numpy.sum(x131 * x137 * x97)
    result[3, 5] = numpy.sum(x128 * x138 * x44)
    result[3, 6] = numpy.sum(x141 * x142 * x89)
    result[3, 7] = numpy.sum(x136 * x50 * x52)
    result[3, 8] = numpy.sum(x131 * x138 * x52)
    result[3, 9] = numpy.sum(x129 * x143 * x79)
    result[4, 0] = numpy.sum(x144 * x30 * x82)
    result[4, 1] = numpy.sum(x120 * x145 * x87)
    result[4, 2] = numpy.sum(x114 * x145 * x146)
    result[4, 3] = numpy.sum(x147 * x44 * x95)
    result[4, 4] = numpy.sum(x148 * x44 * x87)
    result[4, 5] = numpy.sum(x146 * x149 * x44)
    result[4, 6] = numpy.sum(53.96953873354034 * x105 * x110 * x52)
    result[4, 7] = numpy.sum(x150 * x52 * x94)
    result[4, 8] = numpy.sum(x143 * x149 * x87)
    result[4, 9] = numpy.sum(x126 * x151 * x52)
    result[5, 0] = numpy.sum(x154 * x30 * x67)
    result[5, 1] = numpy.sum(x153 * x156 * x40)
    result[5, 2] = numpy.sum(x156 * x158)
    result[5, 3] = numpy.sum(x159 * x160 * x44)
    result[5, 4] = numpy.sum(x116 * x137 * x158)
    result[5, 5] = numpy.sum(x163 * x44)
    result[5, 6] = numpy.sum(x143 * x154 * x75)
    result[5, 7] = numpy.sum(x143 * x158 * x159)
    result[5, 8] = numpy.sum(x163 * x40 * x52)
    result[5, 9] = numpy.sum(x142 * x166 * x67)
    result[6, 0] = numpy.sum(x168 * x170)
    result[6, 1] = numpy.sum(x174 * x175)
    result[6, 2] = numpy.sum(x175 * x176 * x50)
    result[6, 3] = numpy.sum(x178 * x179 * x89)
    result[6, 4] = numpy.sum(x173 * x180 * x97)
    result[6, 5] = numpy.sum(x108 * x169 * x179)
    result[6, 6] = numpy.sum(x182 * x185)
    result[6, 7] = numpy.sum(53.96953873354034 * x178 * x182 * x64)
    result[6, 8] = numpy.sum(x187 * x3 * x71)
    result[6, 9] = numpy.sum(x189 * x3 * x79)
    result[7, 0] = numpy.sum(53.96953873354034 * x120 * x128 * x167)
    result[7, 1] = numpy.sum(x131 * x147 * x175)
    result[7, 2] = numpy.sum(x128 * x150 * x21)
    result[7, 3] = numpy.sum(x120 * x19 * x190)
    result[7, 4] = numpy.sum(x131 * x148 * x19)
    result[7, 5] = numpy.sum(x128 * x149 * x191)
    result[7, 6] = numpy.sum(x141 * x144 * x182)
    result[7, 7] = numpy.sum(x114 * x190 * x192)
    result[7, 8] = numpy.sum(x131 * x149 * x192)
    result[7, 9] = numpy.sum(x126 * x128 * x194)
    result[8, 0] = numpy.sum(x151 * x153 * x167)
    result[8, 1] = numpy.sum(x195 * x21 * x87)
    result[8, 2] = numpy.sum(x158 * x196 * x21)
    result[8, 3] = numpy.sum(x19 * x195 * x94)
    result[8, 4] = numpy.sum(209.0231247174979 * x158 * x191 * x87)
    result[8, 5] = numpy.sum(x162 * x19 * x196)
    result[8, 6] = numpy.sum(x104 * x153 * x194)
    result[8, 7] = numpy.sum(x158 * x197 * x94)
    result[8, 8] = numpy.sum(x162 * x197 * x87)
    result[8, 9] = numpy.sum(x166 * x199 * x200 * x81)
    result[9, 0] = numpy.sum(x168 * x202)
    result[9, 1] = numpy.sum(x201 * x203 * x40)
    result[9, 2] = numpy.sum(x203 * x206)
    result[9, 3] = numpy.sum(x179 * x207 * x60)
    result[9, 4] = numpy.sum(x116 * x180 * x206)
    result[9, 5] = numpy.sum(x179 * x209 * x67)
    result[9, 6] = numpy.sum(x210 * x3 * x75)
    result[9, 7] = numpy.sum(x200 * x206 * x211)
    result[9, 8] = numpy.sum(x200 * x209 * x212)
    result[9, 9] = numpy.sum(x215 * x3)
    result[10, 0] = numpy.sum(x217 * x218 * x77)
    result[10, 1] = numpy.sum(x219 * x220)
    result[10, 2] = numpy.sum(x218 * x220 * x50)
    result[10, 3] = numpy.sum(x221 * x222)
    result[10, 4] = numpy.sum(x219 * x221 * x65)
    result[10, 5] = numpy.sum(x218 * x223 * x4)
    result[10, 6] = numpy.sum(
        x181 * x35 * (3.0 * x0 * (2.0 * x139 + x140 + x177) + x184 * x81)
    )
    result[10, 7] = numpy.sum(x181 * x222 * x50)
    result[10, 8] = numpy.sum(x219 * x223)
    result[10, 9] = numpy.sum(x186 * x218 * x80)
    result[11, 0] = numpy.sum(x110 * x170 * x224)
    result[11, 1] = numpy.sum(x120 * x174 * x216)
    result[11, 2] = numpy.sum(x121 * x176 * x216)
    result[11, 3] = numpy.sum(x144 * x178 * x221)
    result[11, 4] = numpy.sum(x114 * x173 * x226)
    result[11, 5] = numpy.sum(x119 * x176 * x225)
    result[11, 6] = numpy.sum(x110 * x181 * x185)
    result[11, 7] = numpy.sum(x114 * x178 * x193)
    result[11, 8] = numpy.sum(x119 * x187)
    result[11, 9] = numpy.sum(x126 * x189)
    result[12, 0] = numpy.sum(x129 * x160 * x217)
    result[12, 1] = numpy.sum(x131 * x160 * x227)
    result[12, 2] = numpy.sum(x107 * x128 * x158 * x227)
    result[12, 3] = numpy.sum(x153 * x229 * x4)
    result[12, 4] = numpy.sum(120.6795573225041 * x131 * x158 * x225)
    result[12, 5] = numpy.sum(x128 * x230 * x4)
    result[12, 6] = numpy.sum(x141 * x154 * x186)
    result[12, 7] = numpy.sum(x158 * x229)
    result[12, 8] = numpy.sum(x131 * x230)
    result[12, 9] = numpy.sum(x129 * x166 * x186)
    result[13, 0] = numpy.sum(x202 * x224 * x81)
    result[13, 1] = numpy.sum(x207 * x216 * x88)
    result[13, 2] = numpy.sum(x151 * x206 * x216)
    result[13, 3] = numpy.sum(x201 * x231 * x4)
    result[13, 4] = numpy.sum(x206 * x226 * x87)
    result[13, 5] = numpy.sum(53.96953873354034 * x209 * x232 * x81)
    result[13, 6] = numpy.sum(x104 * x210)
    result[13, 7] = numpy.sum(x206 * x231)
    result[13, 8] = numpy.sum(x186 * x209 * x88)
    result[13, 9] = numpy.sum(x215 * x81)
    result[14, 0] = numpy.sum(x217 * x234 * x67)
    result[14, 1] = numpy.sum(x235 * x236 * x40)
    result[14, 2] = numpy.sum(x235 * x238)
    result[14, 3] = numpy.sum(x211 * x236 * x4)
    result[14, 4] = numpy.sum(35.33135663832854 * x232 * x237 * x40)
    result[14, 5] = numpy.sum(x232 * x239)
    result[14, 6] = numpy.sum(x186 * x234 * x75)
    result[14, 7] = numpy.sum(x211 * x238)
    result[14, 8] = numpy.sum(x212 * x239)
    result[14, 9] = numpy.sum(
        9.122517057277419 * x199 * (3.0 * x0 * (2.0 * x164 + x165 + x208) + x110 * x214)
    )
    return result


def ovlp3d_44(ax, da, A, bx, db, B):
    """Cartesian 3D (gg) overlap integral.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((15, 15), dtype=float)

    x0 = 0.5 / (ax + bx)
    x1 = (ax + bx) ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - B[0]
    x4 = -x2 - A[0]
    x5 = ax * bx * x1
    x6 = numpy.exp(-x5 * (A[0] - B[0]) ** 2)
    x7 = numpy.sqrt(x1)
    x8 = 1.772453850905516 * x7
    x9 = x6 * x8
    x10 = x0 * x9
    x11 = x4 * x9
    x12 = x11 * x3
    x13 = x10 + x12
    x14 = x13 * x4
    x15 = x13 * x3
    x16 = x0 * (x11 + x3 * x9)
    x17 = 2.0 * x0 * (x14 + x15 + 2.0 * x16)
    x18 = x3**2 * x9
    x19 = 3.0 * x10
    x20 = 2.0 * x12 + x19
    x21 = x0 * (x18 + x20)
    x22 = x15 + x16
    x23 = x22 * x4
    x24 = x21 + x23
    x25 = x24 * x3
    x26 = x17 + x25
    x27 = x26 * x3
    x28 = x26 * x4
    x29 = x22 * x3
    x30 = 3.0 * x23
    x31 = x0 * (5.0 * x21 + 2.0 * x29 + x30)
    x32 = x24 * x4
    x33 = 3.0 * x0 * (2.0 * x17 + x25 + x32)
    x34 = x28 + x31
    x35 = x3 * x34 + x33
    x36 = numpy.exp(-x5 * (A[2] - B[2]) ** 2)
    x37 = da * db * numpy.sqrt(ax**5.5) * numpy.sqrt(bx**5.5)
    x38 = x36 * x37
    x39 = 6.895974704143093 * x38
    x40 = numpy.exp(-x5 * (A[1] - B[1]) ** 2)
    x41 = 0.5641895835477563 * x1
    x42 = x40 * x41
    x43 = -x1 * (ax * A[1] + bx * B[1])
    x44 = -x43 - B[1]
    x45 = 18.24503411455484 * x44
    x46 = x38 * x42
    x47 = x46 * (x33 + x34 * x4)
    x48 = -x1 * (ax * A[2] + bx * B[2])
    x49 = -x48 - B[2]
    x50 = 18.24503411455484 * x49
    x51 = x4**2 * x9
    x52 = x0 * (x20 + x51)
    x53 = x14 + x16
    x54 = x4 * x53
    x55 = x17 + x32
    x56 = x0 * (3.0 * x21 + x30 + 2.0 * x52 + 2.0 * x54) + x4 * x55
    x57 = x38 * x56
    x58 = x40 * x8
    x59 = x44**2 * x58
    x60 = x0 * x58
    x61 = x59 + x60
    x62 = 23.55423775888569 * x61
    x63 = 0.3183098861837907 * x7
    x64 = x62 * x63
    x65 = 40.79713653194731 * x44
    x66 = x42 * x65
    x67 = x36 * x8
    x68 = x49**2 * x67
    x69 = x0 * x67
    x70 = x68 + x69
    x71 = 23.55423775888569 * x63
    x72 = x37 * x40
    x73 = x71 * x72
    x74 = 3.0 * x16
    x75 = x10 + x51
    x76 = 2.0 * x10
    x77 = x4 * (x75 + x76)
    x78 = x52 + x54
    x79 = x0 * (3.0 * x14 + x74 + x77) + x4 * x78
    x80 = 18.24503411455484 * x79
    x81 = 2.0 * x60
    x82 = x44 * (x61 + x81)
    x83 = x38 * x63
    x84 = x82 * x83
    x85 = 40.79713653194731 * x79
    x86 = x49 * x83
    x87 = x63 * x72
    x88 = x44 * x87
    x89 = 2.0 * x69
    x90 = x49 * (x70 + x89)
    x91 = x87 * x90
    x92 = x0 * (x19 + 3.0 * x51) + x4 * x77
    x93 = 3.0 * x60
    x94 = x0 * (3.0 * x59 + x93) + x44 * x82
    x95 = x39 * x63
    x96 = 0.1795871221251666 * x37
    x97 = x70 * x96
    x98 = 3.0 * x69
    x99 = x0 * (3.0 * x68 + x98) + x49 * x90
    x100 = 6.895974704143093 * x99
    x101 = -x43 - A[1]
    x102 = 18.24503411455484 * x101
    x103 = x35 * x46
    x104 = x101 * x58
    x105 = x104 * x44
    x106 = x105 + x60
    x107 = 48.27182292900164 * x106
    x108 = 48.27182292900164 * x49
    x109 = x34 * x46
    x110 = 62.31865543169889 * x55
    x111 = x0 * (x104 + x44 * x58)
    x112 = x106 * x44
    x113 = x111 + x112
    x114 = x113 * x83
    x115 = 107.9390774670807 * x106
    x116 = x110 * x87
    x117 = 48.27182292900164 * x78
    x118 = 2.0 * x105 + x93
    x119 = x0 * (x118 + x59)
    x120 = x113 * x44
    x121 = x119 + x120
    x122 = x121 * x83
    x123 = 107.9390774670807 * x78
    x124 = 18.24503411455484 * x77
    x125 = 3.0 * x111
    x126 = x0 * (3.0 * x112 + x125 + x82) + x121 * x44
    x127 = x126 * x83
    x128 = 62.31865543169889 * x77
    x129 = x90 * x96
    x130 = x124 * x87
    x131 = -x48 - A[2]
    x132 = 18.24503411455484 * x131
    x133 = 48.27182292900164 * x131
    x134 = x131 * x67
    x135 = x134 * x49
    x136 = x135 + x69
    x137 = 48.27182292900164 * x87
    x138 = x131 * x83
    x139 = 107.9390774670807 * x136
    x140 = x0 * (x134 + x49 * x67)
    x141 = x136 * x49
    x142 = x140 + x141
    x143 = 48.27182292900164 * x82
    x144 = x136 * x96
    x145 = 2.0 * x135 + x98
    x146 = x0 * (x145 + x68)
    x147 = x142 * x49
    x148 = x146 + x147
    x149 = x142 * x96
    x150 = 3.0 * x140
    x151 = x0 * (3.0 * x141 + x150 + x90) + x148 * x49
    x152 = x27 + x31
    x153 = x101**2 * x58
    x154 = x153 + x60
    x155 = 23.55423775888569 * x154
    x156 = x101 * x106
    x157 = x111 + x156
    x158 = 62.31865543169889 * x83
    x159 = x158 * x26
    x160 = 80.45303821500274 * x24
    x161 = x101 * x113
    x162 = x119 + x161
    x163 = x162 * x83
    x164 = 139.3487498116652 * x157
    x165 = 80.45303821500274 * x97
    x166 = 2.0 * x0 * (2.0 * x111 + x112 + x156)
    x167 = x162 * x44
    x168 = x166 + x167
    x169 = x158 * x168
    x170 = 139.3487498116652 * x53
    x171 = 62.31865543169889 * x129
    x172 = 3.0 * x161
    x173 = x0 * (5.0 * x119 + 2.0 * x120 + x172)
    x174 = x168 * x44
    x175 = x173 + x174
    x176 = x175 * x38
    x177 = x75 * x96
    x178 = 40.79713653194731 * x131
    x179 = x101 * x87
    x180 = 139.3487498116652 * x113
    x181 = 241.3591146450082 * x144
    x182 = 139.3487498116652 * x24
    x183 = 241.3591146450082 * x149
    x184 = 107.9390774670807 * x148
    x185 = 40.79713653194731 * x75
    x186 = 107.9390774670807 * x144
    x187 = 139.3487498116652 * x149
    x188 = x131**2 * x67
    x189 = x188 + x69
    x190 = 23.55423775888569 * x189
    x191 = 62.31865543169889 * x87
    x192 = x191 * x26
    x193 = x131 * x136
    x194 = x140 + x193
    x195 = x189 * x96
    x196 = 80.45303821500274 * x61
    x197 = x131 * x142
    x198 = x146 + x197
    x199 = x198 * x87
    x200 = 62.31865543169889 * x82
    x201 = x194 * x96
    x202 = 2.0 * x0 * (2.0 * x140 + x141 + x193)
    x203 = x198 * x49
    x204 = x202 + x203
    x205 = x191 * x204
    x206 = 3.0 * x197
    x207 = x0 * (5.0 * x146 + 2.0 * x147 + x206)
    x208 = x204 * x49
    x209 = x207 + x208
    x210 = x10 + x18
    x211 = x3 * (x210 + x76)
    x212 = x21 + x29
    x213 = x0 * (3.0 * x15 + x211 + x74) + x212 * x3
    x214 = 18.24503411455484 * x213
    x215 = x101 * (x154 + x81)
    x216 = x215 * x83
    x217 = x0 * (x118 + x153)
    x218 = x101 * x157
    x219 = x217 + x218
    x220 = 48.27182292900164 * x83
    x221 = x219 * x220
    x222 = 48.27182292900164 * x215
    x223 = 62.31865543169889 * x22
    x224 = x101 * x162
    x225 = x166 + x224
    x226 = x225 * x83
    x227 = 107.9390774670807 * x22
    x228 = x101 * x168
    x229 = x173 + x228
    x230 = 107.9390774670807 * x13
    x231 = 18.24503411455484 * x4
    x232 = 3.0 * x0 * (2.0 * x166 + x167 + x224)
    x233 = x229 * x44 + x232
    x234 = x41 * x6
    x235 = x234 * x38
    x236 = x233 * x235
    x237 = x229 * x235
    x238 = x37 * x6
    x239 = x238 * x70
    x240 = x239 * x63
    x241 = x238 * x63
    x242 = x241 * x90
    x243 = 48.27182292900164 * x4
    x244 = 18.24503411455484 * x241
    x245 = x215 * x244
    x246 = 40.79713653194731 * x154
    x247 = 107.9390774670807 * x212
    x248 = 139.3487498116652 * x22
    x249 = x13 * x96
    x250 = x241 * x4
    x251 = x162 * x241
    x252 = 139.3487498116652 * x251
    x253 = 40.79713653194731 * x189
    x254 = 241.3591146450082 * x201
    x255 = x238 * x42
    x256 = x101 * x255
    x257 = x131 * (x189 + x89)
    x258 = x257 * x87
    x259 = x137 * x212
    x260 = x0 * (x145 + x188)
    x261 = x131 * x194
    x262 = x260 + x261
    x263 = x61 * x96
    x264 = x131 * x198
    x265 = x202 + x264
    x266 = x265 * x87
    x267 = x131 * x204
    x268 = x207 + x267
    x269 = x244 * x257
    x270 = 62.31865543169889 * x241
    x271 = x265 * x270
    x272 = 3.0 * x0 * (2.0 * x202 + x203 + x264)
    x273 = x268 * x49 + x272
    x274 = x255 * x273
    x275 = x0 * (3.0 * x153 + x93) + x101 * x215
    x276 = x0 * (3.0 * x18 + x19) + x211 * x3
    x277 = x0 * (x125 + 3.0 * x156 + x215) + x101 * x219
    x278 = 18.24503411455484 * x277
    x279 = x211 * x83
    x280 = x0 * (3.0 * x119 + x172 + 2.0 * x217 + 2.0 * x218) + x101 * x225
    x281 = 23.55423775888569 * x210
    x282 = 40.79713653194731 * x277
    x283 = 18.24503411455484 * x3
    x284 = x235 * (x101 * x229 + x232)
    x285 = 62.31865543169889 * x210
    x286 = x241 * x3
    x287 = 107.9390774670807 * x286
    x288 = 48.27182292900164 * x241
    x289 = 62.31865543169889 * x211
    x290 = 80.45303821500274 * x210
    x291 = x168 * x270
    x292 = x204 * x270
    x293 = x257 * x96
    x294 = x210 * x96
    x295 = x121 * x288
    x296 = x0 * (3.0 * x188 + x98) + x131 * x257
    x297 = 6.895974704143093 * x296
    x298 = 18.24503411455484 * x211
    x299 = x0 * (x150 + 3.0 * x193 + x257) + x131 * x262
    x300 = x299 * x87
    x301 = x0 * (3.0 * x146 + x206 + 2.0 * x260 + 2.0 * x261) + x131 * x265
    x302 = x244 * x82
    x303 = x238 * x301
    x304 = x255 * (x131 * x268 + x272)

    # 225 item(s)
    result[0, 0] = numpy.sum(
        x39 * x42 * (x0 * (3.0 * x27 + 4.0 * x28 + 7.0 * x31) + x35 * x4)
    )
    result[0, 1] = numpy.sum(x45 * x47)
    result[0, 2] = numpy.sum(x47 * x50)
    result[0, 3] = numpy.sum(x57 * x64)
    result[0, 4] = numpy.sum(x49 * x57 * x66)
    result[0, 5] = numpy.sum(x56 * x70 * x73)
    result[0, 6] = numpy.sum(x80 * x84)
    result[0, 7] = numpy.sum(x61 * x85 * x86)
    result[0, 8] = numpy.sum(x70 * x85 * x88)
    result[0, 9] = numpy.sum(x80 * x91)
    result[0, 10] = numpy.sum(x92 * x94 * x95)
    result[0, 11] = numpy.sum(x50 * x84 * x92)
    result[0, 12] = numpy.sum(x62 * x92 * x97)
    result[0, 13] = numpy.sum(x45 * x91 * x92)
    result[0, 14] = numpy.sum(x100 * x87 * x92)
    result[1, 0] = numpy.sum(x102 * x103)
    result[1, 1] = numpy.sum(x107 * x34 * x83)
    result[1, 2] = numpy.sum(x101 * x108 * x109)
    result[1, 3] = numpy.sum(x110 * x114)
    result[1, 4] = numpy.sum(x115 * x55 * x86)
    result[1, 5] = numpy.sum(x101 * x116 * x70)
    result[1, 6] = numpy.sum(x117 * x122)
    result[1, 7] = numpy.sum(x114 * x123 * x49)
    result[1, 8] = numpy.sum(x106 * x123 * x97)
    result[1, 9] = numpy.sum(x101 * x117 * x91)
    result[1, 10] = numpy.sum(x124 * x127)
    result[1, 11] = numpy.sum(x108 * x122 * x77)
    result[1, 12] = numpy.sum(x113 * x128 * x97)
    result[1, 13] = numpy.sum(x107 * x129 * x77)
    result[1, 14] = numpy.sum(x101 * x130 * x99)
    result[2, 0] = numpy.sum(x103 * x132)
    result[2, 1] = numpy.sum(x109 * x133 * x44)
    result[2, 2] = numpy.sum(x136 * x137 * x34)
    result[2, 3] = numpy.sum(x110 * x138 * x61)
    result[2, 4] = numpy.sum(x139 * x55 * x88)
    result[2, 5] = numpy.sum(x116 * x142)
    result[2, 6] = numpy.sum(x138 * x143 * x78)
    result[2, 7] = numpy.sum(x123 * x144 * x61)
    result[2, 8] = numpy.sum(x123 * x142 * x88)
    result[2, 9] = numpy.sum(x117 * x148 * x87)
    result[2, 10] = numpy.sum(x124 * x138 * x94)
    result[2, 11] = numpy.sum(x143 * x144 * x77)
    result[2, 12] = numpy.sum(x128 * x149 * x61)
    result[2, 13] = numpy.sum(x137 * x148 * x44 * x77)
    result[2, 14] = numpy.sum(x130 * x151)
    result[3, 0] = numpy.sum(x152 * x155 * x83)
    result[3, 1] = numpy.sum(x157 * x159)
    result[3, 2] = numpy.sum(x154 * x159 * x49)
    result[3, 3] = numpy.sum(x160 * x163)
    result[3, 4] = numpy.sum(x164 * x24 * x86)
    result[3, 5] = numpy.sum(x154 * x165 * x24)
    result[3, 6] = numpy.sum(x169 * x53)
    result[3, 7] = numpy.sum(x163 * x170 * x49)
    result[3, 8] = numpy.sum(x157 * x170 * x97)
    result[3, 9] = numpy.sum(x154 * x171 * x53)
    result[3, 10] = numpy.sum(x176 * x71 * x75)
    result[3, 11] = numpy.sum(x169 * x49 * x75)
    result[3, 12] = numpy.sum(x162 * x165 * x75)
    result[3, 13] = numpy.sum(x157 * x171 * x75)
    result[3, 14] = numpy.sum(x155 * x177 * x99)
    result[4, 0] = numpy.sum(x101 * x152 * x178 * x46)
    result[4, 1] = numpy.sum(x115 * x138 * x26)
    result[4, 2] = numpy.sum(x139 * x179 * x26)
    result[4, 3] = numpy.sum(x138 * x180 * x24)
    result[4, 4] = numpy.sum(x106 * x181 * x24)
    result[4, 5] = numpy.sum(x142 * x179 * x182)
    result[4, 6] = numpy.sum(107.9390774670807 * x122 * x131 * x53)
    result[4, 7] = numpy.sum(x113 * x181 * x53)
    result[4, 8] = numpy.sum(x106 * x183 * x53)
    result[4, 9] = numpy.sum(x179 * x184 * x53)
    result[4, 10] = numpy.sum(x127 * x131 * x185)
    result[4, 11] = numpy.sum(x121 * x186 * x75)
    result[4, 12] = numpy.sum(x113 * x187 * x75)
    result[4, 13] = numpy.sum(x106 * x177 * x184)
    result[4, 14] = numpy.sum(x151 * x179 * x185)
    result[5, 0] = numpy.sum(x152 * x190 * x87)
    result[5, 1] = numpy.sum(x189 * x192 * x44)
    result[5, 2] = numpy.sum(x192 * x194)
    result[5, 3] = numpy.sum(x195 * x196 * x24)
    result[5, 4] = numpy.sum(x182 * x194 * x88)
    result[5, 5] = numpy.sum(x160 * x199)
    result[5, 6] = numpy.sum(x195 * x200 * x53)
    result[5, 7] = numpy.sum(x170 * x201 * x61)
    result[5, 8] = numpy.sum(x170 * x199 * x44)
    result[5, 9] = numpy.sum(x205 * x53)
    result[5, 10] = numpy.sum(x177 * x190 * x94)
    result[5, 11] = numpy.sum(x177 * x194 * x200)
    result[5, 12] = numpy.sum(x177 * x196 * x198)
    result[5, 13] = numpy.sum(x205 * x44 * x75)
    result[5, 14] = numpy.sum(x209 * x73 * x75)
    result[6, 0] = numpy.sum(x214 * x216)
    result[6, 1] = numpy.sum(x212 * x221)
    result[6, 2] = numpy.sum(x212 * x222 * x86)
    result[6, 3] = numpy.sum(x223 * x226)
    result[6, 4] = numpy.sum(x219 * x227 * x86)
    result[6, 5] = numpy.sum(x215 * x223 * x97)
    result[6, 6] = numpy.sum(x13 * x220 * x229)
    result[6, 7] = numpy.sum(x226 * x230 * x49)
    result[6, 8] = numpy.sum(x219 * x230 * x97)
    result[6, 9] = numpy.sum(x129 * x13 * x222)
    result[6, 10] = numpy.sum(x231 * x236)
    result[6, 11] = numpy.sum(x108 * x237 * x4)
    result[6, 12] = numpy.sum(62.31865543169889 * x225 * x240 * x4)
    result[6, 13] = numpy.sum(x219 * x242 * x243)
    result[6, 14] = numpy.sum(x245 * x4 * x99)
    result[7, 0] = numpy.sum(x138 * x213 * x246)
    result[7, 1] = numpy.sum(x138 * x157 * x247)
    result[7, 2] = numpy.sum(x154 * x186 * x212)
    result[7, 3] = numpy.sum(x131 * x163 * x248)
    result[7, 4] = numpy.sum(x157 * x181 * x22)
    result[7, 5] = numpy.sum(x154 * x187 * x22)
    result[7, 6] = numpy.sum(x138 * x168 * x230)
    result[7, 7] = numpy.sum(x13 * x162 * x181)
    result[7, 8] = numpy.sum(x13 * x157 * x183)
    result[7, 9] = numpy.sum(x154 * x184 * x249)
    result[7, 10] = numpy.sum(x176 * x178 * x234 * x4)
    result[7, 11] = numpy.sum(x139 * x168 * x250)
    result[7, 12] = numpy.sum(x142 * x252 * x4)
    result[7, 13] = numpy.sum(x157 * x184 * x250)
    result[7, 14] = numpy.sum(x151 * x246 * x250)
    result[8, 0] = numpy.sum(x179 * x213 * x253)
    result[8, 1] = numpy.sum(x115 * x195 * x212)
    result[8, 2] = numpy.sum(x179 * x194 * x247)
    result[8, 3] = numpy.sum(x180 * x195 * x22)
    result[8, 4] = numpy.sum(x106 * x22 * x254)
    result[8, 5] = numpy.sum(x101 * x199 * x248)
    result[8, 6] = numpy.sum(x121 * x195 * x230)
    result[8, 7] = numpy.sum(x113 * x13 * x254)
    result[8, 8] = numpy.sum(241.3591146450082 * x106 * x198 * x249)
    result[8, 9] = numpy.sum(x179 * x204 * x230)
    result[8, 10] = numpy.sum(x126 * x250 * x253)
    result[8, 11] = numpy.sum(107.9390774670807 * x121 * x194 * x250)
    result[8, 12] = numpy.sum(x180 * x198 * x250)
    result[8, 13] = numpy.sum(x115 * x204 * x250)
    result[8, 14] = numpy.sum(40.79713653194731 * x209 * x256 * x4)
    result[9, 0] = numpy.sum(x214 * x258)
    result[9, 1] = numpy.sum(x257 * x259 * x44)
    result[9, 2] = numpy.sum(x259 * x262)
    result[9, 3] = numpy.sum(x223 * x257 * x263)
    result[9, 4] = numpy.sum(x227 * x262 * x88)
    result[9, 5] = numpy.sum(x223 * x266)
    result[9, 6] = numpy.sum(x143 * x249 * x257)
    result[9, 7] = numpy.sum(x230 * x262 * x263)
    result[9, 8] = numpy.sum(x230 * x266 * x44)
    result[9, 9] = numpy.sum(x13 * x137 * x268)
    result[9, 10] = numpy.sum(x269 * x4 * x94)
    result[9, 11] = numpy.sum(x143 * x250 * x262)
    result[9, 12] = numpy.sum(x271 * x4 * x61)
    result[9, 13] = numpy.sum(x243 * x255 * x268 * x44)
    result[9, 14] = numpy.sum(x231 * x274)
    result[10, 0] = numpy.sum(x275 * x276 * x95)
    result[10, 1] = numpy.sum(x278 * x279)
    result[10, 2] = numpy.sum(x275 * x279 * x50)
    result[10, 3] = numpy.sum(x280 * x281 * x83)
    result[10, 4] = numpy.sum(x210 * x282 * x86)
    result[10, 5] = numpy.sum(x275 * x281 * x97)
    result[10, 6] = numpy.sum(x283 * x284)
    result[10, 7] = numpy.sum(40.79713653194731 * x235 * x280 * x3 * x49)
    result[10, 8] = numpy.sum(x240 * x282 * x3)
    result[10, 9] = numpy.sum(x242 * x275 * x283)
    result[10, 10] = numpy.sum(
        x234 * x39 * (x0 * (7.0 * x173 + 3.0 * x174 + 4.0 * x228) + x101 * x233)
    )
    result[10, 11] = numpy.sum(x284 * x50)
    result[10, 12] = numpy.sum(x239 * x280 * x71)
    result[10, 13] = numpy.sum(x242 * x278)
    result[10, 14] = numpy.sum(x100 * x241 * x275)
    result[11, 0] = numpy.sum(x132 * x216 * x276)
    result[11, 1] = numpy.sum(x131 * x211 * x221)
    result[11, 2] = numpy.sum(x144 * x211 * x222)
    result[11, 3] = numpy.sum(x131 * x226 * x285)
    result[11, 4] = numpy.sum(x186 * x210 * x219)
    result[11, 5] = numpy.sum(x149 * x215 * x285)
    result[11, 6] = numpy.sum(x133 * x237 * x3)
    result[11, 7] = numpy.sum(x139 * x225 * x286)
    result[11, 8] = numpy.sum(x142 * x219 * x287)
    result[11, 9] = numpy.sum(x148 * x222 * x286)
    result[11, 10] = numpy.sum(x132 * x236)
    result[11, 11] = numpy.sum(x136 * x229 * x288)
    result[11, 12] = numpy.sum(x142 * x225 * x270)
    result[11, 13] = numpy.sum(x148 * x219 * x288)
    result[11, 14] = numpy.sum(x151 * x245)
    result[12, 0] = numpy.sum(x155 * x195 * x276)
    result[12, 1] = numpy.sum(x157 * x195 * x289)
    result[12, 2] = numpy.sum(x154 * x201 * x289)
    result[12, 3] = numpy.sum(x162 * x195 * x290)
    result[12, 4] = numpy.sum(x164 * x201 * x210)
    result[12, 5] = numpy.sum(x154 * x198 * x290 * x96)
    result[12, 6] = numpy.sum(x189 * x291 * x3)
    result[12, 7] = numpy.sum(x194 * x252 * x3)
    result[12, 8] = numpy.sum(x164 * x198 * x286)
    result[12, 9] = numpy.sum(x154 * x292 * x3)
    result[12, 10] = numpy.sum(x175 * x190 * x241)
    result[12, 11] = numpy.sum(x194 * x291)
    result[12, 12] = numpy.sum(80.45303821500274 * x198 * x251)
    result[12, 13] = numpy.sum(x157 * x292)
    result[12, 14] = numpy.sum(x155 * x209 * x241)
    result[13, 0] = numpy.sum(x102 * x258 * x276)
    result[13, 1] = numpy.sum(x107 * x211 * x293)
    result[13, 2] = numpy.sum(x101 * x137 * x211 * x262)
    result[13, 3] = numpy.sum(x113 * x285 * x293)
    result[13, 4] = numpy.sum(x115 * x262 * x294)
    result[13, 5] = numpy.sum(x101 * x266 * x285)
    result[13, 6] = numpy.sum(x257 * x295 * x3)
    result[13, 7] = numpy.sum(x113 * x262 * x287)
    result[13, 8] = numpy.sum(x115 * x265 * x286)
    result[13, 9] = numpy.sum(48.27182292900164 * x256 * x268 * x3)
    result[13, 10] = numpy.sum(x126 * x269)
    result[13, 11] = numpy.sum(x262 * x295)
    result[13, 12] = numpy.sum(x113 * x271)
    result[13, 13] = numpy.sum(x107 * x241 * x268)
    result[13, 14] = numpy.sum(x102 * x274)
    result[14, 0] = numpy.sum(x276 * x297 * x87)
    result[14, 1] = numpy.sum(x296 * x298 * x88)
    result[14, 2] = numpy.sum(x298 * x300)
    result[14, 3] = numpy.sum(x294 * x296 * x62)
    result[14, 4] = numpy.sum(x210 * x300 * x65)
    result[14, 5] = numpy.sum(x281 * x301 * x87)
    result[14, 6] = numpy.sum(x296 * x3 * x302)
    result[14, 7] = numpy.sum(40.79713653194731 * x286 * x299 * x61)
    result[14, 8] = numpy.sum(x3 * x303 * x66)
    result[14, 9] = numpy.sum(x283 * x304)
    result[14, 10] = numpy.sum(x241 * x297 * x94)
    result[14, 11] = numpy.sum(x299 * x302)
    result[14, 12] = numpy.sum(x303 * x64)
    result[14, 13] = numpy.sum(x304 * x45)
    result[14, 14] = numpy.sum(
        6.895974704143093
        * x255
        * (x0 * (7.0 * x207 + 3.0 * x208 + 4.0 * x267) + x131 * x273)
    )
    return result


ovlp3d = {
    (0, 0): ovlp3d_00,
    (0, 1): ovlp3d_01,
    (0, 2): ovlp3d_02,
    (0, 3): ovlp3d_03,
    (0, 4): ovlp3d_04,
    (1, 0): ovlp3d_10,
    (1, 1): ovlp3d_11,
    (1, 2): ovlp3d_12,
    (1, 3): ovlp3d_13,
    (1, 4): ovlp3d_14,
    (2, 0): ovlp3d_20,
    (2, 1): ovlp3d_21,
    (2, 2): ovlp3d_22,
    (2, 3): ovlp3d_23,
    (2, 4): ovlp3d_24,
    (3, 0): ovlp3d_30,
    (3, 1): ovlp3d_31,
    (3, 2): ovlp3d_32,
    (3, 3): ovlp3d_33,
    (3, 4): ovlp3d_34,
    (4, 0): ovlp3d_40,
    (4, 1): ovlp3d_41,
    (4, 2): ovlp3d_42,
    (4, 3): ovlp3d_43,
    (4, 4): ovlp3d_44,
}
